<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Â∫ÉÂëä„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπË©≥Á¥∞ - MetaÂ∫ÉÂëä„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ</title>
    <link rel="stylesheet" href="/style.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f5f6fa;
        }
        
        .app-container {
            display: flex;
            height: 100vh;
        }
        
        .sidebar {
            width: 250px;
            background: #2c3e50;
            color: white;
            height: 100vh;
            overflow-y: auto;
        }
        
        .sidebar-header {
            padding: 20px;
            background: rgba(0,0,0,0.1);
            border-bottom: 1px solid rgba(255,255,255,0.1);
        }
        
        .sidebar-header h3 {
            margin: 0;
            font-size: 18px;
            font-weight: 500;
        }
        
        .sidebar-nav {
            padding: 10px 0;
        }
        
        .nav-item {
            display: block;
            padding: 12px 20px;
            color: rgba(255,255,255,0.8);
            text-decoration: none;
            transition: all 0.3s;
            position: relative;
        }
        
        .nav-item:hover {
            background: rgba(255,255,255,0.1);
            color: white;
        }
        
        .nav-item.active {
            background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        
        .nav-item.active::before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            width: 3px;
            background: #fff;
        }
        
        .main-content {
            flex: 1;
            padding: 30px;
            overflow-y: auto;
        }
        
        .content-header {
            margin-bottom: 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .content-title {
            font-size: 28px;
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 10px;
        }
        
        .date-selector {
            display: flex;
            gap: 10px;
            align-items: center;
        }
        
        .date-selector input {
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        
        .date-selector button {
            padding: 8px 16px;
            background: #667eea;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        
        .tabs {
            display: flex;
            gap: 20px;
            margin-bottom: 30px;
            border-bottom: 2px solid #e1e4e8;
        }
        
        .tab {
            padding: 12px 20px;
            cursor: pointer;
            border-bottom: 3px solid transparent;
            color: #666;
            transition: all 0.3s;
        }
        
        .tab.active {
            color: #667eea;
            border-bottom-color: #667eea;
        }
        
        .tab:hover {
            color: #667eea;
        }
        
        .performance-table {
            background: white;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            margin-bottom: 30px;
        }
        
        .table-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        
        .table-title {
            font-size: 18px;
            font-weight: 600;
            color: #2c3e50;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
        }
        
        th {
            text-align: left;
            padding: 12px;
            background: #f8f9fa;
            font-weight: 600;
            color: #666;
            font-size: 13px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        td {
            padding: 12px;
            border-bottom: 1px solid #f0f0f0;
            color: #333;
        }
        
        tr:hover {
            background: #f8f9fa;
        }
        
        .status-badge {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: 600;
        }
        
        .status-active {
            background: #d4f4dd;
            color: #27ae60;
        }
        
        .status-paused {
            background: #fff3cd;
            color: #f39c12;
        }
        
        .creative-type {
            display: inline-flex;
            align-items: center;
            gap: 6px;
            padding: 4px 10px;
            background: #f0f2f5;
            border-radius: 4px;
            font-size: 13px;
        }
        
        .metric-value {
            font-weight: 600;
        }
        
        .metric-positive {
            color: #27ae60;
        }
        
        .metric-negative {
            color: #e74c3c;
        }
        
        .loading {
            text-align: center;
            padding: 40px;
            color: #999;
        }
        
        .no-data {
            text-align: center;
            padding: 60px;
            color: #999;
        }
        
        .summary-cards {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .summary-card {
            background: white;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        }
        
        .summary-label {
            font-size: 13px;
            color: #999;
            margin-bottom: 8px;
        }
        
        .summary-value {
            font-size: 24px;
            font-weight: bold;
            color: #2c3e50;
        }
        
        .summary-trend {
            font-size: 13px;
            margin-top: 8px;
            color: #666;
        }
        
        .filter-section {
            display: flex;
            gap: 15px;
            align-items: center;
            margin-bottom: 20px;
        }
        
        .filter-select {
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            background: white;
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- „Çµ„Ç§„Éâ„Éê„ÉºÔºàÁµ±‰∏Ä„Éá„Ç∂„Ç§„É≥Ôºâ -->
        <div class="sidebar">
            <div class="sidebar-header">
                <h3>MetaÂ∫ÉÂëä„É¨„Éù„Éº„Éà</h3>
            </div>
            <nav class="sidebar-nav">
                <a href="/dashboard" class="nav-item">„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ</a>
                <a href="/campaigns" class="nav-item">üìä „Ç≠„É£„É≥„Éö„Éº„É≥ÁÆ°ÁêÜ</a>
                <a href="/ad-performance" class="nav-item active">üéØ Â∫ÉÂëä„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ</a>
                <a href="/audience-analysis" class="nav-item">üë• „Ç™„Éº„Éá„Ç£„Ç®„É≥„ÇπÂàÜÊûê</a>
                <a href="/multi-account" class="nav-item">üîÑ „Éû„É´„ÉÅ„Ç¢„Ç´„Ç¶„É≥„Éà</a>
                <a href="/budget-scheduling" class="nav-item">‚è∞ ‰∫àÁÆó„Çπ„Ç±„Ç∏„É•„Éº„É™„É≥„Ç∞</a>
                <a href="/alerts" class="nav-item" id="alerts-link">„Ç¢„É©„Éº„ÉàÂÜÖÂÆπ</a>
                <a href="/alert-history" class="nav-item">„Ç¢„É©„Éº„ÉàÂ±•Ê≠¥</a>
                <a href="/improvement-tasks" class="nav-item">Á¢∫Ë™ç‰∫ãÈ†Ö</a>
                <a href="/improvement-strategies" class="nav-item">ÊîπÂñÑÊñΩÁ≠ñ</a>
            
            <div class="sidebar-footer" style="position: absolute; bottom: 20px; left: 0; right: 0; padding: 0 20px;">
                <form action="/logout" method="POST" style="margin: 0;">
                    <button type="submit" class="nav-item" style="
                        display: block;
                        width: 100%;
                        padding: 12px 20px;
                        background: rgba(231, 76, 60, 0.1);
                        color: #e74c3c;
                        border: 1px solid rgba(231, 76, 60, 0.2);
                        border-radius: 5px;
                        text-align: left;
                        cursor: pointer;
                        transition: all 0.3s;
                        font-size: 14px;
                        font-weight: 500;
                    " onmouseover="this.style.background='rgba(231, 76, 60, 0.2)'" onmouseout="this.style.background='rgba(231, 76, 60, 0.1)'">
                        üö™ „É≠„Ç∞„Ç¢„Ç¶„Éà
                    </button>
                </form>
            </div>
        </div>
        
        <div class="main-content">
            <div class="content-header">
                <h1 class="content-title">Â∫ÉÂëä„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπË©≥Á¥∞</h1>
                <div class="date-selector">
                    <input type="date" id="dateFrom" />
                    <span>„Äú</span>
                    <input type="date" id="dateTo" />
                    <button onclick="loadData()">Êõ¥Êñ∞</button>
                </div>
            </div>
            
            <!-- „Çø„Éñ„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥ -->
            <div class="tabs">
                <div class="tab active" data-tab="campaigns" onclick="switchTab('campaigns')">
                    „Ç≠„É£„É≥„Éö„Éº„É≥
                </div>
                <div class="tab" data-tab="adsets" onclick="switchTab('adsets')">
                    Â∫ÉÂëä„Çª„ÉÉ„Éà
                </div>
                <div class="tab" data-tab="ads" onclick="switchTab('ads')">
                    ÂÄãÂà•Â∫ÉÂëä
                </div>
                <div class="tab" data-tab="audience" onclick="switchTab('audience')">
                    „Ç™„Éº„Éá„Ç£„Ç®„É≥„ÇπÂàÜÊûê
                </div>
                <div class="tab" data-tab="funnel" onclick="switchTab('funnel')">
                    „Éï„Ç°„Éç„É´ÂàÜÊûê
                </div>
            </div>
            
            <!-- „Çµ„Éû„É™„Éº„Ç´„Éº„Éâ -->
            <div class="summary-cards" id="summaryCards">
                <div class="summary-card">
                    <div class="summary-label">Á∑èÊ∂àÂåñÈ°ç</div>
                    <div class="summary-value" id="totalSpend">¬•0</div>
                </div>
                <div class="summary-card">
                    <div class="summary-label">Á∑è„Ç≥„É≥„Éê„Éº„Ç∏„Éß„É≥</div>
                    <div class="summary-value" id="totalConversions">0</div>
                </div>
                <div class="summary-card">
                    <div class="summary-label">Âπ≥ÂùáCPA</div>
                    <div class="summary-value" id="avgCPA">¬•0</div>
                </div>
                <div class="summary-card">
                    <div class="summary-label">Âπ≥ÂùáCTR</div>
                    <div class="summary-value" id="avgCTR">0%</div>
                </div>
            </div>
            
            <!-- „Ç≠„É£„É≥„Éö„Éº„É≥„Éì„É•„Éº -->
            <div id="campaignsView" class="tab-content">
                <div class="performance-table">
                    <div class="table-header">
                        <h3 class="table-title">„Ç≠„É£„É≥„Éö„Éº„É≥„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ</h3>
                    </div>
                    <div id="campaignsTableContainer">
                        <div class="loading">„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø‰∏≠...</div>
                    </div>
                </div>
            </div>
            
            <!-- Â∫ÉÂëä„Çª„ÉÉ„Éà„Éì„É•„Éº -->
            <div id="adsetsView" class="tab-content" style="display: none;">
                <div class="filter-section">
                    <label>„Ç≠„É£„É≥„Éö„Éº„É≥:</label>
                    <select class="filter-select" id="campaignFilter" onchange="filterAdSets()">
                        <option value="">„Åô„Åπ„Å¶„ÅÆ„Ç≠„É£„É≥„Éö„Éº„É≥</option>
                    </select>
                </div>
                <div class="performance-table">
                    <div class="table-header">
                        <h3 class="table-title">Â∫ÉÂëä„Çª„ÉÉ„Éà„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ</h3>
                    </div>
                    <div id="adsetsTableContainer">
                        <div class="loading">„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø‰∏≠...</div>
                    </div>
                </div>
            </div>
            
            <!-- ÂÄãÂà•Â∫ÉÂëä„Éì„É•„Éº -->
            <div id="adsView" class="tab-content" style="display: none;">
                <div class="filter-section">
                    <label>Â∫ÉÂëä„Çª„ÉÉ„Éà:</label>
                    <select class="filter-select" id="adsetFilter" onchange="filterAds()">
                        <option value="">„Åô„Åπ„Å¶„ÅÆÂ∫ÉÂëä„Çª„ÉÉ„Éà</option>
                    </select>
                    <label>„ÇØ„É™„Ç®„Ç§„ÉÜ„Ç£„Éñ:</label>
                    <select class="filter-select" id="creativeFilter" onchange="filterAds()">
                        <option value="">„Åô„Åπ„Å¶</option>
                        <option value="IMAGE">ÁîªÂÉè</option>
                        <option value="VIDEO">ÂãïÁîª</option>
                        <option value="CAROUSEL">„Ç´„É´„Éº„Çª„É´</option>
                    </select>
                </div>
                <div class="performance-table">
                    <div class="table-header">
                        <h3 class="table-title">ÂÄãÂà•Â∫ÉÂëä„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ</h3>
                    </div>
                    <div id="adsTableContainer">
                        <div class="loading">„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø‰∏≠...</div>
                    </div>
                </div>
            </div>
            
            <!-- „Ç™„Éº„Éá„Ç£„Ç®„É≥„ÇπÂàÜÊûê„Éì„É•„Éº -->
            <div id="audienceView" class="tab-content" style="display: none;">
                <div class="performance-table">
                    <div class="table-header">
                        <h3 class="table-title">„Ç™„Éº„Éá„Ç£„Ç®„É≥„ÇπÂàÜÊûê</h3>
                    </div>
                    <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 30px;">
                        <div>
                            <h4>Âπ¥ÈΩ¢Âà•</h4>
                            <canvas id="ageChart"></canvas>
                        </div>
                        <div>
                            <h4>ÊÄßÂà•</h4>
                            <canvas id="genderChart"></canvas>
                        </div>
                        <div>
                            <h4>„Éá„Éê„Ç§„ÇπÂà•</h4>
                            <canvas id="deviceChart"></canvas>
                        </div>
                    </div>
                    <div id="audienceTableContainer" style="margin-top: 30px;">
                        <div class="loading">„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø‰∏≠...</div>
                    </div>
                </div>
            </div>
            
            <!-- „Éï„Ç°„Éç„É´ÂàÜÊûê„Éì„É•„Éº -->
            <div id="funnelView" class="tab-content" style="display: none;">
                <div class="performance-table">
                    <div class="table-header">
                        <h3 class="table-title">„Éï„Ç°„Éç„É´ÂàÜÊûê</h3>
                    </div>
                    <div style="margin: 30px 0;">
                        <canvas id="funnelChart" style="max-height: 400px;"></canvas>
                    </div>
                    <div id="funnelTableContainer">
                        <div class="loading">„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø‰∏≠...</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        let campaignsData = [];
        let adsetsData = [];
        let adsData = [];
        let audienceData = null;
        let funnelData = null;
        let currentTab = 'campaigns';
        
        // ÂàùÊúüË®≠ÂÆö
        document.addEventListener('DOMContentLoaded', function() {
            // Êó•‰ªò„ÅÆÂàùÊúüÂÄ§„ÇíË®≠ÂÆöÔºàÈÅéÂéª7Êó•ÈñìÔºâ
            const today = new Date();
            const weekAgo = new Date(today);
            weekAgo.setDate(weekAgo.getDate() - 7);
            
            document.getElementById('dateTo').value = today.toISOString().split('T')[0];
            document.getElementById('dateFrom').value = weekAgo.toISOString().split('T')[0];
            
            // „Éá„Éº„ÇøË™≠„ÅøËæº„Åø
            loadData();
        });
        
        // „Çø„ÉñÂàá„ÇäÊõø„Åà
        function switchTab(tab) {
            currentTab = tab;
            
            // „Çø„Éñ„ÅÆ„Ç¢„ÇØ„ÉÜ„Ç£„ÉñÁä∂ÊÖã„ÇíÊõ¥Êñ∞
            document.querySelectorAll('.tab').forEach(t => {
                t.classList.remove('active');
                if (t.dataset.tab === tab) {
                    t.classList.add('active');
                }
            });
            
            // „Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅÆË°®Á§∫/ÈùûË°®Á§∫
            document.querySelectorAll('.tab-content').forEach(content => {
                content.style.display = 'none';
            });
            
            document.getElementById(tab + 'View').style.display = 'block';
            
            // ÂêÑ„Çø„Éñ„ÅÆ„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø
            if (tab === 'adsets' && adsetsData.length === 0) {
                loadAdSets();
            } else if (tab === 'ads' && adsData.length === 0) {
                loadAds();
            } else if (tab === 'audience' && !audienceData) {
                loadAudienceData();
            } else if (tab === 'funnel' && !funnelData) {
                loadFunnelData();
            }
        }
        
        // „Éá„Éº„ÇøË™≠„ÅøËæº„Åø
        async function loadData() {
            const since = document.getElementById('dateFrom').value;
            const until = document.getElementById('dateTo').value;
            
            // „Ç≠„É£„É≥„Éö„Éº„É≥„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„ÅøÔºà„Ç§„É≥„Çµ„Ç§„Éà„Éá„Éº„ÇøÂê´„ÇÄÔºâ
            try {
                const response = await fetch(`/api/campaigns-insights?since=${since}&until=${until}`);
                const data = await response.json();
                
                if (data.success && data.campaigns) {
                    campaignsData = data.campaigns;
                    renderCampaignsTable(campaignsData);
                    updateSummaryCards(campaignsData);
                } else if (data.error) {
                    console.log('„Ç≠„É£„É≥„Éö„Éº„É≥„Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº:', data.error);
                    // „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫
                    const container = document.getElementById('campaignsTableContainer');
                    container.innerHTML = `<div class="no-data">„Éá„Éº„Çø„ÇíÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì: ${data.error}</div>`;
                }
            } catch (error) {
                console.error('„Ç≠„É£„É≥„Éö„Éº„É≥„Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº:', error);
                const container = document.getElementById('campaignsTableContainer');
                container.innerHTML = '<div class="no-data">„Éá„Éº„Çø„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü</div>';
            }
            
            // ÁèæÂú®„ÅÆ„Çø„Éñ„Å´Âøú„Åò„Å¶ËøΩÂä†„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø
            if (currentTab === 'adsets') {
                loadAdSets();
            } else if (currentTab === 'ads') {
                loadAds();
            } else if (currentTab === 'audience') {
                loadAudienceData();
            } else if (currentTab === 'funnel') {
                loadFunnelData();
            }
        }
        
        // Â∫ÉÂëä„Çª„ÉÉ„Éà„Éá„Éº„ÇøË™≠„ÅøËæº„Åø
        async function loadAdSets() {
            const since = document.getElementById('dateFrom').value;
            const until = document.getElementById('dateTo').value;
            
            try {
                const response = await fetch(`/api/adsets?since=${since}&until=${until}`);
                const data = await response.json();
                
                if (data.success && data.data) {
                    adsetsData = data.data;
                    if (adsetsData.length > 0) {
                        renderAdSetsTable(adsetsData);
                        updateCampaignFilter();
                    } else {
                        document.getElementById('adsetsTableContainer').innerHTML = '<div class="no-data">Meta API„ÅÆË®≠ÂÆö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ</div>';
                    }
                } else if (data.error) {
                    document.getElementById('adsetsTableContainer').innerHTML = `<div class="no-data">„Éá„Éº„Çø„ÇíÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì: ${data.error}</div>`;
                }
            } catch (error) {
                console.error('Â∫ÉÂëä„Çª„ÉÉ„Éà„Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº:', error);
                document.getElementById('adsetsTableContainer').innerHTML = '<div class="no-data">„Éá„Éº„Çø„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü</div>';
            }
        }
        
        // ÂÄãÂà•Â∫ÉÂëä„Éá„Éº„ÇøË™≠„ÅøËæº„Åø
        async function loadAds() {
            const since = document.getElementById('dateFrom').value;
            const until = document.getElementById('dateTo').value;
            
            try {
                const response = await fetch(`/api/ads?since=${since}&until=${until}`);
                const data = await response.json();
                
                if (data.success) {
                    adsData = data.data;
                    renderAdsTable(adsData);
                    updateAdSetFilter();
                }
            } catch (error) {
                console.error('ÂÄãÂà•Â∫ÉÂëä„Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº:', error);
            }
        }
        
        // „Ç™„Éº„Éá„Ç£„Ç®„É≥„Çπ„Éá„Éº„ÇøË™≠„ÅøËæº„Åø
        async function loadAudienceData() {
            const since = document.getElementById('dateFrom').value;
            const until = document.getElementById('dateTo').value;
            
            try {
                const response = await fetch(`/api/audience-insights?since=${since}&until=${until}`);
                const data = await response.json();
                
                if (data.success && data.data) {
                    audienceData = data.data;
                    // „Éá„Éº„Çø„ÅåÁ©∫„Åã„ÉÅ„Çß„ÉÉ„ÇØ
                    if (Object.keys(audienceData.byAge || {}).length > 0 ||
                        Object.keys(audienceData.byGender || {}).length > 0 ||
                        Object.keys(audienceData.byDevice || {}).length > 0) {
                        renderAudienceCharts();
                        renderAudienceTable();
                    } else {
                        document.getElementById('audienceTableContainer').innerHTML = '<div class="no-data">Meta API„ÅÆË®≠ÂÆö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ</div>';
                    }
                } else if (data.error) {
                    document.getElementById('audienceTableContainer').innerHTML = `<div class="no-data">„Éá„Éº„Çø„ÇíÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì: ${data.error}</div>`;
                }
            } catch (error) {
                console.error('„Ç™„Éº„Éá„Ç£„Ç®„É≥„Çπ„Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº:', error);
                document.getElementById('audienceTableContainer').innerHTML = '<div class="no-data">„Éá„Éº„Çø„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü</div>';
            }
        }
        
        // „Éï„Ç°„Éç„É´„Éá„Éº„ÇøË™≠„ÅøËæº„Åø
        async function loadFunnelData() {
            const since = document.getElementById('dateFrom').value;
            const until = document.getElementById('dateTo').value;
            
            try {
                const response = await fetch(`/api/funnel-analysis?since=${since}&until=${until}`);
                const data = await response.json();
                
                if (data.success) {
                    funnelData = data.data;
                    renderFunnelChart();
                    renderFunnelTable();
                }
            } catch (error) {
                console.error('„Éï„Ç°„Éç„É´„Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº:', error);
            }
        }
        
        // „Ç≠„É£„É≥„Éö„Éº„É≥„ÉÜ„Éº„Éñ„É´ÊèèÁîª
        function renderCampaignsTable(campaigns) {
            const container = document.getElementById('campaignsTableContainer');
            
            if (!campaigns || campaigns.length === 0) {
                container.innerHTML = '<div class="no-data">„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</div>';
                return;
            }
            
            let html = `
                <table>
                    <thead>
                        <tr>
                            <th>„Ç≠„É£„É≥„Éö„Éº„É≥Âêç</th>
                            <th>Ê∂àÂåñÈ°ç</th>
                            <th>„Ç§„É≥„Éó„É¨„ÉÉ„Ç∑„Éß„É≥</th>
                            <th>„ÇØ„É™„ÉÉ„ÇØ</th>
                            <th>CTR</th>
                            <th>CPM</th>
                            <th>CPC</th>
                            <th>CV</th>
                            <th>CPA</th>
                        </tr>
                    </thead>
                    <tbody>
            `;
            
            campaigns.forEach(campaign => {
                html += `
                    <tr>
                        <td>${campaign.name || 'Unknown'}</td>
                        <td class="metric-value">¬•${(campaign.spend || 0).toLocaleString()}</td>
                        <td>${(campaign.impressions || 0).toLocaleString()}</td>
                        <td>${(campaign.clicks || 0).toLocaleString()}</td>
                        <td class="metric-value">${(campaign.ctr || 0).toFixed(2)}%</td>
                        <td>¬•${Math.round(campaign.cpm || 0).toLocaleString()}</td>
                        <td>¬•${Math.round(campaign.cpc || 0).toLocaleString()}</td>
                        <td class="metric-value">${campaign.conversions || 0}</td>
                        <td class="metric-value">¬•${Math.round(campaign.cpa || 0).toLocaleString()}</td>
                    </tr>
                `;
            });
            
            html += '</tbody></table>';
            container.innerHTML = html;
        }
        
        // Â∫ÉÂëä„Çª„ÉÉ„Éà„ÉÜ„Éº„Éñ„É´ÊèèÁîª
        function renderAdSetsTable(adsets) {
            const container = document.getElementById('adsetsTableContainer');
            
            if (!adsets || adsets.length === 0) {
                container.innerHTML = '<div class="no-data">„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</div>';
                return;
            }
            
            let html = `
                <table>
                    <thead>
                        <tr>
                            <th>Â∫ÉÂëä„Çª„ÉÉ„ÉàÂêç</th>
                            <th>„Ç≠„É£„É≥„Éö„Éº„É≥</th>
                            <th>ÁõÆÁöÑ</th>
                            <th>Ê∂àÂåñÈ°ç</th>
                            <th>CTR</th>
                            <th>CPM</th>
                            <th>CV</th>
                            <th>CPA</th>
                            <th>„Éï„É™„Éº„ÇØ„Ç®„É≥„Ç∑„Éº</th>
                        </tr>
                    </thead>
                    <tbody>
            `;
            
            adsets.forEach(adset => {
                html += `
                    <tr>
                        <td>${adset.name || 'Unknown'}</td>
                        <td>${adset.campaignName || '-'}</td>
                        <td><span class="status-badge status-active">${adset.objective || 'CONVERSIONS'}</span></td>
                        <td class="metric-value">¬•${(adset.spend || 0).toLocaleString()}</td>
                        <td class="metric-value">${(adset.ctr || 0).toFixed(2)}%</td>
                        <td>¬•${Math.round(adset.cpm || 0).toLocaleString()}</td>
                        <td class="metric-value">${adset.conversions || 0}</td>
                        <td class="metric-value">¬•${Math.round(adset.cpa || 0).toLocaleString()}</td>
                        <td>${(adset.frequency || 0).toFixed(2)}</td>
                    </tr>
                `;
            });
            
            html += '</tbody></table>';
            container.innerHTML = html;
        }
        
        // ÂÄãÂà•Â∫ÉÂëä„ÉÜ„Éº„Éñ„É´ÊèèÁîª
        function renderAdsTable(ads) {
            const container = document.getElementById('adsTableContainer');
            
            if (!ads || ads.length === 0) {
                container.innerHTML = '<div class="no-data">„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</div>';
                return;
            }
            
            let html = `
                <table>
                    <thead>
                        <tr>
                            <th>Â∫ÉÂëäÂêç</th>
                            <th>Â∫ÉÂëä„Çª„ÉÉ„Éà</th>
                            <th>„Çø„Ç§„Éó</th>
                            <th>Ê∂àÂåñÈ°ç</th>
                            <th>CTR</th>
                            <th>CPM</th>
                            <th>CV</th>
                            <th>CPA</th>
                        </tr>
                    </thead>
                    <tbody>
            `;
            
            ads.forEach(ad => {
                const typeIcon = ad.creativeType === 'VIDEO' ? 'üé•' : 
                               ad.creativeType === 'CAROUSEL' ? 'üé†' : 'üñºÔ∏è';
                html += `
                    <tr>
                        <td>${ad.name || 'Unknown'}</td>
                        <td>${ad.adsetName || '-'}</td>
                        <td><span class="creative-type">${typeIcon} ${ad.creativeType}</span></td>
                        <td class="metric-value">¬•${(ad.spend || 0).toLocaleString()}</td>
                        <td class="metric-value">${(ad.ctr || 0).toFixed(2)}%</td>
                        <td>¬•${Math.round(ad.cpm || 0).toLocaleString()}</td>
                        <td class="metric-value">${ad.conversions || 0}</td>
                        <td class="metric-value">¬•${Math.round(ad.cpa || 0).toLocaleString()}</td>
                    </tr>
                `;
            });
            
            html += '</tbody></table>';
            container.innerHTML = html;
        }
        
        // „Ç™„Éº„Éá„Ç£„Ç®„É≥„Çπ„ÉÅ„É£„Éº„ÉàÊèèÁîª
        function renderAudienceCharts() {
            if (!audienceData) return;
            
            // Âπ¥ÈΩ¢Âà•„ÉÅ„É£„Éº„Éà
            const ageCtx = document.getElementById('ageChart').getContext('2d');
            new Chart(ageCtx, {
                type: 'bar',
                data: {
                    labels: Object.keys(audienceData.byAge || {}),
                    datasets: [{
                        label: 'Ê∂àÂåñÈ°ç',
                        data: Object.values(audienceData.byAge || {}).map(d => d.spend),
                        backgroundColor: '#667eea'
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { display: false }
                    }
                }
            });
            
            // ÊÄßÂà•„ÉÅ„É£„Éº„Éà
            const genderCtx = document.getElementById('genderChart').getContext('2d');
            new Chart(genderCtx, {
                type: 'doughnut',
                data: {
                    labels: Object.keys(audienceData.byGender || {}).map(g => {
                        if (g === 'male') return 'Áî∑ÊÄß';
                        if (g === 'female') return 'Â•≥ÊÄß';
                        if (g === 'unknown') return '‰∏çÊòé';
                        return g;
                    }),
                    datasets: [{
                        data: Object.values(audienceData.byGender || {}).map(d => d.spend),
                        backgroundColor: ['#667eea', '#764ba2', '#e5e7eb']
                    }]
                }
            });
            
            // „Éá„Éê„Ç§„ÇπÂà•„ÉÅ„É£„Éº„Éà
            const deviceCtx = document.getElementById('deviceChart').getContext('2d');
            new Chart(deviceCtx, {
                type: 'pie',
                data: {
                    labels: Object.keys(audienceData.byDevice || {}).map(d => {
                        if (d === 'desktop') return '„Éá„Çπ„ÇØ„Éà„ÉÉ„Éó';
                        if (d === 'mobile' || d === 'mobile_app') return '„É¢„Éê„Ç§„É´„Ç¢„Éó„É™';
                        if (d === 'mobile_web') return '„É¢„Éê„Ç§„É´Web';
                        return d;
                    }),
                    datasets: [{
                        data: Object.values(audienceData.byDevice || {}).map(d => d.spend),
                        backgroundColor: ['#667eea', '#a855f7', '#ec4899', '#f59e0b']
                    }]
                }
            });
        }
        
        // „Ç™„Éº„Éá„Ç£„Ç®„É≥„Çπ„ÉÜ„Éº„Éñ„É´ÊèèÁîª
        function renderAudienceTable() {
            const container = document.getElementById('audienceTableContainer');
            
            if (!audienceData) {
                container.innerHTML = '<div class="no-data">„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</div>';
                return;
            }
            
            let html = '<h4>Âπ¥ÈΩ¢Âà•Ë©≥Á¥∞</h4><table><thead><tr><th>Âπ¥ÈΩ¢</th><th>Ê∂àÂåñÈ°ç</th><th>„ÇØ„É™„ÉÉ„ÇØ</th><th>CV</th><th>CTR</th><th>CPA</th></tr></thead><tbody>';
            
            Object.entries(audienceData.byAge || {}).forEach(([age, data]) => {
                html += `
                    <tr>
                        <td>${age}</td>
                        <td>¬•${(data.spend || 0).toLocaleString()}</td>
                        <td>${(data.clicks || 0).toLocaleString()}</td>
                        <td>${data.conversions || 0}</td>
                        <td>${(data.ctr || 0).toFixed(2)}%</td>
                        <td>¬•${Math.round(data.cpa || 0).toLocaleString()}</td>
                    </tr>
                `;
            });
            
            html += '</tbody></table>';
            container.innerHTML = html;
        }
        
        // „Éï„Ç°„Éç„É´„ÉÅ„É£„Éº„ÉàÊèèÁîª
        function renderFunnelChart() {
            if (!funnelData || !funnelData.funnel) return;
            
            const ctx = document.getElementById('funnelChart').getContext('2d');
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: funnelData.funnel.stages.map(s => s.name),
                    datasets: [{
                        label: '„É¶„Éº„Ç∂„ÉºÊï∞',
                        data: funnelData.funnel.stages.map(s => s.count),
                        backgroundColor: '#667eea'
                    }]
                },
                options: {
                    indexAxis: 'y',
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: { display: false }
                    }
                }
            });
        }
        
        // „Éï„Ç°„Éç„É´„ÉÜ„Éº„Éñ„É´ÊèèÁîª
        function renderFunnelTable() {
            const container = document.getElementById('funnelTableContainer');
            
            if (!funnelData || !funnelData.funnel) {
                container.innerHTML = '<div class="no-data">„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</div>';
                return;
            }
            
            let html = '<h4>Èõ¢ËÑ±„Éù„Ç§„É≥„ÉàÂàÜÊûê</h4><table><thead><tr><th>„Çπ„ÉÜ„Éº„Ç∏</th><th>Èõ¢ËÑ±Áéá</th></tr></thead><tbody>';
            
            funnelData.funnel.dropoffPoints.forEach(point => {
                const isHighDropoff = point.dropoffRate > 50;
                html += `
                    <tr>
                        <td>${point.stage}</td>
                        <td class="${isHighDropoff ? 'metric-negative' : ''}">${point.dropoffRate.toFixed(1)}%</td>
                    </tr>
                `;
            });
            
            html += '</tbody></table>';
            container.innerHTML = html;
        }
        
        // „Çµ„Éû„É™„Éº„Ç´„Éº„ÉâÊõ¥Êñ∞
        function updateSummaryCards(campaigns) {
            const totalSpend = campaigns.reduce((sum, c) => sum + (c.spend || 0), 0);
            const totalConversions = campaigns.reduce((sum, c) => sum + (c.conversions || 0), 0);
            const totalClicks = campaigns.reduce((sum, c) => sum + (c.clicks || 0), 0);
            const totalImpressions = campaigns.reduce((sum, c) => sum + (c.impressions || 0), 0);
            
            const avgCPA = totalConversions > 0 ? totalSpend / totalConversions : 0;
            const avgCTR = totalImpressions > 0 ? (totalClicks / totalImpressions * 100) : 0;
            
            document.getElementById('totalSpend').textContent = '¬•' + totalSpend.toLocaleString();
            document.getElementById('totalConversions').textContent = totalConversions.toLocaleString();
            document.getElementById('avgCPA').textContent = '¬•' + Math.round(avgCPA).toLocaleString();
            document.getElementById('avgCTR').textContent = avgCTR.toFixed(2) + '%';
        }
        
        // „Éï„Ç£„É´„Çø„ÉºÈñ¢Êï∞
        function updateCampaignFilter() {
            const select = document.getElementById('campaignFilter');
            const campaigns = [...new Set(adsetsData.map(a => a.campaignName))];
            
            select.innerHTML = '<option value="">„Åô„Åπ„Å¶„ÅÆ„Ç≠„É£„É≥„Éö„Éº„É≥</option>';
            campaigns.forEach(campaign => {
                select.innerHTML += `<option value="${campaign}">${campaign}</option>`;
            });
        }
        
        function updateAdSetFilter() {
            const select = document.getElementById('adsetFilter');
            const adsets = [...new Set(adsData.map(a => a.adsetName))];
            
            select.innerHTML = '<option value="">„Åô„Åπ„Å¶„ÅÆÂ∫ÉÂëä„Çª„ÉÉ„Éà</option>';
            adsets.forEach(adset => {
                select.innerHTML += `<option value="${adset}">${adset}</option>`;
            });
        }
        
        function filterAdSets() {
            const campaignFilter = document.getElementById('campaignFilter').value;
            const filtered = campaignFilter ? 
                adsetsData.filter(a => a.campaignName === campaignFilter) : 
                adsetsData;
            renderAdSetsTable(filtered);
        }
        
        function filterAds() {
            const adsetFilter = document.getElementById('adsetFilter').value;
            const creativeFilter = document.getElementById('creativeFilter').value;
            
            let filtered = adsData;
            if (adsetFilter) {
                filtered = filtered.filter(a => a.adsetName === adsetFilter);
            }
            if (creativeFilter) {
                filtered = filtered.filter(a => a.creativeType === creativeFilter);
            }
            
            renderAdsTable(filtered);
        }
    </script>
</body>
</html>