<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>„Ç¢„É©„Éº„ÉàÂÜÖÂÆπ - MetaÂ∫ÉÂëä„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ</title>
    <link rel="stylesheet" href="/style.css">
    <style>
        /* üî• ‰øÆÊ≠£: Â∑¶‰∏ä„ÅÆ„É¨„Ç§„Ç¢„Ç¶„ÉàÂ¥©„Çå„ÇíÈò≤„Åê */
        .main-content {
            padding: 20px;
            background: #f8fafc; /* ÂÖÉ„ÅÆËñÑ„ÅÑ„Ç∞„É¨„ÉºËÉåÊôØ */
        }
        
        .page-header-section {
            margin-bottom: 20px;
        }
        
        .alert-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 20px 0;
            border-bottom: 1px solid #e5e7eb;
            margin-bottom: 20px;
        }
        
        .alert-header h1 {
            color: #1f2937; /* ÂÖÉ„ÅÆÈªíÊñáÂ≠ó */
            font-size: 28px;
            font-weight: 600;
            margin: 0;
            /* üî• ÈáçË¶Å: Â∑¶‰∏ä„ÅÆ‰ΩçÁΩÆ„ÇíÂõ∫ÂÆö */
            display: flex;
            align-items: center;
            flex-shrink: 0;
        }
        
        .alert-status {
            display: flex;
            gap: 15px;
            font-size: 14px;
            color: #6b7280;
            /* üî• ÈáçË¶Å: Âè≥ÂÅ¥„Å´ÈÅ©Âàá„Å´ÈÖçÁΩÆ */
            flex-shrink: 0;
            text-align: right;
        }
        
        .alert-section {
            margin-bottom: 30px;
        }
        
        .alert-section h2 {
            font-size: 20px;
            font-weight: 600;
            margin-bottom: 15px;
            color: #1f2937; /* ÂÖÉ„ÅÆÈªíÊñáÂ≠ó */
            /* üî• ÈáçË¶Å: „Çª„ÇØ„Ç∑„Éß„É≥„Éò„ÉÉ„ÉÄ„Éº„ÅÆ‰ΩçÁΩÆÂõ∫ÂÆö */
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .alert-card {
            background: white;
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 15px;
            border-left: 4px solid #10b981;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            border: 1px solid #e5e7eb;
        }
        
        .alert-card.critical {
            border-left-color: #ef4444;
            background: #fef2f2;
        }
        
        .alert-card.warning {
            border-left-color: #f59e0b;
            background: #fffbeb;
        }
        
        .alert-card-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 8px;
        }
        
        .alert-type {
            font-size: 16px;
            font-weight: 500;
            color: #374151;
        }
        
        .alert-time {
            font-size: 12px;
            color: #6b7280;
        }
        
        .alert-message {
            color: #374151;
            font-size: 14px;
            line-height: 1.5;
        }
        
        .no-alerts {
            text-align: center;
            color: #6b7280;
            font-size: 14px;
            padding: 40px 20px;
            background: #f9fafb;
            border-radius: 12px;
            border: 2px dashed #d1d5db;
        }
        
        .loading {
            text-align: center;
            padding: 40px;
            color: #6b7280;
        }
        
        /* „É°„Ç§„É≥„Ç¢„É©„Éº„Éà„Çª„ÇØ„Ç∑„Éß„É≥ - Á∑äÊÄ•„Ç¢„É©„Éº„ÉàÂâäÈô§Âæå„ÅÆË™øÊï¥ */
        .main-alert-section {
            background-color: white;
            border-radius: 8px;
            padding: 24px;
            margin-bottom: 30px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            min-height: 200px; /* ÊúÄÂ∞èÈ´ò„Åï„ÇíÁ¢∫‰øù */
        }

        .main-alert-section h2 {
            margin: 0 0 20px 0;
            color: #374151;
            font-size: 18px;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        /* „Ç¢„É©„Éº„ÉàË®≠ÂÆö„Çª„ÇØ„Ç∑„Éß„É≥ */
        .settings-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .settings-header h2 {
            margin: 0;
            color: #374151;
            font-size: 18px;
            font-weight: 600;
        }

        .edit-goals-button {
            background-color: #3b82f6;
            color: white;
            padding: 8px 16px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
        }

        .edit-goals-button:hover {
            background-color: #2563eb;
        }

        /* „É¢„Éº„ÉÄ„É´„Çπ„Çø„Ç§„É´ */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
        }

        .modal-content {
            background: white;
            border-radius: 8px;
            width: 90%;
            max-width: 500px;
            max-height: 80vh;
            overflow-y: auto;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px;
            border-bottom: 1px solid #e5e7eb;
        }

        .modal-header h3 {
            margin: 0;
            color: #374151;
            font-size: 18px;
            font-weight: 600;
        }

        .close-button {
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: #6b7280;
            padding: 0;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .close-button:hover {
            color: #374151;
        }

        .modal-body {
            padding: 20px;
        }

        .goal-settings-form {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .goal-input-group {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .goal-label {
            font-weight: 500;
            color: #374151;
            font-size: 14px;
        }

        .input-with-unit {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .goal-input {
            flex: 1;
            padding: 8px 12px;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            font-size: 14px;
        }

        .goal-input:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .input-unit {
            color: #6b7280;
            font-size: 14px;
            min-width: 30px;
        }

        .modal-footer {
            display: flex;
            justify-content: flex-end;
            gap: 12px;
            padding: 20px;
            border-top: 1px solid #e5e7eb;
        }

        .cancel-button, .save-button {
            padding: 8px 16px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
        }

        .cancel-button {
            background-color: #f3f4f6;
            color: #374151;
        }

        .cancel-button:hover {
            background-color: #e5e7eb;
        }

        .save-button {
            background-color: #3b82f6;
            color: white;
        }

        .save-button:hover {
            background-color: #2563eb;
        }

        /* „É≠„Éº„Éá„Ç£„É≥„Ç∞Áä∂ÊÖã */
        .loading {
            text-align: center;
            padding: 60px 20px;
            color: #6b7280;
        }

        .loading p {
            font-size: 16px;
            margin: 0;
        }

        /* „Ç¢„É©„Éº„Éà„Ç¢„Ç§„ÉÜ„É†„ÅÆ„Çπ„Çø„Ç§„É´ */
        .alert-item.attention-alert {
            border-left: 4px solid #f59e0b;
        }

        .alert-item.attention-alert .alert-icon {
            color: #f59e0b;
        }

        /* Á¢∫Ë™ç‰∫ãÈ†Ö„Å®ÊîπÂñÑÊñΩÁ≠ñ„ÅÆ„Çπ„Çø„Ç§„É´ */
        .alert-section-header {
            font-weight: 600;
            color: #374151;
            margin: 16px 0 8px 0;
            padding: 8px 0;
            border-bottom: 1px solid #e5e7eb;
            font-size: 14px;
        }

        .alert-check-items, .alert-improvements {
            margin-bottom: 16px;
        }

        .check-item {
            margin-bottom: 12px;
            padding: 12px;
            background-color: #f9fafb;
            border-radius: 6px;
            border: 1px solid #e5e7eb;
        }

        .check-item-header {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 6px;
        }

        .check-priority {
            background-color: #3b82f6;
            color: white;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 500;
        }

        .check-title {
            font-weight: 500;
            color: #374151;
            font-size: 14px;
        }

        .check-description {
            color: #6b7280;
            font-size: 13px;
            line-height: 1.4;
            white-space: pre-line;
        }

        .improvement-category {
            margin-bottom: 12px;
        }

        .improvement-category-title {
            font-weight: 500;
            color: #374151;
            margin-bottom: 6px;
            font-size: 14px;
        }

        .improvement-strategies {
            margin: 0;
            padding-left: 20px;
        }

        .improvement-strategies li {
            color: #6b7280;
            font-size: 13px;
            line-height: 1.4;
            margin-bottom: 4px;
        }

        /* „Ç¥„Éº„É´Ë®≠ÂÆö„ÅÆËøΩÂä†È†ÖÁõÆÂØæÂøú */
        .goals-list {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
            gap: 12px;
        }

        .goal-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px;
            background-color: white;
            border-radius: 6px;
            border: 1px solid #e5e7eb;
            min-height: 50px;
        }

        /* „Ç®„É©„ÉºÁä∂ÊÖã„ÅÆ„Çπ„Çø„Ç§„É´ */
        .goal-input.error {
            border-color: #ef4444;
            background-color: #fef2f2;
        }

        .error-message {
            color: #ef4444;
            font-size: 12px;
            margin-top: 4px;
            display: block;
        }

        .save-button:disabled {
            background-color: #9ca3af;
            cursor: not-allowed;
        }

        /* üî• ÈáçË¶Å: „É¨„Çπ„Éù„É≥„Ç∑„ÉñÂØæÂøú„ÅßÂ∑¶‰∏äÂ¥©„Çå„ÇíÈò≤„Åê */
        @media (max-width: 768px) {
            .alert-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 10px;
            }
            
            .alert-status {
                align-self: flex-end;
            }

            .settings-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 12px;
            }

            .edit-goals-button {
                width: 100%;
            }

            .modal-content {
                width: 95%;
                margin: 20px;
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- „Çµ„Ç§„Éâ„Éê„ÉºÔºà„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„Å®ÂÆåÂÖ®Áµ±‰∏ÄÔºâ -->
        <div class="sidebar">
            <div class="sidebar-header">
                <h3>MetaÂ∫ÉÂëä„É¨„Éù„Éº„Éà</h3>
            </div>
            <nav class="sidebar-nav">
                <a href="/dashboard" class="nav-item">„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ</a>
                <a href="/alerts" class="nav-item active">„Ç¢„É©„Éº„ÉàÂÜÖÂÆπ</a>
                <a href="/alert-history" class="nav-item">„Ç¢„É©„Éº„ÉàÂ±•Ê≠¥</a>
                <a href="/improvement-tasks" class="nav-item">Á¢∫Ë™ç‰∫ãÈ†Ö</a>
                <a href="/improvement-strategies" class="nav-item">ÊîπÂñÑÊñΩÁ≠ñ</a>
                <a href="/chatwork-test" class="nav-item">„ÉÅ„É£„ÉÉ„Éà„ÉØ„Éº„ÇØ„ÉÜ„Çπ„Éà</a>
            </nav>
        </div>

        <!-- „É°„Ç§„É≥„Ç≥„É≥„ÉÜ„É≥„ÉÑÔºàüî• Â∑¶‰∏ä„ÅÆÂ¥©„Çå„Çí‰øÆÊ≠£Ôºâ -->
        <main class="main-content">
            <!-- üî• ‰øÆÊ≠£: ÈÅ©Âàá„Å™„Éò„ÉÉ„ÉÄ„Éº„É¨„Ç§„Ç¢„Ç¶„Éà -->
            <div class="page-header-section">
                <div class="alert-header">
                    <h1>üö® „Ç¢„É©„Éº„ÉàÂÜÖÂÆπ</h1>
                    <div class="alert-status">
                        <span>„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Ç¢„É©„Éº„Éà: <span id="active-count">-</span>‰ª∂</span>
                        <span>ÊúÄÁµÇ„ÉÅ„Çß„ÉÉ„ÇØ: <span id="last-check">-</span></span>
                    </div>
                </div>
            </div>

                <!-- Ê≥®ÊÑè„Ç¢„É©„Éº„Éà - Á∑äÊÄ•„Ç¢„É©„Éº„ÉàÂâäÈô§Âæå„ÅÆÁæé„Åó„ÅÑ„É¨„Ç§„Ç¢„Ç¶„Éà -->
                <div class="alert-section main-alert-section">
                    <h2>‚ö†Ô∏è Ê≥®ÊÑè„Ç¢„É©„Éº„Éà</h2>
                    <div id="warning-alerts" class="loading">
                        <% if (alerts && alerts.length > 0) { %>
                            <% alerts.forEach(function(alert) { %>
                                <div class="alert-card <%= alert.severity === 'critical' ? 'critical' : 'warning' %>">
                                    <div class="alert-card-header">
                                        <div class="alert-type"><%= alert.severity === 'critical' ? 'üî¥' : '‚ö†Ô∏è' %> <%= alert.message %></div>
                                        <div class="alert-time"><%= new Date(alert.triggeredAt).toLocaleString('ja-JP') %></div>
                                    </div>
                                    
                                    <% if (alert.checkItems && alert.checkItems.length > 0) { %>
                                        <div class="alert-section-header">üìã Á¢∫Ë™ç‰∫ãÈ†Ö</div>
                                        <div class="alert-check-items">
                                            <% alert.checkItems.forEach(function(item) { %>
                                                <div class="check-item">
                                                    <div class="check-item-header">
                                                        <div class="check-priority">ÂÑ™ÂÖàÂ∫¶ <%= item.priority %></div>
                                                        <div class="check-title"><%= item.title %></div>
                                                    </div>
                                                    <div class="check-description"><%= item.description %></div>
                                                </div>
                                            <% }) %>
                                        </div>
                                    <% } %>
                                    
                                    <% if (alert.improvements && Object.keys(alert.improvements).length > 0) { %>
                                        <div class="alert-section-header">üîß ÊîπÂñÑÊñΩÁ≠ñ</div>
                                        <div class="alert-improvements">
                                            <% Object.entries(alert.improvements).forEach(function([category, strategies]) { %>
                                                <div class="improvement-category">
                                                    <div class="improvement-category-title"><%= category %></div>
                                                    <ul class="improvement-strategies">
                                                        <% strategies.forEach(function(strategy) { %>
                                                            <li><%= strategy %></li>
                                                        <% }) %>
                                                    </ul>
                                                </div>
                                            <% }) %>
                                        </div>
                                    <% } %>
                                </div>
                            <% }) %>
                        <% } else { %>
                            <div class="no-alerts">‚úÖ ÁèæÂú®„ÄÅ„Ç¢„É©„Éº„Éà„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì</div>
                        <% } %>
                    </div>
                </div>

                <!-- „Ç¢„É©„Éº„ÉàË®≠ÂÆö -->
                <div class="alert-section">
                    <div class="settings-header">
                        <h2>‚öôÔ∏è „Ç¢„É©„Éº„ÉàË®≠ÂÆö</h2>
                        <button 
                            class="edit-goals-button"
                            onclick="openGoalSettings()"
                        >
                            „Ç¥„Éº„É´Ë®≠ÂÆö„ÇíÁ∑®ÈõÜ
                        </button>
                    </div>
                    <div id="alert-settings">
                        <div class="alert-card">
                            <div class="alert-type">ÁèæÂú®„ÅÆ„Ç¥„Éº„É´„Çø„Ç§„Éó</div>
                            <div class="alert-message" id="current-goal">
                                <% 
                                const goalTypeNames = {
                                    'toC_newsletter': 'toCÔºà„É°„É´„Éû„Ç¨ÁôªÈå≤Ôºâ',
                                    'toC_line': 'toCÔºàLINEÁôªÈå≤Ôºâ',
                                    'toC_phone': 'toCÔºàÈõªË©±Âïè„ÅÑÂêà„Çè„ÅõÔºâ',
                                    'toC_purchase': 'toCÔºàË≥ºÂÖ•Ôºâ',
                                    'toB_newsletter': 'toBÔºà„É°„É´„Éû„Ç¨ÁôªÈå≤Ôºâ',
                                    'toB_line': 'toBÔºàLINEÁôªÈå≤Ôºâ',
                                    'toB_phone': 'toBÔºàÈõªË©±Âïè„ÅÑÂêà„Çè„ÅõÔºâ',
                                    'toB_purchase': 'toBÔºàË≥ºÂÖ•Ôºâ'
                                };
                                const goalDisplayName = userSettings && userSettings.service_goal ? goalTypeNames[userSettings.service_goal] || userSettings.service_goal : goalTypeNames[currentGoalType] || currentGoalType;
                                %>
                                <strong><%= goalDisplayName %></strong><br>
                                <small style="color: #6b7280; font-size: 12px;">
                                    <% if (userSettings) { %>
                                        CPAÁõÆÊ®ô: <%= userSettings.target_cpa || 'N/A' %>ÂÜÜ | 
                                        CTRÁõÆÊ®ô: <%= userSettings.target_ctr || 'N/A' %>% | 
                                        CPMÁõÆÊ®ô: <%= userSettings.target_cpm || 'N/A' %>ÂÜÜ
                                    <% } else { %>
                                        Ë®≠ÂÆö„Å™„Åó
                                    <% } %>
                                </small>
                            </div>
                        </div>
                        <div class="alert-card">
                            <div class="alert-type">Áõ£Ë¶ñÈ†ÖÁõÆ</div>
                            <div class="alert-message">
                                ‚Ä¢ ‰∫àÁÆóÊ∂àÂåñÁéá: 80%‰ª•‰∏ã„Åå3Êó•ÈñìÁ∂ôÁ∂ö<br>
                                ‚Ä¢ CTR: Âü∫Ê∫ñÂÄ§‰ª•‰∏ã„Åå3Êó•ÈñìÁ∂ôÁ∂ö<br>
                                ‚Ä¢ CV: 0‰ª∂Á∂ôÁ∂ö„ÅßÁô∫Áîü<br>
                                ‚Ä¢ CPA: ÁõÆÊ®ôÂÄ§120%Ë∂ÖÈÅé„Åå2Êó•ÈñìÁ∂ôÁ∂ö<br>
                                ‚Ä¢ Êó•‰∫àÁÆó: Ë®≠ÂÆöÂÄ§‰ª•‰∏ã„ÅßÁô∫Áîü<br>
                                ‚Ä¢ CPM: „Éô„Éº„Çπ„É©„Ç§„É≥„Åã„Çâ+500ÂÜÜ„Åå3Êó•ÈñìÁ∂ôÁ∂ö
                            </div>
                        </div>
                    </div>
                </div>
        </main>
    </div>

    <!-- „Ç¥„Éº„É´Ë®≠ÂÆö„É¢„Éº„ÉÄ„É´ -->
    <div id="goalSettingsModal" class="modal-overlay" style="display: none;">
        <div class="modal-content">
            <div class="modal-header">
                <h3>‚öôÔ∏è „Ç¥„Éº„É´Ë®≠ÂÆö</h3>
                <button class="close-button" onclick="closeGoalSettings()">√ó</button>
            </div>
            
            <div class="modal-body">
                <div class="goal-settings-form">
                    <div class="goal-input-group">
                        <label class="goal-label">‰∫àÁÆóÊ∂àÂåñÁéá</label>
                        <div class="input-with-unit">
                            <input type="number" id="goal-budget-rate" value="80" min="0" max="100" class="goal-input">
                            <span class="input-unit">%</span>
                        </div>
                    </div>
                    <div class="goal-input-group">
                        <label class="goal-label">CTR</label>
                        <div class="input-with-unit">
                            <input type="number" id="goal-ctr" value="2.0" min="0" step="0.1" class="goal-input">
                            <span class="input-unit">%</span>
                        </div>
                    </div>
                    <div class="goal-input-group">
                        <label class="goal-label">CV</label>
                        <div class="input-with-unit">
                            <input type="number" id="goal-cv" value="1" min="0" class="goal-input">
                            <span class="input-unit">‰ª∂</span>
                        </div>
                    </div>
                    <div class="goal-input-group">
                        <label class="goal-label">CPA</label>
                        <div class="input-with-unit">
                            <input type="number" id="goal-cpa" value="10000" min="0" class="goal-input">
                            <span class="input-unit">ÂÜÜ</span>
                        </div>
                    </div>
                    <div class="goal-input-group">
                        <label class="goal-label">Êó•‰∫àÁÆó</label>
                        <div class="input-with-unit">
                            <input type="number" id="goal-daily-budget" value="50000" min="0" class="goal-input">
                            <span class="input-unit">ÂÜÜ</span>
                        </div>
                    </div>
                    <div class="goal-input-group">
                        <label class="goal-label">CPM</label>
                        <div class="input-with-unit">
                            <input type="number" id="goal-cpm" value="1000" min="0" class="goal-input">
                            <span class="input-unit">ÂÜÜ</span>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="modal-footer">
                <button class="cancel-button" onclick="closeGoalSettings()">
                    „Ç≠„É£„É≥„Çª„É´
                </button>
                <button class="save-button" onclick="saveGoalSettings()">
                    ‰øùÂ≠ò
                </button>
            </div>
        </div>
    </div>

    <script>

        // „Ç¢„É©„Éº„Éà„Éö„Éº„Ç∏„ÅÆÂàùÊúüÂåñ
        document.addEventListener('DOMContentLoaded', async function() {
            console.log('üì± DOMË™≠„ÅøËæº„ÅøÂÆå‰∫Ü - „Çµ„Éº„Éê„Éº„Çµ„Ç§„Éâ„É¨„É≥„ÉÄ„É™„É≥„Ç∞„ÇíÁ∂≠ÊåÅ');
            
            // „Çµ„Éº„Éê„Éº„Çµ„Ç§„Éâ„Åß„É¨„É≥„ÉÄ„É™„É≥„Ç∞„Åï„Çå„ÅüÂÜÖÂÆπ„Çí„Åù„ÅÆ„Åæ„Åæ‰ΩøÁî®
            // JavaScript„Åß„ÅÆ‰∏äÊõ∏„Åç„ÅØË°å„Çè„Å™„ÅÑ
            console.log('üì± „Çµ„Éº„Éê„Éº„Çµ„Ç§„Éâ„É¨„É≥„ÉÄ„É™„É≥„Ç∞„ÅÆÂÜÖÂÆπ„ÇíÁ∂≠ÊåÅ„Åó„Åæ„Åô');
            
            // ÂÆöÊúüÊõ¥Êñ∞„ÅÆ„ÅøÊúâÂäπÂåñÔºà5ÂàÜÊØéÔºâ
            // setInterval(loadAlertData, 5 * 60 * 1000);
        });

        // „Ç¢„É©„Éº„Éà„Éö„Éº„Ç∏ÂàùÊúüÂåñ
        async function initializeAlertsPage() {
            try {
                await loadGoals();
                await loadAlertData();
            } catch (error) {
                console.error('„Ç¢„É©„Éº„Éà„Éö„Éº„Ç∏ÂàùÊúüÂåñ„Ç®„É©„Éº:', error);
            }
        }

        // „Ç¥„Éº„É´Ë®≠ÂÆöË™≠„ÅøËæº„ÅøÔºà„Çµ„Éº„Éê„Éº„Åã„ÇâÊ∏°„Åï„Çå„ÅüuserSettings„Çí‰ΩøÁî®Ôºâ
        async function loadGoals() {
            try {
                // „Çµ„Éº„Éê„Éº„Åã„ÇâÊ∏°„Åï„Çå„Åü„Ç¥„Éº„É´„Çø„Ç§„Éó„Å®„É¶„Éº„Ç∂„ÉºË®≠ÂÆö„Çí‰ΩøÁî®
                const userSettings = <% try { %><%- JSON.stringify(userSettings) %><% } catch(e) { %>null<% } %>;
                let goalType = '<%= currentGoalType || "toC_newsletter" %>';
                
                // „É¶„Éº„Ç∂„ÉºË®≠ÂÆö„Åã„Çâ„Ç¥„Éº„É´„Çø„Ç§„Éó„ÇíÂèñÂæóÔºàÂÑ™ÂÖàÔºâ
                if (userSettings && userSettings.service_goal) {
                    goalType = userSettings.service_goal;
                } else if (userSettings && userSettings.goal_type) {
                    goalType = userSettings.goal_type;
                }
                
                console.log('=== loadGoals Ë©≥Á¥∞„Éá„Éê„ÉÉ„Ç∞ÈñãÂßã ===');
                console.log('EJS„Åã„ÇâÊ∏°„Åï„Çå„ÅügoalType:', goalType);
                console.log('EJS„Åã„ÇâÊ∏°„Åï„Çå„ÅüuserSettings:', userSettings);
                console.log('goalType„ÅÆÂûã:', typeof goalType);
                console.log('goalType„ÅÆÈï∑„Åï:', goalType.length);
                
                let currentGoals = {};
                
                // „É¶„Éº„Ç∂„ÉºË®≠ÂÆö„Åã„ÇâÂÆüÈöõ„ÅÆÁõÆÊ®ôÂÄ§„ÇíÂèñÂæó
                if (userSettings && userSettings.target_cpa) {
                    currentGoals = {
                        '‰∫àÁÆóÊ∂àÂåñÁéá': 80, // Âõ∫ÂÆöÂÄ§
                        'CTR': parseFloat(userSettings.target_ctr) || 2.5,
                        'CV': 1, // Âõ∫ÂÆöÂÄ§
                        'CPA': parseInt(userSettings.target_cpa) || 1500,
                        'Êó•‰∫àÁÆó': parseInt(userSettings.target_dailyBudget) || 10000,
                        'CPM': parseInt(userSettings.target_cpm) || 800
                    };
                    console.log('‚úÖ „É¶„Éº„Ç∂„ÉºË®≠ÂÆö„Åã„ÇâÁõÆÊ®ôÂÄ§„ÇíÂèñÂæó:', currentGoals);
                } else {
                    console.log('‚ö†Ô∏è „É¶„Éº„Ç∂„ÉºË®≠ÂÆö„Åånull - „Éá„Éï„Ç©„É´„ÉàÂÄ§„Çí‰ΩøÁî®');
                    // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: goalType„Å´Âü∫„Å•„Åè„Éá„Éï„Ç©„É´„ÉàÂÄ§
                    const goalTargets = {
                        toC_newsletter: {
                            '‰∫àÁÆóÊ∂àÂåñÁéá': 80,
                            'CTR': 2.5,
                            'CV': 1,
                            'CPA': 2000,
                            'Êó•‰∫àÁÆó': 1000,
                            'CPM': 1000
                        },
                        toC_line: {
                            '‰∫àÁÆóÊ∂àÂåñÁéá': 80,
                            'CTR': 2.5,
                            'CV': 1,
                            'CPA': 1000,
                            'Êó•‰∫àÁÆó': 1000,
                            'CPM': 800
                        },
                        toC_phone: {
                            '‰∫àÁÆóÊ∂àÂåñÁéá': 80,
                            'CTR': 2.0,
                            'CV': 1,
                            'CPA': 3000,
                            'Êó•‰∫àÁÆó': 1500,
                            'CPM': 1200
                        },
                        toC_purchase: {
                            '‰∫àÁÆóÊ∂àÂåñÁéá': 80,
                            'CTR': 1.8,
                            'CV': 1,
                            'CPA': 5000,
                            'Êó•‰∫àÁÆó': 2000,
                            'CPM': 1500
                        },
                        toB_newsletter: {
                            '‰∫àÁÆóÊ∂àÂåñÁéá': 80,
                            'CTR': 1.5,
                            'CV': 1,
                            'CPA': 15000,
                            'Êó•‰∫àÁÆó': 3000,
                            'CPM': 2000
                        },
                        toB_line: {
                            '‰∫àÁÆóÊ∂àÂåñÁéá': 80,
                            'CTR': 1.5,
                            'CV': 1,
                            'CPA': 12000,
                            'Êó•‰∫àÁÆó': 2500,
                            'CPM': 1800
                        },
                        toB_phone: {
                            '‰∫àÁÆóÊ∂àÂåñÁéá': 80,
                            'CTR': 1.2,
                            'CV': 1,
                            'CPA': 20000,
                            'Êó•‰∫àÁÆó': 4000,
                            'CPM': 2500
                        },
                        toB_purchase: {
                            '‰∫àÁÆóÊ∂àÂåñÁéá': 80,
                            'CTR': 1.0,
                            'CV': 1,
                            'CPA': 30000,
                            'Êó•‰∫àÁÆó': 5000,
                            'CPM': 3000
                        }
                    };
                
                    if (goalTargets[goalType]) {
                        currentGoals = goalTargets[goalType];
                    }
                    
                    // localStorage „ÅÆË®≠ÂÆö„Åß‰∏äÊõ∏„ÅçÔºà„É¶„Éº„Ç∂„Éº„Åå„Ç´„Çπ„Çø„Éû„Ç§„Ç∫„Åó„ÅüÂ†¥ÂêàÔºâ
                    const storedGoals = localStorage.getItem('alert_goals');
                    if (storedGoals) {
                        const customGoals = JSON.parse(storedGoals);
                        currentGoals = { ...currentGoals, ...customGoals };
                    }
                    
                    // „Éá„Éï„Ç©„É´„ÉàÂÄ§Ôºà„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºâ
                    const defaultGoals = {
                        '‰∫àÁÆóÊ∂àÂåñÁéá': 80,
                        'CTR': 2.0,
                        'CV': 1,
                        'CPA': 10000,
                        'Êó•‰∫àÁÆó': 50000,
                        'CPM': 1000
                    };
                    
                    if (Object.keys(currentGoals).length === 0) {
                        currentGoals = defaultGoals;
                    }
                    console.log('‚ö†Ô∏è „É¶„Éº„Ç∂„ÉºË®≠ÂÆö„Å™„Åó - „Éá„Éï„Ç©„É´„ÉàÂÄ§„Çí‰ΩøÁî®:', currentGoals);
                }
                
                // ÁèæÂú®„ÅÆ„Ç¥„Éº„É´„Çø„Ç§„Éó„ÇÇË°®Á§∫„Å´ÂèçÊò†
                updateCurrentGoalDisplay(currentGoals, goalType);
                return currentGoals;
            } catch (error) {
                console.error('„Ç¥„Éº„É´Ë™≠„ÅøËæº„Åø„Ç®„É©„Éº:', error);
                const defaultGoals = {
                    '‰∫àÁÆóÊ∂àÂåñÁéá': 80,
                    'CTR': 2.0,
                    'CV': 1,
                    'CPA': 10000,
                    'Êó•‰∫àÁÆó': 50000,
                    'CPM': 1000
                };
                updateCurrentGoalDisplay(defaultGoals, goalType);
                return defaultGoals;
            }
        }

        // „Ç¢„É©„Éº„Éà„Éá„Éº„ÇøË™≠„ÅøËæº„Åø
        async function loadAlertData() {
            try {
                console.log('„Ç¢„É©„Éº„Éà„Éá„Éº„ÇøË™≠„ÅøËæº„ÅøÈñãÂßã');
                
                // „Çµ„Éº„Éê„Éº„Åã„ÇâÁµ±‰∏Ä„Åï„Çå„Åü„Ç¢„É©„Éº„Éà„ÇíÂèñÂæóÔºàalertSystem.js‰ΩøÁî®Ôºâ
                console.log('=== „Ç¢„É©„Éº„Éà„Éá„Éº„ÇøÂèó„ÅëÂèñ„ÇäË©≥Á¥∞„Éá„Éê„ÉÉ„Ç∞ ===');
                const serverAlerts = <%- JSON.stringify(alerts || []) %>;
                console.log('„Çµ„Éº„Éê„Éº„Åã„ÇâÂèó„ÅëÂèñ„Å£„Åüalerts„ÅÆÂûã:', typeof serverAlerts);
                console.log('„Çµ„Éº„Éê„Éº„Åã„ÇâÂèó„ÅëÂèñ„Å£„Åüalerts„ÅÆÂÄ§:', serverAlerts);
                console.log('„Çµ„Éº„Éê„Éº„Ç¢„É©„Éº„ÉàÊï∞:', serverAlerts ? serverAlerts.length : 'undefined');
                console.log('„Çµ„Éº„Éê„Éº„Ç¢„É©„Éº„ÉàË©≥Á¥∞:', serverAlerts);
                
                if (serverAlerts !== null && serverAlerts !== undefined) {
                    if (serverAlerts.length > 0) {
                        console.log('‚úÖ alertSystem.js„Åã„ÇâÁîüÊàê„Åï„Çå„Åü„Ç¢„É©„Éº„Éà„Çí‰ΩøÁî®');
                        // alertSystem.js„ÅÆ„Ç¢„É©„Éº„ÉàÂΩ¢Âºè„ÇíÊ®ôÊ∫ñÂΩ¢Âºè„Å´Â§âÊèõ
                        const standardizedAlerts = serverAlerts.map(alert => ({
                            id: alert.id,
                            metric: alert.metric,
                            message: alert.message,
                            level: alert.severity === 'critical' ? 'high' : 'medium',
                            timestamp: alert.triggeredAt || new Date().toISOString(),
                            checkItems: alert.checkItems || [],
                            improvements: alert.improvements || {}
                        }));
                        
                        updateAlertDisplay(standardizedAlerts);
                        updateStatus(standardizedAlerts, new Date());
                        return;
                    } else {
                        console.log('‚úÖ „Çµ„Éº„Éê„Éº„Åã„ÇâÁ©∫„ÅÆ„Ç¢„É©„Éº„Éà - „Ç¢„É©„Éº„Éà„Å™„ÅóÁä∂ÊÖãË°®Á§∫');
                        // alertSystem.js„ÅÆÂé≥ÂØÜ„Å™Âà§ÂÆö„Å´Âæì„ÅÑ„ÄÅ„Ç¢„É©„Éº„Éà„Å™„ÅóÁä∂ÊÖã„ÇíË°®Á§∫
                        updateAlertDisplay([]);
                        updateStatus([], new Date());
                        return;
                    }
                } else {
                    console.log('‚ö†Ô∏è „Çµ„Éº„Éê„Éº„Ç¢„É©„Éº„Éà„ÅåÊú™ÂÆöÁæ© - „Ç¢„É©„Éº„Éà„Å™„ÅóÁä∂ÊÖãË°®Á§∫');
                    // alertSystem.js„ÅÆÂé≥ÂØÜ„Å™Âà§ÂÆö„Å´Âæì„ÅÑ„ÄÅ„Ç¢„É©„Éº„Éà„Å™„ÅóÁä∂ÊÖã„ÇíË°®Á§∫
                    updateAlertDisplay([]);
                    updateStatus([], new Date());
                    return;
                }
                
                // „Ç¢„É©„Éº„ÉàÂ±•Ê≠¥„Å´ËøΩÂä†
                currentAlerts.forEach(alert => {
                    addToAlertHistory(alert);
                });
                
            } catch (error) {
                console.error('„Ç¢„É©„Éº„Éà„Éá„Éº„ÇøË™≠„ÅøËæº„Åø„Ç®„É©„Éº:', error);
                showError('„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ' + error.message);
            }
        }

        // „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„Éá„Éº„Çø„ÇíÂèñÂæó
        async function getDashboardData() {
            try {
                const response = await fetch('/api/dashboard-data');
                const data = await response.json();
                
                if (data.success && data.data) {
                    return {
                        budgetConsumption: data.data.budgetRate, // ÂÆüÈöõ„ÅÆ‰∫àÁÆóÊ∂àÂåñÁéá
                        ctr: data.data.ctr, // ÂÆüÈöõ„ÅÆCTR
                        cv: data.data.conversions, // ÂÆüÈöõ„ÅÆCVÊï∞
                        cpa: data.data.cpa, // ÂÆüÈöõ„ÅÆCPA
                        dailyBudget: data.data.dailyBudget || 45000, // ÂÆüÈöõ„ÅÆÊó•‰∫àÁÆó
                        cpm: data.data.cpm // ÂÆüÈöõ„ÅÆCPM
                    };
                } else {
                    // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂÄ§
                    return {
                        budgetConsumption: 65,
                        ctr: 1.5,
                        cv: 0,
                        cpa: 12000,
                        dailyBudget: 45000,
                        cpm: 1200
                    };
                }
            } catch (error) {
                console.error('„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº:', error);
                return {
                    budgetConsumption: 65,
                    ctr: 1.5,
                    cv: 0,
                    cpa: 12000,
                    dailyBudget: 45000,
                    cpm: 1200
                };
            }
        }

        // „Ç¢„É©„Éº„Éà„ÉÅ„Çß„ÉÉ„ÇØ
        function checkForAlerts(data, goals) {
            const alerts = [];
            const currentTime = new Date().toISOString();
            
            try {
                // ‰∫àÁÆóÊ∂àÂåñÁéá„ÉÅ„Çß„ÉÉ„ÇØ
                if (data.budgetConsumption && goals['‰∫àÁÆóÊ∂àÂåñÁéá'] && 
                    data.budgetConsumption < goals['‰∫àÁÆóÊ∂àÂåñÁéá']) {
                    // „Éè„Ç§„Éñ„É™„ÉÉ„ÉâÊñπÂºè: APIÂèñÂæóÊó•‰∫àÁÆó„Åå„ÅÇ„Çå„Å∞„Åù„Çå„ÇíÂÑ™ÂÖà„ÄÅ„Å™„Åë„Çå„Å∞„É¶„Éº„Ç∂„ÉºË®≠ÂÆö„Çí‰ΩøÁî®
                    let budgetInfo = '';
                    if (data.actualDailyBudget && data.actualDailyBudget > 0) {
                        budgetInfo = `APIÂèñÂæóÊó•‰∫àÁÆó: ${data.actualDailyBudget.toLocaleString()}ÂÜÜ`;
                    } else if (goals['Êó•‰∫àÁÆó'] && goals['Êó•‰∫àÁÆó'] > 0) {
                        budgetInfo = `„É¶„Éº„Ç∂„ÉºË®≠ÂÆöÊó•‰∫àÁÆó: ${goals['Êó•‰∫àÁÆó'].toLocaleString()}ÂÜÜ`;
                    }
                    
                    let message = `‰∫àÁÆóÊ∂àÂåñÁéá„Åå${goals['‰∫àÁÆóÊ∂àÂåñÁéá']}%‰ª•‰∏ã„ÅÆ${data.budgetConsumption}%„Åå3Êó•ÈñìÁ∂ö„ÅÑ„Å¶„ÅÑ„Åæ„Åô`;
                    if (budgetInfo) {
                        message += `Ôºà${budgetInfo}Ôºâ`;
                    }
                    
                    alerts.push({
                        id: `budget-${Date.now()}`,
                        metric: '‰∫àÁÆóÊ∂àÂåñÁéá',
                        message: message,
                        level: 'medium',
                        timestamp: currentTime,
                    });
                }

                // CTR„ÉÅ„Çß„ÉÉ„ÇØ
                if (data.ctr && goals['CTR'] && data.ctr < goals['CTR']) {
                    alerts.push({
                        id: `ctr-${Date.now()}`,
                        metric: 'CTR',
                        message: `CTR„Åå${goals['CTR']}%‰ª•‰∏ã„ÅÆ${data.ctr}%„Åå3Êó•ÈñìÁ∂ö„ÅÑ„Å¶„ÅÑ„Åæ„Åô`,
                        level: 'medium',
                        timestamp: currentTime,
                    });
                }

                // CV„ÉÅ„Çß„ÉÉ„ÇØ
                if (data.cv !== undefined && goals['CV'] && data.cv < goals['CV']) {
                    alerts.push({
                        id: `cv-${Date.now()}`,
                        metric: 'CV',
                        message: `CVÊï∞„Åå${goals['CV']}‰ª∂‰ª•‰∏ã„ÅÆ${data.cv}‰ª∂„ÅåÁ∂ö„ÅÑ„Å¶„ÅÑ„Åæ„Åô`,
                        level: 'high',
                        timestamp: currentTime,
                    });
                }

                // CPA„ÉÅ„Çß„ÉÉ„ÇØÔºà120%Âü∫Ê∫ñÔºâ
                if (data.cpa && goals['CPA']) {
                    const thresholdCPA = goals['CPA'] * 1.2; // 120%Âü∫Ê∫ñ
                    if (data.cpa > thresholdCPA) {
                        alerts.push({
                            id: `cpa-${Date.now()}`,
                            metric: 'CPA',
                            message: `CPA„ÅåÁõÆÊ®ô„ÅÆ120%Ôºà${Math.round(thresholdCPA).toLocaleString()}ÂÜÜÔºâ„ÇíË∂Ö„Åà„Åü${Math.round(data.cpa).toLocaleString()}ÂÜÜ„Åå2Êó•ÈñìÁ∂ö„ÅÑ„Å¶„ÅÑ„Åæ„Åô`,
                            level: 'high',
                            timestamp: currentTime,
                        });
                    }
                }

                // Êó•‰∫àÁÆó„ÉÅ„Çß„ÉÉ„ÇØ
                if (data.dailyBudget && goals['Êó•‰∫àÁÆó'] && data.dailyBudget < goals['Êó•‰∫àÁÆó']) {
                    alerts.push({
                        id: `daily-budget-${Date.now()}`,
                        metric: 'Êó•‰∫àÁÆó',
                        message: `Êó•‰∫àÁÆó„Åå${goals['Êó•‰∫àÁÆó'].toLocaleString()}ÂÜÜ‰ª•‰∏ã„ÅÆ${data.dailyBudget.toLocaleString()}ÂÜÜ„Å´„Å™„Å£„Å¶„ÅÑ„Åæ„Åô`,
                        level: 'medium',
                        timestamp: currentTime
                    });
                }

                // CPM„ÉÅ„Çß„ÉÉ„ÇØ
                if (data.cpm && goals['CPM'] && data.cpm > goals['CPM']) {
                    alerts.push({
                        id: `cpm-${Date.now()}`,
                        metric: 'CPM',
                        message: `CPM„Åå${goals['CPM'].toLocaleString()}ÂÜÜ‰ª•‰∏ä„ÅÆ${data.cpm.toLocaleString()}ÂÜÜ„Å´„Å™„Å£„Å¶„ÅÑ„Åæ„Åô`,
                        level: 'medium',
                        timestamp: currentTime
                    });
                }

            } catch (error) {
                console.error('„Ç¢„É©„Éº„Éà„ÉÅ„Çß„ÉÉ„ÇØ„Ç®„É©„Éº:', error);
            }

            return alerts;
        }

        // „Ç¢„É©„Éº„ÉàÂ±•Ê≠¥„Å´ËøΩÂä†
        function addToAlertHistory(alert) {
            try {
                const history = JSON.parse(localStorage.getItem('alert_history') || '[]');
                
                // ÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØÔºàÂêå„Åò„É°„Éà„É™„ÉÉ„ÇØ„ÅÆÁõ¥Ëøë„ÅÆ„Ç¢„É©„Éº„Éà„Å®ÊØîËºÉÔºâ
                const isDuplicate = history.some(item => 
                    item.metric === alert.metric && 
                    Math.abs(new Date(item.timestamp) - new Date(alert.timestamp)) < 3600000 // 1ÊôÇÈñì‰ª•ÂÜÖ
                );
                
                if (!isDuplicate) {
                    history.unshift(alert);
                    
                    // ÈÅéÂéª30Êó•ÂàÜ„ÅÆ„Åø‰øùÊåÅ
                    const thirtyDaysAgo = new Date();
                    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
                    
                    const filteredHistory = history.filter(item => 
                        new Date(item.timestamp) > thirtyDaysAgo
                    );
                    
                    localStorage.setItem('alert_history', JSON.stringify(filteredHistory));
                }
            } catch (error) {
                console.error('„Ç¢„É©„Éº„ÉàÂ±•Ê≠¥ËøΩÂä†„Ç®„É©„Éº:', error);
            }
        }

        // „Ç¢„É©„Éº„ÉàË°®Á§∫Êõ¥Êñ∞
        function updateAlertDisplay(alerts) {
            const warningContainer = document.getElementById('warning-alerts');
            
            if (!warningContainer) {
                console.error('Ë≠¶Âëä„Ç¢„É©„Éº„Éà„Ç≥„É≥„ÉÜ„Éä„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
                return;
            }
            
            if (alerts.length > 0) {
                warningContainer.innerHTML = alerts.map(alert => {
                    const alertType = alert.level === 'high' ? 'critical' : 'warning';
                    return createAlertCard(alert, alertType);
                }).join('');
            } else {
                warningContainer.innerHTML = '<div class="no-alerts">Ê≥®ÊÑè„Ç¢„É©„Éº„Éà„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì ‚úÖ</div>';
            }
        }

        // „Ç¢„É©„Éº„Éà„Ç´„Éº„Éâ‰ΩúÊàê
        function createAlertCard(alert, type) {
            const icon = type === 'critical' ? 'üî¥' : '‚ö†Ô∏è';
            
            // Á¢∫Ë™ç‰∫ãÈ†Ö„Çª„ÇØ„Ç∑„Éß„É≥
            let checkItemsHtml = '';
            if (alert.checkItems && alert.checkItems.length > 0) {
                checkItemsHtml = `
                    <div class="alert-section-header">üìã Á¢∫Ë™ç‰∫ãÈ†Ö</div>
                    <div class="alert-check-items">
                        ${alert.checkItems.map((item, index) => `
                            <div class="check-item">
                                <div class="check-item-header">
                                    <span class="check-priority">ÂÑ™ÂÖàÂ∫¶ ${item.priority}</span>
                                    <span class="check-title">${item.title}</span>
                                </div>
                                <div class="check-description">${item.description}</div>
                            </div>
                        `).join('')}
                    </div>
                `;
            }
            
            // ÊîπÂñÑÊñΩÁ≠ñ„Çª„ÇØ„Ç∑„Éß„É≥
            let improvementsHtml = '';
            if (alert.improvements && Object.keys(alert.improvements).length > 0) {
                improvementsHtml = `
                    <div class="alert-section-header">üí° ÊîπÂñÑÊñΩÁ≠ñ</div>
                    <div class="alert-improvements">
                        ${Object.entries(alert.improvements).map(([category, strategies]) => `
                            <div class="improvement-category">
                                <div class="improvement-category-title">${category}</div>
                                <ul class="improvement-strategies">
                                    ${strategies.map(strategy => `<li>${strategy}</li>`).join('')}
                                </ul>
                            </div>
                        `).join('')}
                    </div>
                `;
            }
            
            return `
                <div class="alert-card ${type}">
                    <div class="alert-card-header">
                        <span class="alert-type">${icon} ${alert.metric || '„Ç¢„É©„Éº„Éà'}</span>
                        <span class="alert-time">${formatTime(alert.timestamp || alert.triggeredAt)}</span>
                    </div>
                    <div class="alert-message">${alert.message || '„Ç¢„É©„Éº„Éà„É°„ÉÉ„Çª„Éº„Ç∏'}</div>
                    ${checkItemsHtml}
                    ${improvementsHtml}
                </div>
            `;
        }

        // „Çπ„ÉÜ„Éº„Çø„ÇπÊõ¥Êñ∞
        function updateStatus(alerts, lastCheck) {
            const activeCountElement = document.getElementById('active-count');
            const lastCheckElement = document.getElementById('last-check');
            
            if (activeCountElement) {
                activeCountElement.textContent = alerts.length;
            }
            
            if (lastCheckElement) {
                lastCheckElement.textContent = formatTime(lastCheck);
            }
        }

        // ÊôÇÂàª„Éï„Ç©„Éº„Éû„ÉÉ„Éà
        function formatTime(dateString) {
            if (!dateString) return '-';
            
            try {
                const date = new Date(dateString);
                return date.toLocaleString('ja-JP', {
                    month: 'short',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });
            } catch (error) {
                return '-';
            }
        }

        // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Ç¢„É©„Éº„ÉàÁîüÊàêÔºàÂÆüÈöõ„ÅÆ„Éá„Éº„Çø„Å´Âü∫„Å•„ÅèÊ≥®ÊÑè„Ç¢„É©„Éº„ÉàÔºâ
        async function generateFallbackAlerts() {
            try {
                console.log('„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Ç¢„É©„Éº„ÉàÁîüÊàêÈñãÂßã');
                const dashboardData = await getDashboardData();
                
                if (!dashboardData) {
                    console.log('„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„Éá„Éº„Çø„Å™„Åó - „Ç¢„É©„Éº„Éà„Å™„ÅóÁä∂ÊÖã');
                    updateAlertDisplay([]);
                    updateStatus([], new Date());
                    return;
                }
                
                const fallbackAlerts = [];
                
                // ÂÆüÈöõ„ÅÆ„Éá„Éº„Çø„Å´Âü∫„Å•„ÅÑ„Å¶Ê≥®ÊÑè„Ç¢„É©„Éº„Éà„ÇíÁîüÊàê
                if (dashboardData.budgetConsumption < 80) {
                    fallbackAlerts.push({
                        id: 'budget_rate_warning',
                        metric: '‰∫àÁÆóÊ∂àÂåñÁéá',
                        message: `‰∫àÁÆóÊ∂àÂåñÁéá„Åå80%‰ª•‰∏ã„ÅÆ${Math.round(dashboardData.budgetConsumption)}%„Åß„Åô`,
                        level: 'medium',
                        timestamp: new Date().toISOString()
                    });
                }
                
                if (dashboardData.ctr < 2.0) {
                    fallbackAlerts.push({
                        id: 'ctr_warning',
                        metric: 'CTR',
                        message: `CTR„Åå2.0%‰ª•‰∏ã„ÅÆ${dashboardData.ctr.toFixed(1)}%„Åß„Åô`,
                        level: 'medium',
                        timestamp: new Date().toISOString()
                    });
                }
                
                if (dashboardData.cv === 0) {
                    fallbackAlerts.push({
                        id: 'cv_warning',
                        metric: 'CV',
                        message: `CVÊï∞„Åå0‰ª∂„Åß„Åô`,
                        level: 'high',
                        timestamp: new Date().toISOString()
                    });
                }
                
                if (dashboardData.cpa > 12000) {
                    fallbackAlerts.push({
                        id: 'cpa_warning',
                        metric: 'CPA',
                        message: `CPA„ÅåÁõÆÊ®ô„ÅÆ12,000ÂÜÜ„ÇíË∂Ö„Åà„Å¶${Math.round(dashboardData.cpa).toLocaleString()}ÂÜÜ„Åß„Åô`,
                        level: 'high',
                        timestamp: new Date().toISOString()
                    });
                }
                
                console.log('ÁîüÊàê„Åï„Çå„ÅüÊ≥®ÊÑè„Ç¢„É©„Éº„ÉàÊï∞:', fallbackAlerts.length);
                updateAlertDisplay(fallbackAlerts);
                updateStatus(fallbackAlerts, new Date());
                
            } catch (error) {
                console.error('„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Ç¢„É©„Éº„ÉàÁîüÊàê„Ç®„É©„Éº:', error);
                updateAlertDisplay([]);
                updateStatus([], new Date());
            }
        }

        // „Ç®„É©„ÉºË°®Á§∫
        function showError(message) {
            document.getElementById('warning-alerts').innerHTML = `<div class="no-alerts">‚ùå ${message}</div>`;
        }

        // „Ç¥„Éº„É´Ë®≠ÂÆö„É¢„Éº„ÉÄ„É´Ê©üËÉΩ
        function openGoalSettings() {
            loadCurrentGoals();
            document.getElementById('goalSettingsModal').style.display = 'flex';
        }

        function closeGoalSettings() {
            document.getElementById('goalSettingsModal').style.display = 'none';
        }

        function loadCurrentGoals() {
            try {
                const stored = localStorage.getItem('alert_goals');
                const defaultGoals = {
                    '‰∫àÁÆóÊ∂àÂåñÁéá': 80,
                    'CTR': 2.0,
                    'CV': 1,
                    'CPA': 10000,
                    'Êó•‰∫àÁÆó': 50000,
                    'CPM': 1000
                };
                
                const goals = stored ? JSON.parse(stored) : defaultGoals;
                
                document.getElementById('goal-budget-rate').value = goals['‰∫àÁÆóÊ∂àÂåñÁéá'] || 80;
                document.getElementById('goal-ctr').value = goals['CTR'] || 2.0;
                document.getElementById('goal-cv').value = goals['CV'] || 1;
                document.getElementById('goal-cpa').value = goals['CPA'] || 10000;
                document.getElementById('goal-daily-budget').value = goals['Êó•‰∫àÁÆó'] || 50000;
                document.getElementById('goal-cpm').value = goals['CPM'] || 1000;
            } catch (error) {
                console.error('„Ç¥„Éº„É´Ë™≠„ÅøËæº„Åø„Ç®„É©„Éº:', error);
            }
        }

        function saveGoalSettings() {
            try {
                const goals = {
                    '‰∫àÁÆóÊ∂àÂåñÁéá': parseFloat(document.getElementById('goal-budget-rate').value) || 80,
                    'CTR': parseFloat(document.getElementById('goal-ctr').value) || 2.0,
                    'CV': parseInt(document.getElementById('goal-cv').value) || 1,
                    'CPA': parseInt(document.getElementById('goal-cpa').value) || 10000,
                    'Êó•‰∫àÁÆó': parseInt(document.getElementById('goal-daily-budget').value) || 50000,
                    'CPM': parseInt(document.getElementById('goal-cpm').value) || 1000
                };
                
                localStorage.setItem('alert_goals', JSON.stringify(goals));
                closeGoalSettings();
                
                // ÁèæÂú®„ÅÆ„Ç¥„Éº„É´Ë°®Á§∫„ÇíÊõ¥Êñ∞
                const goalType = '<%= currentGoalType || "toC_newsletter" %>';
                updateCurrentGoalDisplay(goals, goalType);
                
                // „Ç¢„É©„Éº„Éà„ÇíÂÜç„ÉÅ„Çß„ÉÉ„ÇØ
                loadAlertData();
                
                alert('„Ç¥„Éº„É´Ë®≠ÂÆö„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü');
            } catch (error) {
                console.error('„Ç¥„Éº„É´‰øùÂ≠ò„Ç®„É©„Éº:', error);
                alert('‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
        }

        function updateCurrentGoalDisplay(goals, goalType = '') {
            console.log('üéØ === updateCurrentGoalDisplay ÂÆüË°åÈñãÂßã ===');
            console.log('üéØ Âèó„ÅëÂèñ„Å£„Åügoals:', goals);
            console.log('üéØ Âèó„ÅëÂèñ„Å£„ÅügoalType:', goalType);
            console.log('üéØ goalType„ÅÆÂûã:', typeof goalType);
            
            // „Ç¥„Éº„É´„Çø„Ç§„Éó„ÅÆË°®Á§∫Âêç„ÇíÂèñÂæó
            const goalTypeNames = {
                'toC_newsletter': 'toCÔºà„É°„É´„Éû„Ç¨ÁôªÈå≤Ôºâ',
                'toC_line': 'toCÔºàLINEÁôªÈå≤Ôºâ',
                'toC_phone': 'toCÔºàÈõªË©±„Éú„Çø„É≥Ôºâ',
                'toC_purchase': 'toCÔºàË≥ºÂÖ•Ôºâ',
                'toB_newsletter': 'toBÔºà„É°„É´„Éû„Ç¨ÁôªÈå≤Ôºâ',
                'toB_line': 'toBÔºàLINEÁôªÈå≤Ôºâ',
                'toB_phone': 'toBÔºàÈõªË©±„Éú„Çø„É≥Ôºâ',
                'toB_purchase': 'toBÔºàË≥ºÂÖ•Ôºâ'
            };
            
            const goalTypeName = goalTypeNames[goalType] || goalType || 'Êú™Ë®≠ÂÆö';
            console.log('goalTypeNames[goalType]:', goalTypeNames[goalType]);
            console.log('ÊúÄÁµÇÁöÑ„Å™goalTypeName:', goalTypeName);
            
            const goalText = Object.entries(goals)
                .map(([metric, value]) => {
                    const unit = metric.includes('Áéá') || metric === 'CTR' ? '%' : 
                               metric === 'CPA' || metric === 'Êó•‰∫àÁÆó' || metric === 'CPM' ? 'ÂÜÜ' : '‰ª∂';
                    return `${metric}: ${value}${unit}`;
                })
                .join(', ');
            
            const currentGoalElement = document.getElementById('current-goal');
            if (currentGoalElement) {
                currentGoalElement.innerHTML = `
                    <strong>„Ç¥„Éº„É´„Çø„Ç§„Éó:</strong> ${goalTypeName}<br>
                    <strong>ÁõÆÊ®ôÂÄ§:</strong> ${goalText}
                `;
            }
        }

        // ÂàùÊúüÂåñÊôÇ„Å´„Ç¥„Éº„É´Ë®≠ÂÆö„ÇíË™≠„ÅøËæº„ÅøÔºàÈáçË§áÂâäÈô§Ôºö‰∏äË®ò„ÅßÊó¢„Å´ÂàùÊúüÂåñ„Åï„Çå„Å¶„ÅÑ„Çã„Åü„ÇÅ‰∏çË¶ÅÔºâ
    </script>
</body>
</html> 