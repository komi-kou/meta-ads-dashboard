<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>„Ç™„Éº„Éá„Ç£„Ç®„É≥„ÇπÂàÜÊûê - MetaÂ∫ÉÂëä„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ</title>
    <link rel="stylesheet" href="/style.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f5f6fa;
        }
        
        .app-container {
            display: flex;
            height: 100vh;
        }
        
        .sidebar {
            width: 250px;
            background: #2c3e50;
            color: white;
            height: 100vh;
            overflow-y: auto;
        }
        
        .sidebar-header {
            padding: 20px;
            background: rgba(0,0,0,0.1);
            border-bottom: 1px solid rgba(255,255,255,0.1);
        }
        
        .sidebar-header h3 {
            margin: 0;
            font-size: 18px;
            font-weight: 500;
        }
        
        .sidebar-nav {
            padding: 10px 0;
        }
        
        .nav-item {
            display: block;
            padding: 12px 20px;
            color: rgba(255,255,255,0.8);
            text-decoration: none;
            transition: all 0.3s;
            position: relative;
        }
        
        .nav-item:hover {
            background: rgba(255,255,255,0.1);
            color: white;
        }
        
        .nav-item.active {
            background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        
        .nav-item.active::before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            width: 3px;
            background: #fff;
        }
        
        .main-content {
            flex: 1;
            padding: 30px;
            overflow-y: auto;
        }
        
        .content-header {
            margin-bottom: 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .content-title {
            font-size: 28px;
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 10px;
        }
        
        .date-selector {
            display: flex;
            gap: 10px;
            align-items: center;
        }
        
        .date-selector input {
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        
        .date-selector button {
            padding: 8px 16px;
            background: #667eea;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        
        .date-selector button:hover {
            background: #5a6dc8;
        }
        
        .analysis-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 30px;
            margin-bottom: 30px;
        }
        
        .chart-card {
            background: white;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        }
        
        .chart-title {
            font-size: 16px;
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 20px;
        }
        
        .detail-table {
            background: white;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        }
        
        .table-title {
            font-size: 18px;
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 20px;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
        }
        
        th {
            text-align: left;
            padding: 12px;
            background: #f8f9fa;
            font-weight: 600;
            color: #666;
            font-size: 13px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        td {
            padding: 12px;
            border-bottom: 1px solid #f0f0f0;
            color: #333;
        }
        
        tr:hover {
            background: #f8f9fa;
        }
        
        .metric-value {
            font-weight: 600;
        }
        
        .metric-positive {
            color: #27ae60;
        }
        
        .metric-negative {
            color: #e74c3c;
        }
        
        .loading {
            text-align: center;
            padding: 40px;
            color: #999;
        }
        
        .sidebar-footer {
            position: absolute;
            bottom: 20px;
            left: 0;
            right: 0;
            padding: 0 20px;
        }
        
        .insights-section {
            background: white;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            margin-bottom: 30px;
        }
        
        .insight-item {
            padding: 15px;
            margin-bottom: 10px;
            border-left: 4px solid #667eea;
            background: rgba(102, 126, 234, 0.05);
            border-radius: 4px;
        }
        
        .insight-title {
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 5px;
        }
        
        .insight-description {
            color: #666;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- „Çµ„Ç§„Éâ„Éê„ÉºÔºàÁµ±‰∏Ä„Éá„Ç∂„Ç§„É≥Ôºâ -->
        <div class="sidebar">
            <div class="sidebar-header">
                <h3>MetaÂ∫ÉÂëä„É¨„Éù„Éº„Éà</h3>
            </div>
            <nav class="sidebar-nav">
                <a href="/dashboard" class="nav-item">„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ</a>
                <a href="/campaigns" class="nav-item">üìä „Ç≠„É£„É≥„Éö„Éº„É≥ÁÆ°ÁêÜ</a>
                <a href="/ad-performance" class="nav-item">üéØ Â∫ÉÂëä„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ</a>
                <a href="/audience-analysis" class="nav-item active">üë• „Ç™„Éº„Éá„Ç£„Ç®„É≥„ÇπÂàÜÊûê</a>
                <a href="/multi-account" class="nav-item">üîÑ „Éû„É´„ÉÅ„Ç¢„Ç´„Ç¶„É≥„Éà</a>
                <a href="/budget-scheduling" class="nav-item">‚è∞ ‰∫àÁÆó„Çπ„Ç±„Ç∏„É•„Éº„É™„É≥„Ç∞</a>
                <a href="/alerts" class="nav-item" id="alerts-link">„Ç¢„É©„Éº„ÉàÂÜÖÂÆπ</a>
                <a href="/alert-history" class="nav-item">„Ç¢„É©„Éº„ÉàÂ±•Ê≠¥</a>
                <a href="/improvement-tasks" class="nav-item">Á¢∫Ë™ç‰∫ãÈ†Ö</a>
                <a href="/improvement-strategies" class="nav-item">ÊîπÂñÑÊñΩÁ≠ñ</a>
            
            <div class="sidebar-footer">
                <form action="/logout" method="POST" style="margin: 0;">
                    <button type="submit" class="nav-item" style="
                        display: block;
                        width: 100%;
                        padding: 12px 20px;
                        background: rgba(231, 76, 60, 0.1);
                        color: #e74c3c;
                        border: 1px solid rgba(231, 76, 60, 0.2);
                        border-radius: 5px;
                        text-align: left;
                        cursor: pointer;
                        transition: all 0.3s;
                        font-size: 14px;
                        font-weight: 500;
                    " onmouseover="this.style.background='rgba(231, 76, 60, 0.2)'" onmouseout="this.style.background='rgba(231, 76, 60, 0.1)'">
                        üö™ „É≠„Ç∞„Ç¢„Ç¶„Éà
                    </button>
                </form>
            </div>
        </div>
        
        <div class="main-content">
            <div class="content-header">
                <h1 class="content-title">„Ç™„Éº„Éá„Ç£„Ç®„É≥„ÇπÂàÜÊûê</h1>
                <div class="date-selector">
                    <input type="date" id="dateFrom" />
                    <span>„Äú</span>
                    <input type="date" id="dateTo" />
                    <button onclick="loadAudienceData()">Êõ¥Êñ∞</button>
                </div>
            </div>
            
            <!-- „Ç§„É≥„Çµ„Ç§„Éà„Çª„ÇØ„Ç∑„Éß„É≥ -->
            <div class="insights-section" id="insightsSection">
                <h3 class="table-title">‰∏ªË¶Å„Ç§„É≥„Çµ„Ç§„Éà</h3>
                <div id="insightsContainer">
                    <div class="loading">„Ç§„É≥„Çµ„Ç§„Éà„ÇíÂàÜÊûê‰∏≠...</div>
                </div>
            </div>
            
            <!-- „ÉÅ„É£„Éº„Éà„Ç∞„É™„ÉÉ„Éâ -->
            <div class="analysis-grid">
                <div class="chart-card">
                    <h4 class="chart-title">Âπ¥ÈΩ¢Âà•„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ</h4>
                    <canvas id="ageChart"></canvas>
                </div>
                <div class="chart-card">
                    <h4 class="chart-title">ÊÄßÂà•„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ</h4>
                    <canvas id="genderChart"></canvas>
                </div>
                <div class="chart-card">
                    <h4 class="chart-title">„Éá„Éê„Ç§„ÇπÂà•„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ</h4>
                    <canvas id="deviceChart"></canvas>
                </div>
            </div>
            
            <!-- Ë©≥Á¥∞„ÉÜ„Éº„Éñ„É´ -->
            <div class="detail-table">
                <h3 class="table-title">„Çª„Ç∞„É°„É≥„ÉàÂà•Ë©≥Á¥∞„Éá„Éº„Çø</h3>
                
                <h4 style="margin-top: 30px;">Âπ¥ÈΩ¢Âà•</h4>
                <table id="ageTable">
                    <thead>
                        <tr>
                            <th>Âπ¥ÈΩ¢Â±§</th>
                            <th>Ê∂àÂåñÈ°ç</th>
                            <th>„ÇØ„É™„ÉÉ„ÇØ</th>
                            <th>CV</th>
                            <th>CTR</th>
                            <th>CPA</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr><td colspan="6" class="loading">„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø‰∏≠...</td></tr>
                    </tbody>
                </table>
                
                <h4 style="margin-top: 30px;">ÊÄßÂà•</h4>
                <table id="genderTable">
                    <thead>
                        <tr>
                            <th>ÊÄßÂà•</th>
                            <th>Ê∂àÂåñÈ°ç</th>
                            <th>„ÇØ„É™„ÉÉ„ÇØ</th>
                            <th>CV</th>
                            <th>CTR</th>
                            <th>CPA</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr><td colspan="6" class="loading">„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø‰∏≠...</td></tr>
                    </tbody>
                </table>
                
                <h4 style="margin-top: 30px;">„Éá„Éê„Ç§„ÇπÂà•</h4>
                <table id="deviceTable">
                    <thead>
                        <tr>
                            <th>„Éá„Éê„Ç§„Çπ</th>
                            <th>Ê∂àÂåñÈ°ç</th>
                            <th>„ÇØ„É™„ÉÉ„ÇØ</th>
                            <th>CV</th>
                            <th>CTR</th>
                            <th>CPA</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr><td colspan="6" class="loading">„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø‰∏≠...</td></tr>
                    </tbody>
                </table>
            </div>
            
            <!-- „Éï„Ç°„Éç„É´ÂàÜÊûê„Çª„ÇØ„Ç∑„Éß„É≥ -->
            <div class="detail-table" style="margin-top: 30px;">
                <h3 class="table-title">„Éï„Ç°„Éç„É´ÂàÜÊûê</h3>
                <canvas id="funnelChart" style="max-height: 400px;"></canvas>
                <div id="funnelTableContainer" style="margin-top: 20px;">
                    <div class="loading">„Éï„Ç°„Éç„É´„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø‰∏≠...</div>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        let audienceData = null;
        let funnelData = null;
        let charts = {};
        
        // ÂàùÊúüË®≠ÂÆö
        document.addEventListener('DOMContentLoaded', function() {
            // Êó•‰ªò„ÅÆÂàùÊúüÂÄ§„ÇíË®≠ÂÆöÔºàÈÅéÂéª7Êó•ÈñìÔºâ
            const today = new Date();
            const weekAgo = new Date(today);
            weekAgo.setDate(weekAgo.getDate() - 7);
            
            document.getElementById('dateTo').value = today.toISOString().split('T')[0];
            document.getElementById('dateFrom').value = weekAgo.toISOString().split('T')[0];
            
            // „Éá„Éº„ÇøË™≠„ÅøËæº„Åø
            loadAudienceData();
            loadFunnelData();
        });
        
        // „Ç™„Éº„Éá„Ç£„Ç®„É≥„Çπ„Éá„Éº„ÇøË™≠„ÅøËæº„Åø
        async function loadAudienceData() {
            const since = document.getElementById('dateFrom').value;
            const until = document.getElementById('dateTo').value;
            
            try {
                const response = await fetch(`/api/audience-insights?since=${since}&until=${until}`);
                const data = await response.json();
                
                if (data.success && data.data) {
                    audienceData = data.data;
                    // „Éá„Éº„Çø„ÅåÁ©∫„Åã„ÉÅ„Çß„ÉÉ„ÇØ
                    if (Object.keys(audienceData.byAge || {}).length > 0 ||
                        Object.keys(audienceData.byGender || {}).length > 0 ||
                        Object.keys(audienceData.byDevice || {}).length > 0) {
                        renderCharts();
                        renderTables();
                        renderInsights();
                    } else {
                        showError('Meta API„ÅÆË®≠ÂÆö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇÊúâÂäπ„Å™„Ç¢„ÇØ„Çª„Çπ„Éà„Éº„ÇØ„É≥„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ');
                    }
                } else if (data.error) {
                    showError(`„Éá„Éº„Çø„ÇíÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì: ${data.error}`);
                }
            } catch (error) {
                console.error('„Ç™„Éº„Éá„Ç£„Ç®„É≥„Çπ„Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº:', error);
                showError('„Ç™„Éº„Éá„Ç£„Ç®„É≥„Çπ„Éá„Éº„Çø„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
        }
        
        // „Éï„Ç°„Éç„É´„Éá„Éº„ÇøË™≠„ÅøËæº„Åø
        async function loadFunnelData() {
            const since = document.getElementById('dateFrom').value;
            const until = document.getElementById('dateTo').value;
            
            try {
                const response = await fetch(`/api/funnel-analysis?since=${since}&until=${until}`);
                const data = await response.json();
                
                if (data.success) {
                    funnelData = data.data;
                    renderFunnelChart();
                    renderFunnelTable();
                }
            } catch (error) {
                console.error('„Éï„Ç°„Éç„É´„Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº:', error);
            }
        }
        
        // „ÉÅ„É£„Éº„ÉàÊèèÁîª
        function renderCharts() {
            if (!audienceData) return;
            
            // Êó¢Â≠ò„ÅÆ„ÉÅ„É£„Éº„Éà„ÇíÁ†¥Ê£Ñ
            Object.values(charts).forEach(chart => chart.destroy());
            charts = {};
            
            // Âπ¥ÈΩ¢Âà•„ÉÅ„É£„Éº„Éà
            const ageCtx = document.getElementById('ageChart').getContext('2d');
            charts.age = new Chart(ageCtx, {
                type: 'bar',
                data: {
                    labels: Object.keys(audienceData.byAge || {}),
                    datasets: [
                        {
                            label: 'Ê∂àÂåñÈ°ç',
                            data: Object.values(audienceData.byAge || {}).map(d => d.spend),
                            backgroundColor: '#667eea',
                            yAxisID: 'y'
                        },
                        {
                            label: 'CPA',
                            data: Object.values(audienceData.byAge || {}).map(d => d.cpa),
                            type: 'line',
                            borderColor: '#ec4899',
                            backgroundColor: 'transparent',
                            yAxisID: 'y1'
                        }
                    ]
                },
                options: {
                    responsive: true,
                    interaction: {
                        mode: 'index',
                        intersect: false
                    },
                    scales: {
                        y: {
                            type: 'linear',
                            display: true,
                            position: 'left',
                            title: {
                                display: true,
                                text: 'Ê∂àÂåñÈ°ç (¬•)'
                            }
                        },
                        y1: {
                            type: 'linear',
                            display: true,
                            position: 'right',
                            title: {
                                display: true,
                                text: 'CPA (¬•)'
                            },
                            grid: {
                                drawOnChartArea: false
                            }
                        }
                    }
                }
            });
            
            // ÊÄßÂà•„ÉÅ„É£„Éº„Éà
            const genderCtx = document.getElementById('genderChart').getContext('2d');
            const genderLabels = Object.keys(audienceData.byGender || {}).map(g => 
                g === 'male' ? 'Áî∑ÊÄß' : g === 'female' ? 'Â•≥ÊÄß' : g
            );
            
            charts.gender = new Chart(genderCtx, {
                type: 'doughnut',
                data: {
                    labels: genderLabels,
                    datasets: [{
                        data: Object.values(audienceData.byGender || {}).map(d => d.spend),
                        backgroundColor: ['#667eea', '#ec4899']
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const label = context.label || '';
                                    const value = context.parsed || 0;
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const percentage = ((value / total) * 100).toFixed(1);
                                    return `${label}: ¬•${value.toLocaleString()} (${percentage}%)`;
                                }
                            }
                        }
                    }
                }
            });
            
            // „Éá„Éê„Ç§„ÇπÂà•„ÉÅ„É£„Éº„Éà
            const deviceCtx = document.getElementById('deviceChart').getContext('2d');
            const deviceLabels = Object.keys(audienceData.byDevice || {}).map(d => 
                d === 'mobile' ? '„É¢„Éê„Ç§„É´' : d === 'desktop' ? '„Éá„Çπ„ÇØ„Éà„ÉÉ„Éó' : d
            );
            
            charts.device = new Chart(deviceCtx, {
                type: 'pie',
                data: {
                    labels: deviceLabels,
                    datasets: [{
                        data: Object.values(audienceData.byDevice || {}).map(d => d.spend),
                        backgroundColor: ['#667eea', '#a855f7', '#ec4899']
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });
        }
        
        // „ÉÜ„Éº„Éñ„É´ÊèèÁîª
        function renderTables() {
            if (!audienceData) return;
            
            // Âπ¥ÈΩ¢Âà•„ÉÜ„Éº„Éñ„É´
            renderSegmentTable('ageTable', audienceData.byAge);
            
            // ÊÄßÂà•„ÉÜ„Éº„Éñ„É´
            const genderData = {};
            Object.entries(audienceData.byGender || {}).forEach(([key, value]) => {
                const label = key === 'male' ? 'Áî∑ÊÄß' : key === 'female' ? 'Â•≥ÊÄß' : key;
                genderData[label] = value;
            });
            renderSegmentTable('genderTable', genderData);
            
            // „Éá„Éê„Ç§„ÇπÂà•„ÉÜ„Éº„Éñ„É´
            const deviceData = {};
            Object.entries(audienceData.byDevice || {}).forEach(([key, value]) => {
                const label = key === 'mobile' ? '„É¢„Éê„Ç§„É´' : key === 'desktop' ? '„Éá„Çπ„ÇØ„Éà„ÉÉ„Éó' : key;
                deviceData[label] = value;
            });
            renderSegmentTable('deviceTable', deviceData);
        }
        
        // „Çª„Ç∞„É°„É≥„Éà„ÉÜ„Éº„Éñ„É´ÊèèÁîª
        function renderSegmentTable(tableId, data) {
            const tbody = document.querySelector(`#${tableId} tbody`);
            
            if (!data || Object.keys(data).length === 0) {
                tbody.innerHTML = '<tr><td colspan="6" style="text-align: center; color: #999;">„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</td></tr>';
                return;
            }
            
            let html = '';
            Object.entries(data).forEach(([key, value]) => {
                const cpaClass = value.cpa > 1000 ? 'metric-negative' : 'metric-positive';
                html += `
                    <tr>
                        <td>${key}</td>
                        <td class="metric-value">¬•${(value.spend || 0).toLocaleString()}</td>
                        <td>${(value.clicks || 0).toLocaleString()}</td>
                        <td class="metric-value">${value.conversions || 0}</td>
                        <td>${(value.ctr || 0).toFixed(2)}%</td>
                        <td class="metric-value ${cpaClass}">¬•${Math.round(value.cpa || 0).toLocaleString()}</td>
                    </tr>
                `;
            });
            
            tbody.innerHTML = html;
        }
        
        // „Ç§„É≥„Çµ„Ç§„ÉàÊèèÁîª
        function renderInsights() {
            if (!audienceData) return;
            
            const container = document.getElementById('insightsContainer');
            let insights = [];
            
            // ÊúÄÈ´ò„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„ÅÆÂπ¥ÈΩ¢Â±§ÔºàCPA > 0„ÅÆ„ÅøËÄÉÊÖÆÔºâ
            const ageWithConversions = Object.entries(audienceData.byAge || {})
                .filter(([age, data]) => data.conversions > 0 && data.cpa > 0);
            
            if (ageWithConversions.length > 0) {
                const bestAge = ageWithConversions.reduce((best, [age, data]) => {
                    if (!best || data.cpa < best.cpa) {
                        return { age, ...data };
                    }
                    return best;
                }, null);
                
                if (bestAge) {
                    insights.push({
                        title: 'ÊúÄÈ´òÂäπÁéá„ÅÆÂπ¥ÈΩ¢Â±§',
                        description: `${bestAge.age}Ê≠≥„ÅåÊúÄ„ÇÇÂäπÁéáÁöÑ„Åß„ÅôÔºàCPA: ¬•${Math.round(bestAge.cpa).toLocaleString()}„ÄÅCV: ${bestAge.conversions}‰ª∂Ôºâ`
                    });
                }
            }
            
            // „Ç≥„É≥„Éê„Éº„Ç∏„Éß„É≥„Åå0„ÅÆÂπ¥ÈΩ¢Â±§„ÅÆË≠¶Âëä
            const ageNoConversions = Object.entries(audienceData.byAge || {})
                .filter(([age, data]) => data.spend > 0 && data.conversions === 0);
            
            if (ageNoConversions.length > 0) {
                const totalSpendNoCV = ageNoConversions.reduce((sum, [age, data]) => sum + data.spend, 0);
                const ageGroups = ageNoConversions.map(([age]) => age).join('„ÄÅ');
                insights.push({
                    title: '‚ö†Ô∏è „Ç≥„É≥„Éê„Éº„Ç∏„Éß„É≥Êú™Áô∫Áîü„ÅÆÂπ¥ÈΩ¢Â±§',
                    description: `${ageGroups}Ê≠≥„ÅßCVÊú™Áô∫ÁîüÔºàÊ∂àÂåñÈ°ç: ¬•${Math.round(totalSpendNoCV).toLocaleString()}Ôºâ„ÄÇ„Çø„Éº„Ç≤„ÉÜ„Ç£„É≥„Ç∞„ÇÑÂ∫ÉÂëäÂÜÖÂÆπ„ÅÆË¶ãÁõ¥„Åó„ÇíÊ§úË®é„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`
                });
            }
            
            // „Éá„Éê„Ç§„ÇπÂà•„ÅÆÊé®Â•®
            const mobileData = audienceData.byDevice?.mobile || audienceData.byDevice?.mobile_app;
            const desktopData = audienceData.byDevice?.desktop;
            if (mobileData && desktopData) {
                const mobileRatio = mobileData.spend / (mobileData.spend + desktopData.spend) * 100;
                if (mobileRatio > 80) {
                    insights.push({
                        title: '„É¢„Éê„Ç§„É´‰∏≠ÂøÉ„ÅÆÈÖç‰ø°',
                        description: `ÈÖç‰ø°„ÅÆ${mobileRatio.toFixed(0)}%„Åå„É¢„Éê„Ç§„É´„Åß„Åô„ÄÇ„É¢„Éê„Ç§„É´ÊúÄÈÅ©Âåñ„ÇíÈáçÁÇπÁöÑ„Å´Ë°å„ÅÑ„Åæ„Åó„Çá„ÅÜ„ÄÇ`
                    });
                }
                
                // „Éá„Éê„Ç§„ÇπÂà•„ÅÆ„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊØîËºÉ
                if (mobileData.conversions > 0 && desktopData.conversions > 0) {
                    if (mobileData.cpa < desktopData.cpa * 0.8) {
                        insights.push({
                            title: '„É¢„Éê„Ç§„É´„ÅåÂäπÁéáÁöÑ',
                            description: `„É¢„Éê„Ç§„É´„ÅÆCPAÔºà¬•${Math.round(mobileData.cpa).toLocaleString()}Ôºâ„Åå„Éá„Çπ„ÇØ„Éà„ÉÉ„Éó„Çà„Çä20%‰ª•‰∏ä‰Ωé„ÅÑ„Åß„Åô„ÄÇ`
                        });
                    } else if (desktopData.cpa < mobileData.cpa * 0.8) {
                        insights.push({
                            title: '„Éá„Çπ„ÇØ„Éà„ÉÉ„Éó„ÅåÂäπÁéáÁöÑ',
                            description: `„Éá„Çπ„ÇØ„Éà„ÉÉ„Éó„ÅÆCPAÔºà¬•${Math.round(desktopData.cpa).toLocaleString()}Ôºâ„Åå„É¢„Éê„Ç§„É´„Çà„Çä20%‰ª•‰∏ä‰Ωé„ÅÑ„Åß„Åô„ÄÇ`
                        });
                    }
                }
            }
            
            // ÊÄßÂà•„Å´„Çà„ÇãÂ∑ÆÁï∞ÔºàCPA > 0„ÅÆ„ÅøÊØîËºÉÔºâ
            const maleData = audienceData.byGender?.male;
            const femaleData = audienceData.byGender?.female;
            if (maleData && femaleData) {
                // ‰∏°Êñπ„Å´„Ç≥„É≥„Éê„Éº„Ç∏„Éß„É≥„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅÆ„ÅøCPAÊØîËºÉ
                if (maleData.conversions > 0 && femaleData.conversions > 0) {
                    if (maleData.cpa < femaleData.cpa * 0.8) {
                        insights.push({
                            title: 'Áî∑ÊÄßÂêë„Åë„ÅåÂäπÁéáÁöÑ',
                            description: `Áî∑ÊÄß„ÅÆCPAÔºà¬•${Math.round(maleData.cpa).toLocaleString()}Ôºâ„ÅåÂ•≥ÊÄß„Çà„Çä20%‰ª•‰∏ä‰Ωé„ÅÑ„Åß„Åô„ÄÇÁî∑ÊÄßÂêë„Åë„ÅÆÈÖç‰ø°„ÇíÂº∑Âåñ„Åô„Çã„Åì„Å®„ÇíÊ§úË®é„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`
                        });
                    } else if (femaleData.cpa < maleData.cpa * 0.8) {
                        insights.push({
                            title: 'Â•≥ÊÄßÂêë„Åë„ÅåÂäπÁéáÁöÑ',
                            description: `Â•≥ÊÄß„ÅÆCPAÔºà¬•${Math.round(femaleData.cpa).toLocaleString()}Ôºâ„ÅåÁî∑ÊÄß„Çà„Çä20%‰ª•‰∏ä‰Ωé„ÅÑ„Åß„Åô„ÄÇÂ•≥ÊÄßÂêë„Åë„ÅÆÈÖç‰ø°„ÇíÂº∑Âåñ„Åô„Çã„Åì„Å®„ÇíÊ§úË®é„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`
                        });
                    }
                } else if (maleData.conversions > 0 && femaleData.conversions === 0) {
                    insights.push({
                        title: 'Áî∑ÊÄß„ÅÆ„Åø„ÅßCVÁô∫Áîü',
                        description: `Áî∑ÊÄß„Åß„ÅÆ„ÅøCVÁô∫ÁîüÔºà${maleData.conversions}‰ª∂Ôºâ„ÄÇÂ•≥ÊÄßÂêë„Åë„ÅÆ„ÇØ„É™„Ç®„Ç§„ÉÜ„Ç£„Éñ„ÇÑ„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÊîπÂñÑ„ÅåÂøÖË¶Å„Åã„ÇÇ„Åó„Çå„Åæ„Åõ„Çì„ÄÇ`
                    });
                } else if (femaleData.conversions > 0 && maleData.conversions === 0) {
                    insights.push({
                        title: 'Â•≥ÊÄß„ÅÆ„Åø„ÅßCVÁô∫Áîü',
                        description: `Â•≥ÊÄß„Åß„ÅÆ„ÅøCVÁô∫ÁîüÔºà${femaleData.conversions}‰ª∂Ôºâ„ÄÇÁî∑ÊÄßÂêë„Åë„ÅÆ„ÇØ„É™„Ç®„Ç§„ÉÜ„Ç£„Éñ„ÇÑ„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÊîπÂñÑ„ÅåÂøÖË¶Å„Åã„ÇÇ„Åó„Çå„Åæ„Åõ„Çì„ÄÇ`
                    });
                }
            }
            
            // ÂÖ®‰ΩìÁöÑ„Å™„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπË≠¶Âëä
            const totalSpend = Object.values(audienceData.byAge || {}).reduce((sum, data) => sum + data.spend, 0);
            const totalConversions = Object.values(audienceData.byAge || {}).reduce((sum, data) => sum + data.conversions, 0);
            
            if (totalSpend > 10000 && totalConversions === 0) {
                insights.push({
                    title: 'üö® „Ç≥„É≥„Éê„Éº„Ç∏„Éß„É≥ÊîπÂñÑ„ÅåÊÄ•Âãô',
                    description: `Ê∂àÂåñÈ°ç¬•${Math.round(totalSpend).toLocaleString()}„ÅßCV0‰ª∂„Åß„Åô„ÄÇ„É©„É≥„Éá„Ç£„É≥„Ç∞„Éö„Éº„Ç∏„ÄÅ„Çø„Éº„Ç≤„ÉÜ„Ç£„É≥„Ç∞„ÄÅÂ∫ÉÂëä„ÇØ„É™„Ç®„Ç§„ÉÜ„Ç£„Éñ„ÅÆÁ∑èÂêàÁöÑ„Å™Ë¶ãÁõ¥„Åó„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ`
                });
            }
            
            if (insights.length === 0) {
                insights.push({
                    title: 'ÂàÜÊûê‰∏≠',
                    description: '„Éá„Éº„Çø„ÇíÂèéÈõÜ‰∏≠„Åß„Åô„ÄÇ„Çà„ÇäÂ§ö„Åè„ÅÆ„Éá„Éº„Çø„ÅåËìÑÁ©ç„Åï„Çå„Çã„Å®„ÄÅË©≥Á¥∞„Å™„Ç§„É≥„Çµ„Ç§„Éà„ÅåË°®Á§∫„Åï„Çå„Åæ„Åô„ÄÇ'
                });
            }
            
            let html = '';
            insights.forEach(insight => {
                html += `
                    <div class="insight-item">
                        <div class="insight-title">${insight.title}</div>
                        <div class="insight-description">${insight.description}</div>
                    </div>
                `;
            });
            
            container.innerHTML = html;
        }
        
        // „Éï„Ç°„Éç„É´„ÉÅ„É£„Éº„ÉàÊèèÁîª
        function renderFunnelChart() {
            if (!funnelData || !funnelData.funnel) return;
            
            const ctx = document.getElementById('funnelChart').getContext('2d');
            
            // Êó¢Â≠ò„ÅÆ„ÉÅ„É£„Éº„Éà„ÇíÁ†¥Ê£Ñ
            if (charts.funnel) {
                charts.funnel.destroy();
            }
            
            charts.funnel = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: funnelData.funnel.stages.map(s => s.name),
                    datasets: [{
                        label: '„É¶„Éº„Ç∂„ÉºÊï∞',
                        data: funnelData.funnel.stages.map(s => s.count),
                        backgroundColor: funnelData.funnel.stages.map((s, i) => {
                            const opacity = 1 - (i * 0.15);
                            return `rgba(102, 126, 234, ${opacity})`;
                        })
                    }]
                },
                options: {
                    indexAxis: 'y',
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: { display: false },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const stage = funnelData.funnel.stages[context.dataIndex];
                                    return `${stage.count.toLocaleString()}‰∫∫ (${stage.rate}%)`;
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }
        
        // „Éï„Ç°„Éç„É´„ÉÜ„Éº„Éñ„É´ÊèèÁîª
        function renderFunnelTable() {
            const container = document.getElementById('funnelTableContainer');
            
            if (!funnelData || !funnelData.funnel) {
                container.innerHTML = '<div class="loading">„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</div>';
                return;
            }
            
            let html = '<h4>Èõ¢ËÑ±„Éù„Ç§„É≥„ÉàÂàÜÊûê</h4><table><thead><tr><th>„Çπ„ÉÜ„Éº„Ç∏</th><th>Èõ¢ËÑ±Áéá</th><th>Êé®Â•®„Ç¢„ÇØ„Ç∑„Éß„É≥</th></tr></thead><tbody>';
            
            funnelData.funnel.dropoffPoints.forEach(point => {
                const isHighDropoff = point.dropoffRate > 50;
                const recommendation = getDropoffRecommendation(point.stage, point.dropoffRate);
                html += `
                    <tr>
                        <td>${point.stage}</td>
                        <td class="${isHighDropoff ? 'metric-negative' : ''}">${point.dropoffRate.toFixed(1)}%</td>
                        <td style="font-size: 13px; color: #666;">${recommendation}</td>
                    </tr>
                `;
            });
            
            html += '</tbody></table>';
            container.innerHTML = html;
        }
        
        // Èõ¢ËÑ±Áéá„Å´Âü∫„Å•„ÅèÊé®Â•®„Ç¢„ÇØ„Ç∑„Éß„É≥ÔºàÊ±éÁî®„Éï„Ç°„Éç„É´ÂØæÂøúÔºâ
        function getDropoffRecommendation(stage, dropoffRate) {
            if (stage.includes('„Ç§„É≥„Éó„É¨„ÉÉ„Ç∑„Éß„É≥‚Üí„ÇØ„É™„ÉÉ„ÇØ')) {
                if (dropoffRate > 99) {
                    return '„ÇØ„É™„Ç®„Ç§„ÉÜ„Ç£„Éñ„ÅÆÊîπÂñÑ„ÄÅ„Çø„Éº„Ç≤„ÉÜ„Ç£„É≥„Ç∞„ÅÆË¶ãÁõ¥„Åó„ÄÅCTA„ÅÆÊòéÁ¢∫Âåñ';
                } else if (dropoffRate > 95) {
                    return '„Éì„Ç∏„É•„Ç¢„É´„ÅÆÈ≠ÖÂäõÂ∫¶Âêë‰∏ä„ÄÅÂ∫ÉÂëäÊñá„ÅÆÊúÄÈÅ©Âåñ';
                } else {
                    return 'ËâØÂ•Ω - ÁèæÁä∂Á∂≠ÊåÅ';
                }
            } else if (stage.includes('„ÇØ„É™„ÉÉ„ÇØ‚Üí„É©„É≥„Éá„Ç£„É≥„Ç∞„Éö„Éº„Ç∏„Éì„É•„Éº')) {
                if (dropoffRate > 50) {
                    return '„É©„É≥„Éá„Ç£„É≥„Ç∞„Éö„Éº„Ç∏„ÅÆË™≠„ÅøËæº„ÅøÈÄüÂ∫¶ÊîπÂñÑ„ÄÅ„É¢„Éê„Ç§„É´ÊúÄÈÅ©Âåñ';
                } else if (dropoffRate > 30) {
                    return '„Éö„Éº„Ç∏Ë°®Á§∫ÈÄüÂ∫¶„ÅÆÁ¢∫Ë™ç„ÄÅ„É™„É≥„ÇØÂÖàURL„ÅÆÊ§úË®º';
                } else {
                    return 'ËâØÂ•Ω - ÁèæÁä∂Á∂≠ÊåÅ';
                }
            } else if (stage.includes('„É©„É≥„Éá„Ç£„É≥„Ç∞„Éö„Éº„Ç∏„Éì„É•„Éº‚Üí„Ç®„É≥„Ç≤„Éº„Ç∏„É°„É≥„Éà') || stage.includes('„Ç®„É≥„Ç≤„Éº„Ç∏„É°„É≥„Éà')) {
                if (dropoffRate > 70) {
                    return '„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅÆË≥™ÊîπÂñÑ„ÄÅ„É¶„Éº„Ç∂„Éº‰ΩìÈ®ì„ÅÆÂêë‰∏ä„ÄÅCTAÈÖçÁΩÆ„ÅÆÊúÄÈÅ©Âåñ';
                } else if (dropoffRate > 50) {
                    return '„Éö„Éº„Ç∏ÂÜÖ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅÆÂÖÖÂÆü„ÄÅÂãïÁîª„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅÆËøΩÂä†';
                } else {
                    return 'ËâØÂ•Ω - ÁèæÁä∂Á∂≠ÊåÅ';
                }
            } else if (stage.includes('„Ç≥„É≥„Éê„Éº„Ç∏„Éß„É≥')) {
                if (dropoffRate > 95) {
                    return '„Éï„Ç©„Éº„É†Á∞°Á¥†Âåñ„ÄÅÂÖ•ÂäõÈ†ÖÁõÆÂâäÊ∏õ„ÄÅ‰ø°È†ºÊÄßÂêë‰∏äÊñΩÁ≠ñ';
                } else if (dropoffRate > 90) {
                    return '„Ç™„Éï„Ç°„Éº„ÅÆÈ≠ÖÂäõÂ∫¶Âêë‰∏ä„ÄÅÈôêÂÆöÊÑü„ÅÆÊºîÂá∫';
                } else {
                    return 'ËâØÂ•Ω - Á∂ôÁ∂öÁöÑ„Å™ÊîπÂñÑ„ÇíÊé®Â•®';
                }
            } else {
                return 'Á∂ôÁ∂öÁöÑ„Å™Áõ£Ë¶ñ„ÇíÊé®Â•®';
            }
        }
        
        // „Ç®„É©„ÉºË°®Á§∫
        function showError(message) {
            console.error(message);
            // „Ç§„É≥„Çµ„Ç§„Éà„Ç≥„É≥„ÉÜ„Éä„Å´„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫
            const insightsContainer = document.getElementById('insightsContainer');
            if (insightsContainer) {
                insightsContainer.innerHTML = `
                    <div class="insight-item" style="border-left-color: #e74c3c; background: rgba(231, 76, 60, 0.1);">
                        <div class="insight-title">‚ö†Ô∏è „Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº</div>
                        <div class="insight-description">${message}</div>
                    </div>
                `;
            }
            // „ÉÜ„Éº„Éñ„É´„Ç≥„É≥„ÉÜ„Éä„Å´„ÇÇ„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫
            const containers = ['ageTable', 'genderTable', 'deviceTable'].map(id => 
                document.querySelector(`#${id} tbody`)
            );
            containers.forEach(container => {
                if (container) {
                    container.innerHTML = `<tr><td colspan="6" style="text-align: center; color: #999;">${message}</td></tr>`;
                }
            });
        }
    </script>
</body>
</html>