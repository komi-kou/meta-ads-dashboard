<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>予算スケジューリング - Meta広告ダッシュボード</title>
    <link rel="stylesheet" href="/style.css">
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f5f6fa;
        }
        
        .app-container {
            display: flex;
            height: 100vh;
        }
        
        .sidebar {
            width: 250px;
            background: #2c3e50;
            color: white;
            height: 100vh;
            overflow-y: auto;
        }
        
        .sidebar-header {
            padding: 20px;
            background: rgba(0,0,0,0.1);
            border-bottom: 1px solid rgba(255,255,255,0.1);
        }
        
        .sidebar-header h3 {
            margin: 0;
            font-size: 18px;
            font-weight: 500;
        }
        
        .sidebar-nav {
            padding: 10px 0;
        }
        
        .nav-item {
            display: block;
            padding: 12px 20px;
            color: rgba(255,255,255,0.8);
            text-decoration: none;
            transition: all 0.3s;
            position: relative;
        }
        
        .nav-item:hover {
            background: rgba(255,255,255,0.1);
            color: white;
        }
        
        .nav-item.active {
            background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        
        .nav-item.active::before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            width: 3px;
            background: #fff;
        }
        
        .main-content {
            flex: 1;
            padding: 30px;
            overflow-y: auto;
        }
        
        .content-header {
            margin-bottom: 30px;
        }
        
        .content-title {
            font-size: 28px;
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 10px;
        }
        
        .schedule-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }
        
        .schedule-card {
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .schedule-card.full-width {
            grid-column: 1 / -1;
        }
        
        .card-title {
            font-size: 18px;
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid #f0f0f0;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-size: 14px;
            color: #495057;
            font-weight: 500;
        }
        
        .form-group input, .form-group select {
            width: 100%;
            padding: 10px 15px;
            border: 1px solid #ced4da;
            border-radius: 5px;
            font-size: 14px;
            transition: border-color 0.3s;
        }
        
        .form-group input:focus, .form-group select:focus {
            outline: none;
            border-color: #667eea;
        }
        
        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s;
            font-weight: 500;
        }
        
        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }
        
        .schedule-list {
            max-height: 400px;
            overflow-y: auto;
        }
        
        .schedule-item {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .schedule-info {
            flex: 1;
        }
        
        .schedule-campaign {
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 5px;
        }
        
        .schedule-details {
            font-size: 13px;
            color: #6c757d;
        }
        
        .schedule-status {
            padding: 4px 10px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 500;
        }
        
        .status-pending {
            background: #fff3cd;
            color: #856404;
        }
        
        .status-completed {
            background: #d4edda;
            color: #155724;
        }
        
        .status-failed {
            background: #f8d7da;
            color: #721c24;
        }
        
        .btn-delete {
            background: #dc3545;
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 4px;
            font-size: 12px;
            cursor: pointer;
            margin-left: 10px;
        }
        
        .weekday-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 10px;
        }
        
        .weekday-item {
            text-align: center;
        }
        
        .weekday-item label {
            display: block;
            font-size: 12px;
            margin-bottom: 5px;
        }
        
        .weekday-item input {
            width: 100%;
            padding: 8px;
            border: 1px solid #ced4da;
            border-radius: 4px;
            text-align: center;
        }
        
        .success-message {
            background: #d4edda;
            color: #155724;
            padding: 12px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        
        .error-message {
            background: #f8d7da;
            color: #721c24;
            padding: 12px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- サイドバー -->
        <div class="sidebar">
            <div class="sidebar-header">
                <h3>Meta広告レポート</h3>
            </div>
            <nav class="sidebar-nav">
                <a href="/dashboard" class="nav-item">ダッシュボード</a>
                <a href="/campaigns" class="nav-item">📊 キャンペーン管理</a>
                <a href="/ad-performance" class="nav-item">🎯 広告パフォーマンス</a>
                <a href="/audience-analysis" class="nav-item">👥 オーディエンス分析</a>
                <a href="/multi-account" class="nav-item">🔄 マルチアカウント</a>
                <a href="/budget-scheduling" class="nav-item active">⏰ 予算スケジューリング</a>
                <a href="/alerts" class="nav-item" id="alerts-link">アラート内容</a>
                <a href="/alert-history" class="nav-item">アラート履歴</a>
                <a href="/improvement-tasks" class="nav-item">確認事項</a>
                <a href="/improvement-strategies" class="nav-item">改善施策</a>
            
            <div class="sidebar-footer" style="position: absolute; bottom: 20px; left: 0; right: 0; padding: 0 20px;">
                <form action="/logout" method="POST" style="margin: 0;">
                    <button type="submit" class="nav-item" style="
                        display: block;
                        width: 100%;
                        padding: 12px 20px;
                        background: rgba(231, 76, 60, 0.1);
                        color: #e74c3c;
                        border: 1px solid rgba(231, 76, 60, 0.2);
                        border-radius: 5px;
                        text-align: left;
                        cursor: pointer;
                        transition: all 0.3s;
                        font-size: 14px;
                        font-weight: 500;
                    " onmouseover="this.style.background='rgba(231, 76, 60, 0.2)'" onmouseout="this.style.background='rgba(231, 76, 60, 0.1)'">
                        🚪 ログアウト
                    </button>
                </form>
            </div>
        </div>
        
        <!-- メインコンテンツ -->
        <div class="main-content">
            <div class="content-header">
                <h1 class="content-title">⏰ 予算スケジューリング</h1>
                <p style="color: #6c757d;">キャンペーン予算の自動変更スケジュールを設定します</p>
            </div>
            
            <div id="messageArea"></div>
            
            <div class="schedule-container">
                <!-- 単発スケジュール設定 -->
                <div class="schedule-card">
                    <h2 class="card-title">📅 単発スケジュール設定</h2>
                    <form id="singleScheduleForm">
                        <div class="form-group">
                            <label>キャンペーン</label>
                            <select id="campaignSelect" required>
                                <option value="">選択してください</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>実行日時</label>
                            <input type="datetime-local" id="scheduleDateTime" required>
                        </div>
                        <div class="form-group">
                            <label>新しい日予算（円）</label>
                            <input type="number" id="newBudget" placeholder="例: 10000" required>
                        </div>
                        <button type="submit" class="btn-primary">スケジュール設定</button>
                    </form>
                </div>
                
                <!-- 曜日別予算設定 -->
                <div class="schedule-card">
                    <h2 class="card-title">📆 曜日別予算設定</h2>
                    <form id="weeklyScheduleForm">
                        <div class="form-group">
                            <label>キャンペーン</label>
                            <select id="weeklyCampaignSelect" required>
                                <option value="">選択してください</option>
                            </select>
                        </div>
                        <div class="weekday-grid">
                            <div class="weekday-item">
                                <label>月</label>
                                <input type="number" id="budget_mon" placeholder="10000">
                            </div>
                            <div class="weekday-item">
                                <label>火</label>
                                <input type="number" id="budget_tue" placeholder="10000">
                            </div>
                            <div class="weekday-item">
                                <label>水</label>
                                <input type="number" id="budget_wed" placeholder="10000">
                            </div>
                            <div class="weekday-item">
                                <label>木</label>
                                <input type="number" id="budget_thu" placeholder="10000">
                            </div>
                            <div class="weekday-item">
                                <label>金</label>
                                <input type="number" id="budget_fri" placeholder="10000">
                            </div>
                            <div class="weekday-item">
                                <label>土</label>
                                <input type="number" id="budget_sat" placeholder="15000">
                            </div>
                            <div class="weekday-item">
                                <label>日</label>
                                <input type="number" id="budget_sun" placeholder="15000">
                            </div>
                        </div>
                        <button type="submit" class="btn-primary" style="margin-top: 20px;">曜日別設定を保存</button>
                    </form>
                </div>
                
                <!-- スケジュール一覧 -->
                <div class="schedule-card full-width">
                    <h2 class="card-title">📋 設定済みスケジュール</h2>
                    <div class="schedule-list" id="scheduleList">
                        <p style="color: #6c757d; text-align: center;">スケジュールを読み込み中...</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        let campaigns = [];
        
        // ページ読み込み時の初期化
        document.addEventListener('DOMContentLoaded', async () => {
            await loadCampaigns();
            await loadSchedules();
        });
        
        // キャンペーン一覧を取得
        async function loadCampaigns() {
            try {
                const response = await fetch('/api/campaigns/details?period=last_7d');
                const data = await response.json();
                
                if (data.success) {
                    campaigns = data.campaigns;
                    const campaignOptions = campaigns.map(c => 
                        `<option value="${c.id}">${c.name}</option>`
                    ).join('');
                    
                    document.getElementById('campaignSelect').innerHTML = 
                        '<option value="">選択してください</option>' + campaignOptions;
                    document.getElementById('weeklyCampaignSelect').innerHTML = 
                        '<option value="">選択してください</option>' + campaignOptions;
                }
            } catch (error) {
                console.error('キャンペーン取得エラー:', error);
            }
        }
        
        // スケジュール一覧を取得
        async function loadSchedules() {
            try {
                const response = await fetch('/api/schedules');
                const data = await response.json();
                
                if (data.success && data.schedules.length > 0) {
                    renderSchedules(data.schedules);
                } else {
                    document.getElementById('scheduleList').innerHTML = 
                        '<p style="color: #6c757d; text-align: center;">設定済みのスケジュールはありません</p>';
                }
            } catch (error) {
                console.error('スケジュール取得エラー:', error);
            }
        }
        
        // スケジュール一覧を表示
        function renderSchedules(schedules) {
            const html = schedules.map(schedule => {
                const campaign = campaigns.find(c => c.id === schedule.campaignId);
                const scheduleDate = new Date(schedule.scheduleTime);
                const statusClass = schedule.status === 'completed' ? 'status-completed' : 
                                   schedule.status === 'failed' ? 'status-failed' : 'status-pending';
                const statusText = schedule.status === 'completed' ? '実行済み' : 
                                  schedule.status === 'failed' ? '失敗' : '待機中';
                
                return `
                    <div class="schedule-item">
                        <div class="schedule-info">
                            <div class="schedule-campaign">${campaign?.name || 'Unknown Campaign'}</div>
                            <div class="schedule-details">
                                実行予定: ${scheduleDate.toLocaleString('ja-JP')} | 
                                新予算: ¥${parseInt(schedule.newBudget).toLocaleString()}
                            </div>
                        </div>
                        <span class="schedule-status ${statusClass}">${statusText}</span>
                        ${schedule.status === 'pending' ? 
                          `<button class="btn-delete" onclick="deleteSchedule('${schedule.id}')">削除</button>` : ''}
                    </div>
                `;
            }).join('');
            
            document.getElementById('scheduleList').innerHTML = html;
        }
        
        // 単発スケジュール設定
        document.getElementById('singleScheduleForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const data = {
                campaign_id: document.getElementById('campaignSelect').value,
                schedule_time: document.getElementById('scheduleDateTime').value,
                new_budget: document.getElementById('newBudget').value
            };
            
            try {
                const response = await fetch('/api/campaigns/schedule', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });
                
                const result = await response.json();
                if (result.success) {
                    showMessage('success', 'スケジュールを設定しました');
                    document.getElementById('singleScheduleForm').reset();
                    loadSchedules();
                } else {
                    showMessage('error', result.error || 'スケジュール設定に失敗しました');
                }
            } catch (error) {
                showMessage('error', 'エラーが発生しました');
            }
        });
        
        // 曜日別予算設定
        document.getElementById('weeklyScheduleForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const weekdays = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'];
            const weeklyBudgets = {};
            
            weekdays.forEach(day => {
                const value = document.getElementById(`budget_${day}`).value;
                if (value) {
                    weeklyBudgets[day] = parseInt(value);
                }
            });
            
            const data = {
                campaign_id: document.getElementById('weeklyCampaignSelect').value,
                weekly_budgets: weeklyBudgets
            };
            
            try {
                const response = await fetch('/api/campaigns/weekly-schedule', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });
                
                const result = await response.json();
                if (result.success) {
                    showMessage('success', '曜日別予算を設定しました');
                    document.getElementById('weeklyScheduleForm').reset();
                } else {
                    showMessage('error', result.error || '設定に失敗しました');
                }
            } catch (error) {
                showMessage('error', 'エラーが発生しました');
            }
        });
        
        // スケジュール削除
        async function deleteSchedule(scheduleId) {
            if (!confirm('このスケジュールを削除しますか？')) return;
            
            try {
                const response = await fetch(`/api/schedules/${scheduleId}`, {
                    method: 'DELETE'
                });
                
                const result = await response.json();
                if (result.success) {
                    showMessage('success', 'スケジュールを削除しました');
                    loadSchedules();
                } else {
                    showMessage('error', result.error || '削除に失敗しました');
                }
            } catch (error) {
                showMessage('error', 'エラーが発生しました');
            }
        }
        
        // メッセージ表示
        function showMessage(type, message) {
            const messageArea = document.getElementById('messageArea');
            messageArea.innerHTML = `<div class="${type}-message">${message}</div>`;
            setTimeout(() => {
                messageArea.innerHTML = '';
            }, 5000);
        }
    </script>
</body>
</html>