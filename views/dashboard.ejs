<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MetaÂ∫ÉÂëä„É¨„Éù„Éº„Éà</title>
    <link rel="stylesheet" href="/style.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f5f6fa;
        }
        
        /* Áµ±‰∏Ä„É¨„Ç§„Ç¢„Ç¶„ÉàÔºàapp-container‰ΩøÁî®Ôºâ */
        .app-container {
            display: flex;
            height: 100vh;
        }
        
        .main-content {
            flex: 1;
            padding: 30px;
            overflow-y: auto;
        }
        
        .content-header {
            margin-bottom: 30px;
        }
        
        .content-title {
            font-size: 28px;
            font-weight: 300;
            color: #2c3e50;
            margin-bottom: 10px;
        }
        

        
        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 25px;
            margin-bottom: 40px;
        }
        
        .metric-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 30px;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.15);
            border: none;
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
            color: white;
        }
        
        .metric-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 40px rgba(0,0,0,0.2);
        }
        
        .metric-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(45deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0.05) 100%);
            pointer-events: none;
        }
        
        .metric-icon {
            position: absolute;
            top: 20px;
            right: 20px;
            font-size: 24px;
            opacity: 0.8;
        }
        
        .metric-title {
            font-size: 14px;
            color: rgba(255,255,255,0.9);
            margin-bottom: 15px;
            font-weight: 500;
            position: relative;
            z-index: 1;
        }
        
        .metric-value {
            font-size: 32px;
            font-weight: 700;
            color: white;
            margin-bottom: 5px;
            position: relative;
            z-index: 1;
        }
        
        .metric-unit {
            font-size: 16px;
            color: rgba(255,255,255,0.8);
            position: relative;
            z-index: 1;
        }
        
        .metric-card.spend {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
        
        .metric-card.budget {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        }
        
        .metric-card.ctr {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        }
        
        .metric-card.cpm {
            background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);
        }
        
        /* Ë¶ñË™çÊÄßÊîπÂñÑ: CV„ÄÅCPA„ÄÅ„Éï„É™„Éº„ÇØ„Ç®„É≥„Ç∑„Éº„Ç´„Éº„Éâ„ÅÆËâ≤Â§âÊõ¥ */
        .metric-card.cv {
            background: linear-gradient(135deg, #1e3a8a 0%, #3b82f6 100%) !important;
            color: white !important;
        }
        
        .metric-card.cpa {
            background: linear-gradient(135deg, #14532d 0%, #16a34a 100%) !important;
            color: white !important;
        }
        
        .metric-card.frequency {
            background: linear-gradient(135deg, #374151 0%, #6b7280 100%) !important;
            color: white !important;
        }
        
        .chart-section {
            background: white;
            padding: 30px;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }
        
        .chart-header {
            font-size: 20px;
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 25px;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .chart-header::before {
            content: 'üìä';
            font-size: 24px;
        }
        
        .chart-legend {
            display: flex;
            gap: 25px;
            margin-bottom: 25px;
            flex-wrap: wrap;
        }
        
        .legend-item {
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 14px;
            color: #666;
            padding: 8px 15px;
            background: #f8f9fa;
            border-radius: 20px;
            transition: all 0.3s;
        }
        
        .legend-item:hover {
            background: #e9ecef;
            transform: scale(1.05);
        }
        
        .legend-color {
            width: 12px;
            height: 12px;
            border-radius: 3px;
        }
        
        .chart-container {
            position: relative;
            height: 400px;
            margin-top: 20px;
        }
        
        .loading {
            display: flex;
            align-items: center;
            justify-content: center;
            height: 300px;
            color: #888;
            font-size: 16px;
        }
        
        .loading::after {
            content: '';
            width: 20px;
            height: 20px;
            border: 2px solid #ddd;
            border-top: 2px solid #3498db;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-left: 10px;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .error-message {
            background: #fee;
            color: #c33;
            padding: 15px;
            border-radius: 10px;
            margin: 20px 0;
            border-left: 4px solid #c33;
            display: none;
        }
        
        /* „Ç≠„É£„É≥„Éö„Éº„É≥‰∏ÄË¶ß„Å®„Ç§„É≥„Çµ„Ç§„Éà„ÅÆ„Çπ„Çø„Ç§„É´ */
        .campaign-item {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 10px;
            transition: all 0.3s ease;
        }
        
        .campaign-item:hover {
            background: #e9ecef;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        .campaign-name {
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 8px;
        }
        
        .campaign-status {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: 500;
            margin-bottom: 5px;
        }
        
        .status-active {
            background: #d1fae5;
            color: #065f46;
        }
        
        .status-paused {
            background: #fef3c7;
            color: #92400e;
        }
        
        .status-deleted {
            background: #fee2e2;
            color: #991b1b;
        }
        
        .campaign-objective {
            font-size: 12px;
            color: #6b7280;
        }
        
        .insight-item {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 10px;
            border-left: 4px solid #6b7280;
            transition: all 0.3s ease;
        }
        
        .insight-item.warning {
            border-left-color: #f59e0b;
            background: #fef3c7;
        }
        
        .insight-item.success {
            border-left-color: #10b981;
            background: #d1fae5;
        }
        
        .insight-item.info {
            border-left-color: #3b82f6;
            background: #dbeafe;
        }
        
        .insight-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        .insight-message {
            font-size: 14px;
            line-height: 1.5;
            color: #374151;
        }
        
        /* „Ç≠„É£„É≥„Éö„Éº„É≥ÈÅ∏Êäû„Çª„ÇØ„Ç∑„Éß„É≥ */
        .campaign-section {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .campaign-section label {
            font-weight: 500;
            color: #4a5568;
            white-space: nowrap;
        }
        
        .campaign-section select {
            padding: 8px 12px;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            background: white;
            font-size: 14px;
            min-width: 150px;
            color: #374151;
        }
        
        .campaign-section select:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.1);
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- „Çµ„Ç§„Éâ„Éê„ÉºÔºàÁµ±‰∏Ä„Éá„Ç∂„Ç§„É≥Ôºâ -->
        <div class="sidebar">
            <div class="sidebar-header">
                <h3>MetaÂ∫ÉÂëä„É¨„Éù„Éº„Éà</h3>
            </div>
            <nav class="sidebar-nav">
                <a href="/dashboard" class="nav-item active">„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ</a>
                <a href="/alerts" class="nav-item" id="alerts-link">„Ç¢„É©„Éº„ÉàÂÜÖÂÆπ</a>
                <a href="/alert-history" class="nav-item">„Ç¢„É©„Éº„ÉàÂ±•Ê≠¥</a>
                <a href="/improvement-tasks" class="nav-item">Á¢∫Ë™ç‰∫ãÈ†Ö</a>
                <a href="/improvement-strategies" class="nav-item">ÊîπÂñÑÊñΩÁ≠ñ</a>
                <a href="/chatwork-test" class="nav-item">„ÉÅ„É£„ÉÉ„Éà„ÉØ„Éº„ÇØ„ÉÜ„Çπ„Éà</a>
            </nav>
        </div>
        
        <!-- „É°„Ç§„É≥„Ç≥„É≥„ÉÜ„É≥„ÉÑ -->
        <div class="main-content">
            <!-- Êó¢Â≠ò„ÅÆ„ÄåÁèæÁä∂„ÅÆÊï∞ÂÄ§„Äç„Éò„ÉÉ„ÉÄ„ÉºÈÉ®ÂàÜÔºàÂÖÉ„ÅÆ„Åæ„ÅæÔºâ -->
            <div class="dashboard-header">
                <h1>ÁèæÁä∂„ÅÆÊï∞ÂÄ§</h1>
            </div>
            
            <!-- 30ÂàÜÂâç„ÅÆÁä∂ÊÖã„Å´Âæ©ÂÖÉ - „Éò„ÉÉ„ÉÄ„Éº„Ç≥„É≥„Éà„É≠„Éº„É´ÈÉ®ÂàÜ -->
            <div class="header-controls">
                <div class="display-mode-section">
                    <label>Ë°®Á§∫„É¢„Éº„Éâ:</label>
                    <select id="dateMode">
                        <option value="1Êó•„Åö„Å§" selected>1Êó•„Åö„Å§</option>
                        <option value="ÊúüÈñì">ÊúüÈñì</option>
                    </select>
                </div>
                
                <!-- ÊúüÈñìÈÅ∏Êäû„ÅØË°®Á§∫„É¢„Éº„Éâ„Åå'ÊúüÈñì'„ÅÆÊôÇ„ÅÆ„ÅøË°®Á§∫ -->
                <div id="periodSelector" class="period-section">
                    <label>ÊúüÈñì:</label>
                    <select id="periodRange">
                        <option value="7">ÈÅéÂéª7Êó•Èñì</option>
                        <option value="14">ÈÅéÂéª14Êó•Èñì</option>
                        <option value="30">ÈÅéÂéª30Êó•Èñì</option>
                    </select>
                </div>
                
                <div class="date-section">
                    <label>Êó•‰ªò:</label>
                    <input type="date" id="selectedDate">
                </div>
                
                <div class="campaign-section">
                    <label>„Ç≠„É£„É≥„Éö„Éº„É≥:</label>
                    <select id="selectedCampaign">
                        <option value="">ÂÖ®„Ç≠„É£„É≥„Éö„Éº„É≥</option>
                        <option value="loading">Ë™≠„ÅøËæº„Åø‰∏≠...</option>
                    </select>
                </div>
            </div>
            
                <!-- Êó¢Â≠ò„ÅÆ„É°„Éà„É™„ÇØ„Çπ„Ç´„Éº„ÉâÔºàÊï∞ÂÄ§ÈÉ®ÂàÜ„ÅØ‰∏ÄÂàáÂ§âÊõ¥„Å™„ÅóÔºâ -->
                <div class="metrics-grid">
                    <div class="metric-card spend">
                        <div class="metric-icon">üí∞</div>
                        <div class="metric-title">Ê∂àÂåñÈáëÈ°çÔºàÂêàË®àÔºâ</div>
                        <div class="metric-value">
                            <span data-metric="spend">Ë™≠„ÅøËæº„Åø‰∏≠...</span><span class="metric-unit">ÂÜÜ</span>
                        </div>
                    </div>
                    
                    <div class="metric-card budget">
                        <div class="metric-icon">üìä</div>
                        <div class="metric-title">‰∫àÁÆóÊ∂àÂåñÁéáÔºàÂπ≥ÂùáÔºâ</div>
                        <div class="metric-value">
                            <span data-metric="budget-rate">Ë™≠„ÅøËæº„Åø‰∏≠...</span><span class="metric-unit">%</span>
                        </div>
                    </div>
                    
                    <div class="metric-card ctr">
                        <div class="metric-icon">üëÜ</div>
                        <div class="metric-title">CTRÔºàÂπ≥ÂùáÔºâ</div>
                        <div class="metric-value">
                            <span data-metric="ctr">Ë™≠„ÅøËæº„Åø‰∏≠...</span><span class="metric-unit">%</span>
                        </div>
                    </div>
                    
                    <div class="metric-card cpm">
                        <div class="metric-icon">üìà</div>
                        <div class="metric-title">CPMÔºàÂπ≥ÂùáÔºâ</div>
                        <div class="metric-value">
                            <span data-metric="cpm">Ë™≠„ÅøËæº„Åø‰∏≠...</span><span class="metric-unit">ÂÜÜ</span>
                        </div>
                    </div>
                </div>
                
                <!-- ‰∏ãÊÆµÊåáÊ®ô -->
                <div class="metrics-grid" style="grid-template-columns: repeat(3, 1fr); margin-bottom: 40px;">
                    <div class="metric-card cv">
                        <div class="metric-icon">üéØ</div>
                        <div class="metric-title">CVÔºàÂêàË®àÔºâ</div>
                        <div class="metric-value">
                            <span data-metric="conversions">Ë™≠„ÅøËæº„Åø‰∏≠...</span>
                        </div>
                    </div>
                    
                    <div class="metric-card cpa">
                        <div class="metric-icon">üí∏</div>
                        <div class="metric-title">CPAÔºàÂπ≥ÂùáÔºâ</div>
                        <div class="metric-value">
                            <span data-metric="cpa">Ë™≠„ÅøËæº„Åø‰∏≠...</span><span class="metric-unit">ÂÜÜ</span>
                        </div>
                    </div>
                    
                    <div class="metric-card frequency">
                        <div class="metric-icon">üîÑ</div>
                        <div class="metric-title">„Éï„É™„Éº„ÇØ„Ç®„É≥„Ç∑„ÉºÔºàÂπ≥ÂùáÔºâ</div>
                        <div class="metric-value">
                            <span data-metric="frequency">Ë™≠„ÅøËæº„Åø‰∏≠...</span><span class="metric-unit">%</span>
                        </div>
                    </div>
                </div>

            <!-- Êó¢Â≠ò„ÅÆ„Ç∞„É©„ÉïÈÉ®ÂàÜÔºàÂÆåÂÖ®„Å´ÂÖÉ„ÅÆ„Åæ„ÅæÔºâ -->
            <div class="chart-section">
                <h2>üìä ‰∏ªË¶ÅÊåáÊ®ô„ÅÆÊé®Áßª</h2>
                
                <div class="chart-legend">
                    <div class="legend-item">
                        <div class="legend-color" style="background: #8b5cf6;"></div>
                        <span>Ê∂àÂåñÈáëÈ°ç</span>
                    </div>
                    <div class="legend-item">
                        <div class="legend-color" style="background: #3b82f6;"></div>
                        <span>CTR(%)</span>
                    </div>
                    <div class="legend-item">
                        <div class="legend-color" style="background: #10b981;"></div>
                        <span>CPM</span>
                    </div>
                    <div class="legend-item">
                        <div class="legend-color" style="background: #f59e0b;"></div>
                        <span>CV</span>
                    </div>
                    <!-- ‚úÖ CPAËøΩÂä† -->
                    <div class="legend-item">
                        <div class="legend-color" style="background: #ef4444;"></div>
                        <span>CPA</span>
                    </div>
                    <!-- ‚úÖ „Éï„É™„Éº„ÇØ„Ç®„É≥„Ç∑„ÉºËøΩÂä† -->
                    <div class="legend-item">
                        <div class="legend-color" style="background: #6b7280;"></div>
                        <span>„Éï„É™„Éº„ÇØ„Ç®„É≥„Ç∑„Éº</span>
                    </div>
                </div>
                
                <div class="chart-container">
                    <canvas id="performanceChart"></canvas>
                </div>
            </div>
            
            <!-- „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏Ë°®Á§∫ -->
            <div class="error-message" style="display: none;"></div>
            
            <!-- „É≠„Éº„Éá„Ç£„É≥„Ç∞Ë°®Á§∫ -->
            <div class="loading-message" style="display: none; text-align: center; padding: 20px; color: #666;">
                <div>üîÑ „Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø‰∏≠...</div>
            </div>
            
            <!-- „Ç≠„É£„É≥„Éö„Éº„É≥‰∏ÄË¶ß„Å®„Ç§„É≥„Çµ„Ç§„ÉàË°®Á§∫„Ç®„É™„Ç¢ -->
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 30px; margin-top: 40px;">
                <!-- „Ç≠„É£„É≥„Éö„Éº„É≥‰∏ÄË¶ß -->
                <div class="chart-section">
                    <h2>üìã „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Ç≠„É£„É≥„Éö„Éº„É≥</h2>
                    <div id="campaigns-list" style="max-height: 400px; overflow-y: auto;">
                        <div style="text-align: center; color: #666; padding: 20px;">
                            üîÑ „Ç≠„É£„É≥„Éö„Éº„É≥„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø‰∏≠...
                        </div>
                    </div>
                </div>
                
                <!-- „Ç§„É≥„Çµ„Ç§„Éà„ÉªÊîπÂñÑÁÇπ -->
                <div class="chart-section">
                    <h2>üí° „Ç§„É≥„Çµ„Ç§„Éà„ÉªÊîπÂñÑÁÇπ</h2>
                    <div id="insights-list" style="max-height: 400px; overflow-y: auto;">
                        <div style="text-align: center; color: #666; padding: 20px;">
                            üîÑ „Ç§„É≥„Çµ„Ç§„Éà„ÇíÂàÜÊûê‰∏≠...
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- ÊúÄÁµÇÊõ¥Êñ∞ÊôÇÈñìË°®Á§∫ -->
            <div style="text-align: center; margin-top: 30px; color: #666; font-size: 14px;">
                ÊúÄÁµÇÊõ¥Êñ∞: <span id="last-update">-</span>
            </div>
        </div>
        </div>
    </div>

    <script>
        // „Éö„Éº„Ç∏„É≠„Éº„ÉâÊôÇ„ÅÆË®≠ÂÆöÁ¢∫Ë™ç„Å®Ëá™Âãï„Éá„Éº„ÇøÂèñÂæó
        document.addEventListener('DOMContentLoaded', async function() {
            console.log('=== „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„ÉâÂàùÊúüÂåñ ===');
            
            try {
                // Ë®≠ÂÆöÁä∂Ê≥ÅÁ¢∫Ë™ç
                const debugResponse = await fetch('/api/debug-meta-config');
                const debugData = await debugResponse.json();
                console.log('Ë®≠ÂÆö„Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±:', debugData);
                
                if (debugData.finalResult.configFound) {
                    console.log('‚úÖ Meta APIË®≠ÂÆö„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åó„Åü');
                    
                    // „Ç≠„É£„É≥„Éö„Éº„É≥„É™„Çπ„ÉàË™≠„ÅøËæº„Åø
                    await loadCampaigns();
                    hideErrorMessage();
                    
                    // ‰ªäÊó•„ÅÆÊó•‰ªò„Çí„Éá„Éï„Ç©„É´„ÉàË®≠ÂÆö
                    const today = new Date().toISOString().split('T')[0];
                    const dateInput = document.getElementById('selectedDate');
                    if (dateInput) {
                        dateInput.value = today;
                    }
                    
                    // „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„ÉºË®≠ÂÆö
                    setupEventListeners();
                    
                    // ÂàùÊúüË°®Á§∫Áä∂ÊÖãË®≠ÂÆöÔºà„Éá„Éï„Ç©„É´„Éà„Çí1Êó•„Å´Â§âÊõ¥Ôºâ
                    const dateMode = document.getElementById('dateMode');
                    if (dateMode) {
                        dateMode.value = '1Êó•„Åö„Å§'; // „Éá„Éï„Ç©„É´„Éà„Çí1Êó•„Å´Ë®≠ÂÆö
                        document.getElementById('periodSelector').style.display = 'none';
                    }
                    
                    // ÂàùÊúü„Éá„Éº„ÇøÂèñÂæó
                    setTimeout(() => {
                        updateDashboardData();
                    }, 100);
                } else {
                    console.log('‚ùå Meta APIË®≠ÂÆö„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
                    showErrorMessage('Meta APIË®≠ÂÆö„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇË®≠ÂÆöÁîªÈù¢„ÅßÂÜçÂ∫¶Ë®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
                }
                
            } catch (error) {
                console.error('ÂàùÊúüÂåñ„Ç®„É©„Éº:', error);
                showErrorMessage('„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„ÅÆÂàùÊúüÂåñ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ');
            }
        });

        // Áä∂ÊÖãÁÆ°ÁêÜ„Çí30ÂàÜÂâç„ÅÆÁä∂ÊÖã„Å´Êàª„Åô
        let displayMode = 'daily'; // „Éá„Éï„Ç©„É´„Éà„ÅØ1Êó•„Åö„Å§
        let period = '1'; // „Éá„Éï„Ç©„É´„Éà„Çí1Êó•„Å´Â§âÊõ¥
        let selectedDate = new Date().toISOString().split('T')[0]; // ÊúÄÊñ∞Êó•ÔºàÂΩìÊó•Ôºâ„Çí„Éá„Éï„Ç©„É´„Éà„Å´

        function setupEventListeners() {
            const dateMode = document.getElementById('dateMode');
            const selectedDateInput = document.getElementById('selectedDate');
            const periodRange = document.getElementById('periodRange');
            
            // ÂàùÊúüË®≠ÂÆö
            const today = new Date().toISOString().split('T')[0];
            if (selectedDateInput) {
                selectedDateInput.value = today;
            }
            
            // „Éá„Éï„Ç©„É´„ÉàË°®Á§∫„É¢„Éº„Éâ„Çí1Êó•„Å´Ë®≠ÂÆö
            if (dateMode) {
                dateMode.value = '1Êó•„Åö„Å§';
                // 1Êó•„Åö„Å§ÈÅ∏ÊäûÊôÇÔºöÊúüÈñìÈÅ∏Êäû„ÇíÈùûË°®Á§∫
                document.getElementById('periodSelector').style.display = 'none';
            }
            
            if (dateMode) {
                dateMode.addEventListener('change', function() {
                    const mode = this.value;
                    console.log('Ë°®Á§∫„É¢„Éº„ÉâÂ§âÊõ¥:', mode);
                    
                    // Ë°®Á§∫„É¢„Éº„Éâ„Å´„Çà„ÇãÊù°‰ª∂ÂàÜÂ≤êÔºà30ÂàÜÂâç„ÅÆÁä∂ÊÖãÔºâ
                    if (mode === '1Êó•„Åö„Å§') {
                        // 1Êó•„Åö„Å§ÈÅ∏ÊäûÊôÇÔºöÊúüÈñìÈÅ∏Êäû„ÇíÈùûË°®Á§∫
                        document.getElementById('periodSelector').style.display = 'none';
                    } else {
                        // ÊúüÈñìÈÅ∏ÊäûÊôÇÔºöÊúüÈñìÈÅ∏Êäû„ÇíË°®Á§∫
                        document.getElementById('periodSelector').style.display = 'flex';
                    }
                    
                    // Âç≥Â∫ß„Å´„Éá„Éº„ÇøÊõ¥Êñ∞
                    updateDashboardData();
                });
            }
            
            if (selectedDateInput) {
                selectedDateInput.addEventListener('change', function() {
                    const date = this.value;
                    console.log('ÈÅ∏ÊäûÊó•‰ªòÂ§âÊõ¥:', date);
                    
                    if (date) {
                        updateDashboardData();
                    }
                });
            }
            
            if (periodRange) {
                periodRange.addEventListener('change', function() {
                    const periodValue = this.value;
                    console.log('ÈÅ∏ÊäûÊúüÈñìÂ§âÊõ¥:', periodValue + 'Êó•Èñì');
                    updateDashboardData();
                });
            }
        }



        // „Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„Åß„ÅÆ„Ç®„É©„ÉºË°®Á§∫ÊîπÂñÑ
        async function updateDashboardData() {
            console.log('=== ÂÆüÈöõ„ÅÆMetaÂ∫ÉÂëä„Éá„Éº„ÇøÊõ¥Êñ∞ ===');
            
            const mode = document.getElementById('dateMode').value;
            const params = new URLSearchParams();
            
            showLoadingState();
            hideErrorMessage();
            
            if (mode === '1Êó•„Åö„Å§') {
                const selectedDate = document.getElementById('selectedDate').value;
                if (!selectedDate) {
                    hideLoadingState();
                    showErrorMessage('Êó•‰ªò„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
                    return;
                }
                params.append('type', 'daily');
                params.append('date', selectedDate);
            } else {
                const period = document.getElementById('periodRange').value;
                params.append('type', 'period');
                params.append('period', period);
            }
            
            const selectedCampaign = document.getElementById('selectedCampaign').value;
            if (selectedCampaign) {
                params.append('campaignId', selectedCampaign);
            }
            
            try {
                const response = await fetch(`/api/meta-ads-data?${params}`);
                
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.details || '„Éá„Éº„ÇøÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
                }
                
                const data = await response.json();
                console.log('ÂÆüÈöõ„ÅÆMetaÂ∫ÉÂëä„Éá„Éº„ÇøÂèó‰ø°:', data);
                
                updateMetricsDisplay(data);
                updateChart(data);
                
                hideLoadingState();
                
            } catch (error) {
                console.error('MetaÂ∫ÉÂëä„Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº:', error);
                hideLoadingState();
                showErrorMessage(`MetaÂ∫ÉÂëä„Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº: ${error.message}`);
            }
        }

        // „ÉÄ„Éü„Éº„Éá„Éº„ÇøÁîüÊàê
        function generateDummyData() {
            return {
                spend: Math.floor(Math.random() * 50000) + 10000,
                budgetRate: (Math.random() * 50 + 50).toFixed(2),
                ctr: (Math.random() * 5 + 1).toFixed(2),
                cpm: Math.floor(Math.random() * 3000) + 2000,
                conversions: Math.floor(Math.random() * 50) + 10,
                cpa: Math.floor(Math.random() * 2000) + 300,
                frequency: (Math.random() * 3 + 0.5).toFixed(2),
                chartData: {
                    labels: ['7/6', '7/7', '7/8', '7/9', '7/10', '7/11', '7/12'],
                    spend: Array.from({length: 7}, () => Math.floor(Math.random() * 20000) + 5000),
                    ctr: Array.from({length: 7}, () => (Math.random() * 5 + 1).toFixed(2)),
                    cpm: Array.from({length: 7}, () => Math.floor(Math.random() * 3000) + 2000),
                    conversions: Array.from({length: 7}, () => Math.floor(Math.random() * 30) + 5),
                    cpa: Array.from({length: 7}, () => Math.floor(Math.random() * 2000) + 300),           // ‚úÖ CPAËøΩÂä†
                    frequency: Array.from({length: 7}, () => (Math.random() * 3 + 0.5).toFixed(2))        // ‚úÖ „Éï„É™„Éº„ÇØ„Ç®„É≥„Ç∑„ÉºËøΩÂä†
                }
            };
        }

        // „É°„Éà„É™„ÇØ„ÇπË°®Á§∫Êõ¥Êñ∞ÔºàÁ¢∫ÂÆü„Å™„Éá„Éº„Çø„Éê„Ç§„É≥„Éá„Ç£„É≥„Ç∞Ôºâ
        function updateMetricsDisplay(data) {
            console.log('=== „É°„Éà„É™„ÇØ„ÇπÊõ¥Êñ∞ÈñãÂßã ===');
            
            const updates = [
                { selector: '[data-metric="spend"]', value: `${data.spend.toLocaleString()}` },
                { selector: '[data-metric="budget-rate"]', value: `${data.budgetRate}` },
                { selector: '[data-metric="ctr"]', value: `${data.ctr}` },
                { selector: '[data-metric="cpm"]', value: `${data.cpm.toLocaleString()}` },
                { selector: '[data-metric="conversions"]', value: data.conversions },
                { selector: '[data-metric="cpa"]', value: `${data.cpa.toLocaleString()}` },
                { selector: '[data-metric="frequency"]', value: `${data.frequency}` }
            ];
            
            updates.forEach(update => {
                const element = document.querySelector(update.selector);
                if (element) {
                    element.textContent = update.value;
                    console.log(`Êõ¥Êñ∞ÂÆå‰∫Ü: ${update.selector} = ${update.value}`);
                } else {
                    console.error(`Ë¶ÅÁ¥†„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: ${update.selector}`);
                }
            });
        }

        // „Ç∞„É©„ÉïÊõ¥Êñ∞Ê©üËÉΩÔºàChart.jsÁ¢∫ÂÆüÂãï‰ΩúÔºâ
        function updateChart(data) {
            console.log('=== „Ç∞„É©„ÉïÊõ¥Êñ∞ÔºàCPA„Éª„Éï„É™„Éº„ÇØ„Ç®„É≥„Ç∑„ÉºËøΩÂä†ÁâàÔºâ ===', data.chartData);
            
            const canvas = document.getElementById('performanceChart');
            if (!canvas) {
                console.error('CanvasË¶ÅÁ¥†„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
                return;
            }
            
            // Êó¢Â≠ò„ÉÅ„É£„Éº„ÉàÁ†¥Ê£Ñ
            if (window.chartInstance) {
                window.chartInstance.destroy();
                window.chartInstance = null;
            }
            
            try {
                const ctx = canvas.getContext('2d');
                
                window.chartInstance = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: data.chartData.labels,
                        datasets: [
                            {
                                label: 'Ê∂àÂåñÈáëÈ°ç',
                                data: data.chartData.spend,
                                borderColor: '#8b5cf6',
                                backgroundColor: 'rgba(139, 92, 246, 0.1)',
                                tension: 0.4,
                                fill: true,
                                yAxisID: 'y'
                            },
                            {
                                label: 'CTR(%)',
                                data: data.chartData.ctr,
                                borderColor: '#3b82f6',
                                backgroundColor: 'rgba(59, 130, 246, 0.1)',
                                tension: 0.4,
                                fill: true,
                                yAxisID: 'y1'
                            },
                            {
                                label: 'CPM',
                                data: data.chartData.cpm,
                                borderColor: '#10b981',
                                backgroundColor: 'rgba(16, 185, 129, 0.1)',
                                tension: 0.4,
                                fill: true,
                                yAxisID: 'y'
                            },
                            {
                                label: 'CV',
                                data: data.chartData.conversions,
                                borderColor: '#f59e0b',
                                backgroundColor: 'rgba(245, 158, 11, 0.1)',
                                tension: 0.4,
                                fill: true,
                                yAxisID: 'y2'
                            },
                            // ‚úÖ CPAËøΩÂä†
                            {
                                label: 'CPA',
                                data: data.chartData.cpa || [],
                                borderColor: '#ef4444',
                                backgroundColor: 'rgba(239, 68, 68, 0.1)',
                                tension: 0.4,
                                fill: true,
                                yAxisID: 'y'
                            },
                            // ‚úÖ „Éï„É™„Éº„ÇØ„Ç®„É≥„Ç∑„ÉºËøΩÂä†
                            {
                                label: '„Éï„É™„Éº„ÇØ„Ç®„É≥„Ç∑„Éº',
                                data: data.chartData.frequency || [],
                                borderColor: '#6b7280',
                                backgroundColor: 'rgba(107, 114, 128, 0.1)',
                                tension: 0.4,
                                fill: true,
                                yAxisID: 'y1'
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                type: 'linear',
                                display: true,
                                position: 'left',
                                title: {
                                    display: true,
                                    text: 'ÈáëÈ°ç'
                                },
                                beginAtZero: true
                            },
                            y1: {
                                type: 'linear',
                                display: true,
                                position: 'right',
                                title: {
                                    display: true,
                                    text: 'Áéá„ÉªÂõûÊï∞'
                                },
                                grid: {
                                    drawOnChartArea: false,
                                },
                                beginAtZero: true
                            },
                            y2: {
                                type: 'linear',
                                display: false,
                                beginAtZero: true
                            }
                        },
                        plugins: {
                            legend: {
                                position: 'top'
                            }
                        }
                    }
                });
                
                console.log('‚úÖ „Ç∞„É©„Éï‰ΩúÊàêÂÆå‰∫ÜÔºàCPA„Éª„Éï„É™„Éº„ÇØ„Ç®„É≥„Ç∑„ÉºÂê´„ÇÄÔºâ');
                
            } catch (error) {
                console.error('‚ùå „Ç∞„É©„Éï‰ΩúÊàê„Ç®„É©„Éº:', error);
            }
        }

        // „É≠„Éº„Éá„Ç£„É≥„Ç∞Ë°®Á§∫
        function showLoadingState() {
            const loadingElement = document.querySelector('.loading-message');
            if (loadingElement) {
                loadingElement.style.display = 'block';
            }
        }

        function hideLoadingState() {
            const loadingElement = document.querySelector('.loading-message');
            if (loadingElement) {
                loadingElement.style.display = 'none';
            }
        }

        // „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏Ë°®Á§∫
        function showErrorMessage(message) {
            const errorElement = document.querySelector('.error-message');
            if (errorElement) {
                errorElement.textContent = message;
                errorElement.style.display = 'block';
            }
        }

        // „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏ÈùûË°®Á§∫
        function hideErrorMessage() {
            const errorElement = document.querySelector('.error-message');
            if (errorElement) {
                errorElement.style.display = 'none';
            }
        }

        // Ë®≠ÂÆöÂÆå‰∫ÜÊôÇ„ÅÆÂá¶ÁêÜ
        async function handleSetupCompletion() {
            console.log('=== „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„ÉâË®≠ÂÆöÂÆå‰∫ÜÂá¶ÁêÜ ===');
            
            try {
                // Ë®≠ÂÆöÂÆå‰∫ÜÈÄöÁü•„ÇíÈÄÅ‰ø°
                const response = await fetch('/api/send-chatwork-notification', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        messageType: 'setup_completion',
                        message: `[info][title]‚úÖ MetaÂ∫ÉÂëä„É¨„Éù„Éº„Éà„ÉÑ„Éº„É´Ë®≠ÂÆöÂÆå‰∫Ü[/title]
MetaÂ∫ÉÂëä„É¨„Éù„Éº„Éà„ÉÑ„Éº„É´„ÅÆË®≠ÂÆö„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇ

Ë®≠ÂÆöÂÜÖÂÆπ:
- MetaÂ∫ÉÂëäAPI: ÈÄ£Êê∫Ê∏à„Åø
- „ÉÅ„É£„ÉÉ„Éà„ÉØ„Éº„ÇØÈÄöÁü•: ÊúâÂäπ
- Ëá™Âãï„É¨„Éù„Éº„Éà: Ë®≠ÂÆöÊ∏à„Åø

‰ªäÂæå„ÄÅÂÆöÊúü„É¨„Éù„Éº„Éà„Å®„Ç¢„É©„Éº„ÉàÈÄöÁü•„ÇíËá™ÂãïÈÄÅ‰ø°„ÅÑ„Åü„Åó„Åæ„Åô„ÄÇ
[/info]`
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    console.log('‚úÖ Ë®≠ÂÆöÂÆå‰∫ÜÈÄöÁü•ÈÄÅ‰ø°ÊàêÂäü');
                } else {
                    console.error('‚ùå Ë®≠ÂÆöÂÆå‰∫ÜÈÄöÁü•ÈÄÅ‰ø°Â§±Êïó:', result.error);
                }
                
            } catch (error) {
                console.error('‚ùå Ë®≠ÂÆöÂÆå‰∫ÜÂá¶ÁêÜ„Ç®„É©„Éº:', error);
            }
        }

        // Êñ∞„Åó„ÅÑ„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„Éá„Éº„ÇøÂèñÂæóÊ©üËÉΩ
        // „Ç≠„É£„É≥„Éö„Éº„É≥„É™„Çπ„ÉàË™≠„ÅøËæº„Åø
        async function loadCampaigns() {
            try {
                console.log('=== „Ç≠„É£„É≥„Éö„Éº„É≥„É™„Çπ„ÉàË™≠„ÅøËæº„ÅøÈñãÂßã ===');
                const campaignSelect = document.getElementById('selectedCampaign');
                
                const response = await fetch('/api/campaigns');
                const result = await response.json();
                
                if (result.success && result.campaigns) {
                    console.log(`‚úÖ „Ç≠„É£„É≥„Éö„Éº„É≥„É™„Çπ„ÉàÂèñÂæóÊàêÂäü: ${result.campaigns.length}‰ª∂`);
                    
                    // „Ç™„Éó„Ç∑„Éß„É≥„Çí„ÇØ„É™„Ç¢
                    campaignSelect.innerHTML = '<option value="">ÂÖ®„Ç≠„É£„É≥„Éö„Éº„É≥</option>';
                    
                    // „Ç≠„É£„É≥„Éö„Éº„É≥„Ç™„Éó„Ç∑„Éß„É≥„ÇíËøΩÂä†
                    result.campaigns.forEach(campaign => {
                        const option = document.createElement('option');
                        option.value = campaign.id;
                        option.textContent = `${campaign.name} (${campaign.status})`;
                        campaignSelect.appendChild(option);
                    });
                    
                    // Â§âÊõ¥„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„ÇíËøΩÂä†
                    campaignSelect.addEventListener('change', () => {
                        console.log('„Ç≠„É£„É≥„Éö„Éº„É≥ÈÅ∏ÊäûÂ§âÊõ¥:', campaignSelect.value);
                        updateDashboardData();
                    });
                    
                } else {
                    console.error('‚ùå „Ç≠„É£„É≥„Éö„Éº„É≥„É™„Çπ„ÉàÂèñÂæóÂ§±Êïó:', result.error);
                    campaignSelect.innerHTML = '<option value="">„Ç≠„É£„É≥„Éö„Éº„É≥ÂèñÂæóÂ§±Êïó</option>';
                }
            } catch (error) {
                console.error('‚ùå „Ç≠„É£„É≥„Éö„Éº„É≥„É™„Çπ„ÉàË™≠„ÅøËæº„Åø„Ç®„É©„Éº:', error);
                const campaignSelect = document.getElementById('selectedCampaign');
                campaignSelect.innerHTML = '<option value="">„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü</option>';
            }
        }
        
        async function loadDashboardData() {
            try {
                console.log('=== „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„Éá„Éº„ÇøÂèñÂæóÈñãÂßã ===');
                showLoadingState();
                hideErrorMessage();
                
                const response = await fetch('/api/dashboard-data');
                const result = await response.json();
                
                if (result.success) {
                    updateDashboard(result.data);
                    console.log('‚úÖ „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„Éá„Éº„ÇøÊõ¥Êñ∞ÂÆå‰∫Ü');
                } else {
                    showErrorMessage('„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ' + result.message);
                    console.error('‚ùå „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„Éá„Éº„ÇøÂèñÂæóÂ§±Êïó:', result.message);
                }
            } catch (error) {
                showErrorMessage('„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ' + error.message);
                console.error('‚ùå „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº:', error);
            } finally {
                hideLoadingState();
            }
        }

        // „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„ÉâÊõ¥Êñ∞Èñ¢Êï∞
        function updateDashboard(data) {
            // „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊ¶ÇË¶Å„ÇíÊõ¥Êñ∞
            if (data.performance && data.performance.length > 0) {
                const perf = data.performance[data.performance.length - 1];
                
                // „É°„Éà„É™„ÇØ„Çπ„Ç´„Éº„Éâ„ÇíÊõ¥Êñ∞
                updateMetricCard('spend', formatCurrency(perf.spend || 0));
                updateMetricCard('impressions', formatNumber(perf.impressions || 0));
                updateMetricCard('clicks', formatNumber(perf.clicks || 0));
                updateMetricCard('ctr', (perf.ctr || 0) + '%');
                updateMetricCard('cpm', formatCurrency(perf.cpm || 0));
                updateMetricCard('cpc', formatCurrency(perf.cpc || 0));
            }
            
            // „Ç≠„É£„É≥„Éö„Éº„É≥‰∏ÄË¶ß„ÇíÊõ¥Êñ∞
            updateCampaignsList(data.campaigns);
            
            // „Ç§„É≥„Çµ„Ç§„Éà„ÇíÊõ¥Êñ∞
            updateInsightsList(data.insights);
            
            // ÊúÄÁµÇÊõ¥Êñ∞ÊôÇÈñì„ÇíÊõ¥Êñ∞
            updateLastUpdateTime(data.lastUpdate);
        }

        // „É°„Éà„É™„ÇØ„Çπ„Ç´„Éº„ÉâÊõ¥Êñ∞
        function updateMetricCard(type, value) {
            const card = document.querySelector(`.metric-card.${type}`);
            if (card) {
                const valueElement = card.querySelector('.metric-value');
                if (valueElement) {
                    valueElement.textContent = value;
                }
            }
        }

        // „Ç≠„É£„É≥„Éö„Éº„É≥‰∏ÄË¶ßÊõ¥Êñ∞
        function updateCampaignsList(campaigns) {
            const campaignsContainer = document.getElementById('campaigns-list');
            if (!campaignsContainer) return;
            
            campaignsContainer.innerHTML = '';
            
            if (campaigns && campaigns.length > 0) {
                campaigns.forEach(campaign => {
                    const campaignElement = document.createElement('div');
                    campaignElement.className = 'campaign-item';
                    campaignElement.innerHTML = `
                        <div class="campaign-name">${campaign.name}</div>
                        <div class="campaign-status status-${campaign.status.toLowerCase()}">${campaign.status}</div>
                        <div class="campaign-objective">${campaign.objective}</div>
                    `;
                    campaignsContainer.appendChild(campaignElement);
                });
            } else {
                campaignsContainer.innerHTML = '<p>„Ç≠„É£„É≥„Éö„Éº„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì</p>';
            }
        }

        // „Ç§„É≥„Çµ„Ç§„Éà‰∏ÄË¶ßÊõ¥Êñ∞
        function updateInsightsList(insights) {
            const insightsContainer = document.getElementById('insights-list');
            if (!insightsContainer) return;
            
            insightsContainer.innerHTML = '';
            
            if (insights && insights.length > 0) {
                insights.forEach(insight => {
                    const insightElement = document.createElement('div');
                    insightElement.className = `insight-item ${insight.type}`;
                    insightElement.innerHTML = `
                        <div class="insight-message">${insight.message}</div>
                    `;
                    insightsContainer.appendChild(insightElement);
                });
            } else {
                insightsContainer.innerHTML = '<p>ÁèæÂú®„ÄÅÁâπ„Å´ÊîπÂñÑÁÇπ„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì</p>';
            }
        }

        // ÊúÄÁµÇÊõ¥Êñ∞ÊôÇÈñìÊõ¥Êñ∞
        function updateLastUpdateTime(lastUpdate) {
            const lastUpdateElement = document.getElementById('last-update');
            if (lastUpdateElement && lastUpdate) {
                lastUpdateElement.textContent = new Date(lastUpdate).toLocaleString('ja-JP');
            }
        }

        // ÈÄöË≤®„Éï„Ç©„Éº„Éû„ÉÉ„Éà
        function formatCurrency(amount) {
            return new Intl.NumberFormat('ja-JP', {
                style: 'currency',
                currency: 'JPY'
            }).format(amount);
        }

        // Êï∞ÂÄ§„Éï„Ç©„Éº„Éû„ÉÉ„Éà
        function formatNumber(num) {
            return new Intl.NumberFormat('ja-JP').format(num);
        }

        // „Éö„Éº„Ç∏„É≠„Éº„ÉâÊôÇ„ÅÆÂá¶ÁêÜ
        document.addEventListener('DOMContentLoaded', function() {
            // URL„Éë„É©„É°„Éº„Çø„ÅßË®≠ÂÆöÂÆå‰∫Ü„Éï„É©„Ç∞„Çí„ÉÅ„Çß„ÉÉ„ÇØ
            const urlParams = new URLSearchParams(window.location.search);
            if (urlParams.get('setup_completed') === 'true') {
                handleSetupCompletion();
            }
            
            // „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø
            loadDashboardData();
            
            // 5ÂàÜ„Åî„Å®„Å´„Éá„Éº„Çø„ÇíÊõ¥Êñ∞
            setInterval(loadDashboardData, 5 * 60 * 1000);
        });
    </script>
</body>
</html>

