<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>詳細レポート - Meta広告ダッシュボード</title>
    <link rel="stylesheet" href="/style.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f5f6fa;
        }
        
        .app-container {
            display: flex;
            height: 100vh;
        }
        
        .sidebar {
            width: 250px;
            background: #2c3e50;
            color: white;
            height: 100vh;
            overflow-y: auto;
        }
        
        .sidebar-header {
            padding: 20px;
            background: rgba(0,0,0,0.1);
            border-bottom: 1px solid rgba(255,255,255,0.1);
        }
        
        .sidebar-header h3 {
            margin: 0;
            font-size: 18px;
            font-weight: 500;
        }
        
        .sidebar-nav {
            padding: 10px 0;
        }
        
        .nav-item {
            display: block;
            padding: 12px 20px;
            color: rgba(255,255,255,0.8);
            text-decoration: none;
            transition: all 0.3s;
            position: relative;
        }
        
        .nav-item:hover {
            background: rgba(255,255,255,0.1);
            color: white;
        }
        
        .nav-item.active {
            background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        
        .nav-item.active::before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            width: 3px;
            background: #fff;
        }
        
        .main-content {
            flex: 1;
            padding: 30px;
            overflow-y: auto;
        }
        
        .content-header {
            margin-bottom: 30px;
        }
        
        .content-title {
            font-size: 28px;
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 10px;
        }
        
        .report-filters {
            background: white;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            display: flex;
            gap: 15px;
            align-items: center;
        }
        
        .report-filters select, .report-filters input {
            padding: 10px 15px;
            border: 1px solid #ced4da;
            border-radius: 5px;
            font-size: 14px;
        }
        
        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s;
        }
        
        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }
        
        .report-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }
        
        .report-card {
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .report-card.full-width {
            grid-column: 1 / -1;
        }
        
        .card-title {
            font-size: 18px;
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid #f0f0f0;
        }
        
        .chart-container {
            position: relative;
            height: 300px;
        }
        
        .data-table {
            width: 100%;
            border-collapse: collapse;
        }
        
        .data-table th {
            background: #f8f9fa;
            padding: 10px;
            text-align: left;
            font-size: 13px;
            color: #6c757d;
            font-weight: 600;
            border-bottom: 2px solid #dee2e6;
        }
        
        .data-table td {
            padding: 10px;
            border-bottom: 1px solid #dee2e6;
            font-size: 14px;
        }
        
        .data-table tbody tr:hover {
            background: #f8f9fa;
        }
        
        .export-buttons {
            display: flex;
            gap: 10px;
            justify-content: flex-end;
            margin-bottom: 20px;
        }
        
        .btn-export {
            padding: 8px 16px;
            border: 1px solid #28a745;
            background: white;
            color: #28a745;
            border-radius: 5px;
            cursor: pointer;
            font-size: 13px;
            transition: all 0.3s;
        }
        
        .btn-export:hover {
            background: #28a745;
            color: white;
        }
        
        .loading {
            text-align: center;
            padding: 40px;
            color: #6c757d;
        }
        
        .stat-value {
            font-size: 24px;
            font-weight: 700;
            color: #2c3e50;
        }
        
        .stat-label {
            font-size: 12px;
            color: #6c757d;
            margin-top: 5px;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 20px;
            margin-top: 20px;
        }
        
        .stat-item {
            text-align: center;
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- サイドバー -->
        <div class="sidebar">
            <div class="sidebar-header">
                <h3>Meta広告レポート</h3>
            </div>
            <nav class="sidebar-nav">
                <a href="/dashboard" class="nav-item">ダッシュボード</a>
                <a href="/campaigns" class="nav-item">📊 キャンペーン管理</a>
                <a href="/budget-scheduling" class="nav-item">⏰ 予算スケジューリング</a>
                <a href="/detailed-reports" class="nav-item active">📈 詳細レポート</a>
                <a href="/alerts" class="nav-item">アラート内容</a>
                <a href="/alert-history" class="nav-item">アラート履歴</a>
                <a href="/improvement-tasks" class="nav-item">確認事項</a>
                <a href="/improvement-strategies" class="nav-item">改善施策</a>            </nav>
            <div class="sidebar-footer" style="position: absolute; bottom: 20px; left: 0; right: 0; padding: 0 20px;">
                <form action="/logout" method="POST" style="margin: 0;">
                    <button type="submit" class="nav-item" style="
                        display: block;
                        width: 100%;
                        padding: 12px 20px;
                        background: rgba(231, 76, 60, 0.1);
                        color: #e74c3c;
                        border: 1px solid rgba(231, 76, 60, 0.2);
                        border-radius: 5px;
                        text-align: left;
                        cursor: pointer;
                        transition: all 0.3s;
                        font-size: 14px;
                        font-weight: 500;
                    " onmouseover="this.style.background='rgba(231, 76, 60, 0.2)'" onmouseout="this.style.background='rgba(231, 76, 60, 0.1)'">
                        🚪 ログアウト
                    </button>
                </form>
            </div>
        </div>
        
        <!-- メインコンテンツ -->
        <div class="main-content">
            <div class="content-header">
                <h1 class="content-title">📈 詳細レポート</h1>
                <p style="color: #6c757d;">地域別・デバイス別・時間帯別などの詳細な分析レポートを表示します</p>
            </div>
            
            <!-- フィルター -->
            <div class="report-filters">
                <select id="campaignFilter">
                    <option value="all">すべてのキャンペーン</option>
                </select>
                <select id="periodFilter">
                    <option value="last_7d">過去7日間</option>
                    <option value="last_30d">過去30日間</option>
                    <option value="this_month">今月</option>
                    <option value="last_month">先月</option>
                </select>
                <select id="breakdownType">
                    <option value="region">地域別</option>
                    <option value="device_platform">デバイス別</option>
                    <option value="age,gender">年齢・性別</option>
                </select>
                <button class="btn-primary" onclick="loadDetailedReport()">レポート生成</button>
            </div>
            
            <!-- エクスポートボタン -->
            <div class="export-buttons">
                <button class="btn-export" onclick="exportCSV()">📊 CSV出力</button>
                <button class="btn-export" onclick="exportPDF()">📄 PDF出力</button>
            </div>
            
            <!-- レポートグリッド -->
            <div class="report-grid">
                <!-- 地域別パフォーマンス -->
                <div class="report-card">
                    <h2 class="card-title">🌍 地域別パフォーマンス</h2>
                    <div class="chart-container">
                        <canvas id="regionChart"></canvas>
                    </div>
                </div>
                
                <!-- デバイス別パフォーマンス -->
                <div class="report-card">
                    <h2 class="card-title">📱 デバイス別パフォーマンス</h2>
                    <div class="chart-container">
                        <canvas id="deviceChart"></canvas>
                    </div>
                </div>
                
                <!-- 統計サマリー -->
                <div class="report-card full-width">
                    <h2 class="card-title">📊 統計サマリー</h2>
                    <div class="stats-grid">
                        <div class="stat-item">
                            <div class="stat-value" id="totalSpend">¥0</div>
                            <div class="stat-label">総広告費</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-value" id="totalConversions">0</div>
                            <div class="stat-label">総コンバージョン数</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-value" id="avgCPA">¥0</div>
                            <div class="stat-label">平均CPA</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-value" id="avgCTR">0%</div>
                            <div class="stat-label">平均CTR</div>
                        </div>
                    </div>
                </div>
                
                <!-- 詳細データテーブル -->
                <div class="report-card full-width">
                    <h2 class="card-title">📋 詳細データ</h2>
                    <div id="detailTableContainer">
                        <div class="loading">データを読み込み中...</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        let campaigns = [];
        let reportData = null;
        let charts = {};
        
        // ページ読み込み時の初期化
        document.addEventListener('DOMContentLoaded', async () => {
            console.log('ページ初期化開始');
            await loadCampaigns();
            // 初期表示用にデフォルトのレポートを生成
            setTimeout(() => {
                console.log('初期レポート生成');
                loadDetailedReport();
            }, 500);
        });
        
        // キャンペーン一覧を取得
        async function loadCampaigns() {
            try {
                const response = await fetch('/api/campaigns/details?period=last_7d');
                const data = await response.json();
                
                if (data.success) {
                    campaigns = data.campaigns;
                    const select = document.getElementById('campaignFilter');
                    
                    // すべてのキャンペーンオプションを保持
                    const currentValue = select.value;
                    const options = '<option value="all">すべてのキャンペーン</option>' + 
                        campaigns.map(c => 
                            `<option value="${c.id}">${c.name}</option>`
                        ).join('');
                    
                    select.innerHTML = options;
                    
                    // 以前の選択を復元
                    if (currentValue) {
                        select.value = currentValue;
                    }
                }
            } catch (error) {
                console.error('キャンペーン読み込みエラー:', error);
            }
        }
        
        // 詳細レポートを読み込み
        async function loadDetailedReport() {
            try {
                const campaignId = document.getElementById('campaignFilter').value || 'all';
                const period = document.getElementById('periodFilter').value || 'last_7d';
                const breakdownType = document.getElementById('breakdownType').value || 'summary';
                
                console.log('詳細レポート取得:', { campaignId, period, breakdownType });
                
                // 実データを取得
                const response = await fetch(`/api/detailed-report?campaign_id=${campaignId}&period=${period}&breakdown_type=${breakdownType}`);
                const data = await response.json();
                
                console.log('API応答:', data);
                
                if (data.success) {
                    reportData = data;
                    
                    // キャンペーン名を表示
                    const titleElement = document.querySelector('.content-title');
                    if (titleElement && data.campaignName) {
                        titleElement.innerHTML = `📈 詳細レポート - ${data.campaignName}`;
                    }
                    
                    renderCharts();
                    updateStatistics();
                    renderDetailTable();
                    
                    // データソース情報を表示
                    const sourceInfo = data.dataSource === 'meta_api' ? '実データ' : 
                                     data.dataSource === 'estimated' ? '推定データ' : 'データなし';
                    console.log('データソース:', sourceInfo);
                } else {
                    console.error('APIエラー:', data.error);
                    showNoDataMessage();
                }
            } catch (error) {
                console.error('レポート取得エラー:', error);
                showNoDataMessage();
            }
        }
        
        // チャートを描画
        function renderCharts() {
            if (!reportData) return;
            
            // 地域別チャート
            renderRegionChart();
            // デバイス別チャート
            renderDeviceChart();
        }
        
        // 地域別チャート
        function renderRegionChart() {
            const ctx = document.getElementById('regionChart');
            if (!ctx) return;
            
            if (charts.region) charts.region.destroy();
            
            const data = reportData.regionData || {};
            const labels = Object.keys(data);
            const values = labels.map(label => data[label].impressions || 0);
            
            if (labels.length === 0) {
                // データがない場合のデフォルト表示
                labels.push('データなし');
                values.push(1);
            }
            
            charts.region = new Chart(ctx.getContext('2d'), {
                type: 'doughnut',
                data: {
                    labels: labels,
                    datasets: [{
                        data: values,
                        backgroundColor: [
                            '#667eea', '#764ba2', '#f093fb', '#4facfe', '#43e97b'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });
        }
        
        // デバイス別チャート
        function renderDeviceChart() {
            const ctx = document.getElementById('deviceChart');
            if (!ctx) return;
            
            if (charts.device) charts.device.destroy();
            
            const data = reportData.deviceData || {};
            const labels = Object.keys(data);
            const values = labels.map(label => data[label].impressions || 0);
            
            if (labels.length === 0) {
                labels.push('データなし');
                values.push(1);
            }
            
            charts.device = new Chart(ctx.getContext('2d'), {
                type: 'pie',
                data: {
                    labels: labels,
                    datasets: [{
                        data: values,
                        backgroundColor: ['#667eea', '#764ba2', '#f093fb']
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });
        }
        
        // 統計情報を更新
        function updateStatistics() {
            if (!reportData || !reportData.statistics) {
                document.getElementById('totalSpend').textContent = '¥0';
                document.getElementById('totalConversions').textContent = '0';
                document.getElementById('avgCPA').textContent = '¥0';
                document.getElementById('avgCTR').textContent = '0%';
                return;
            }
            
            const stats = reportData.statistics;
            document.getElementById('totalSpend').textContent = '¥' + (stats.totalSpend || 0).toLocaleString();
            document.getElementById('totalConversions').textContent = stats.totalConversions || 0;
            document.getElementById('avgCPA').textContent = '¥' + (stats.avgCPA || 0).toLocaleString();
            document.getElementById('avgCTR').textContent = (stats.avgCTR || 0) + '%';
        }
        
        // 詳細テーブルを描画
        function renderDetailTable() {
            const container = document.getElementById('detailTableContainer');
            if (!container) return;
            
            console.log('詳細テーブル描画開始', reportData);
            
            if (!reportData) {
                container.innerHTML = '<div class="loading">データを読み込み中...</div>';
                return;
            }
            
            let tableRows = [];
            
            // 地域データ
            if (reportData.regionData && Object.keys(reportData.regionData).length > 0) {
                Object.entries(reportData.regionData).forEach(([region, data]) => {
                    tableRows.push({
                        category: '地域',
                        name: region,
                        impressions: data.impressions || 0,
                        clicks: data.clicks || 0,
                        spend: data.spend || 0,
                        ctr: data.impressions > 0 ? ((data.clicks / data.impressions) * 100).toFixed(2) : 0
                    });
                });
            }
            
            // デバイスデータ
            if (reportData.deviceData && Object.keys(reportData.deviceData).length > 0) {
                Object.entries(reportData.deviceData).forEach(([device, data]) => {
                    tableRows.push({
                        category: 'デバイス',
                        name: device,
                        impressions: data.impressions || 0,
                        clicks: data.clicks || 0,
                        spend: data.spend || 0,
                        ctr: data.impressions > 0 ? ((data.clicks / data.impressions) * 100).toFixed(2) : 0
                    });
                });
            }
            
            // 年齢・性別データ
            if (reportData.ageGenderData && Object.keys(reportData.ageGenderData).length > 0) {
                Object.entries(reportData.ageGenderData).forEach(([key, data]) => {
                    if (data.age && data.gender) {
                        tableRows.push({
                            category: '年齢・性別',
                            name: `${data.age} ${data.gender}`,
                            impressions: data.impressions || 0,
                            clicks: data.clicks || 0,
                            spend: data.spend || 0,
                            ctr: data.impressions > 0 ? ((data.clicks / data.impressions) * 100).toFixed(2) : 0
                        });
                    }
                });
            }
            
            if (tableRows.length === 0) {
                container.innerHTML = '<div class="loading">表示するデータがありません</div>';
                return;
            }
            
            const html = `
                <table class="data-table">
                    <thead>
                        <tr>
                            <th>カテゴリ</th>
                            <th>セグメント</th>
                            <th>インプレッション</th>
                            <th>クリック</th>
                            <th>消化額</th>
                            <th>CTR</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${tableRows.map(row => `
                            <tr>
                                <td>${row.category}</td>
                                <td>${row.name}</td>
                                <td>${row.impressions.toLocaleString()}</td>
                                <td>${row.clicks.toLocaleString()}</td>
                                <td>¥${Math.round(row.spend).toLocaleString()}</td>
                                <td>${row.ctr}%</td>
                            </tr>
                        `).join('')}
                    </tbody>
                </table>
            `;
            container.innerHTML = html;
        }
        
        // データなしメッセージを表示
        function showNoDataMessage() {
            // チャートを初期化
            renderCharts();
            updateStatistics();
            
            const container = document.getElementById('detailTableContainer');
            if (container) {
                container.innerHTML = '<div class="loading">データを取得できませんでした。キャンペーンを選択してレポート生成をクリックしてください。</div>';
            }
        }
        
        // CSV出力
        function exportCSV() {
            if (!reportData || Object.keys(reportData.regionData || {}).length === 0) {
                alert('レポートデータが読み込まれていません');
                return;
            }
            
            // CSVデータの作成
            let csvContent = 'カテゴリ,項目,インプレッション,クリック,消化額\n';
            
            // 地域データ
            if (reportData.regionData) {
                Object.entries(reportData.regionData).forEach(([region, data]) => {
                    csvContent += `地域,${region},${data.impressions},${data.clicks},${data.spend}\n`;
                });
            }
            
            // デバイスデータ
            if (reportData.deviceData) {
                Object.entries(reportData.deviceData).forEach(([device, data]) => {
                    csvContent += `デバイス,${device},${data.impressions},${data.clicks},${data.spend}\n`;
                });
            }
            
            // 統計サマリー
            if (reportData.statistics) {
                csvContent += `\n統計サマリー\n`;
                csvContent += `総広告費,${reportData.statistics.totalSpend}\n`;
                csvContent += `総コンバージョン,${reportData.statistics.totalConversions}\n`;
                csvContent += `平均CPA,${reportData.statistics.avgCPA}\n`;
                csvContent += `平均CTR,${reportData.statistics.avgCTR}%\n`;
            }
            
            // BOMを追加（Excel文字化け対策）
            const bom = new Uint8Array([0xEF, 0xBB, 0xBF]);
            const blob = new Blob([bom, csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            const url = URL.createObjectURL(blob);
            
            const campaignName = document.getElementById('campaignFilter').selectedOptions[0].text;
            const period = document.getElementById('periodFilter').value;
            const fileName = `詳細レポート_${campaignName}_${period}_${new Date().toISOString().split('T')[0]}.csv`;
            
            link.setAttribute('href', url);
            link.setAttribute('download', fileName);
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
        
        // PDF出力
        function exportPDF() {
            if (!reportData || Object.keys(reportData.regionData || {}).length === 0) {
                alert('レポートデータが読み込まれていません');
                return;
            }
            
            // 印刷用スタイルを一時的に適用
            const printStyles = `
                <style id="print-styles">
                    @media print {
                        body { margin: 0; padding: 20px; }
                        .sidebar { display: none !important; }
                        .export-buttons { display: none !important; }
                        .report-filters { display: none !important; }
                        .main-content { width: 100%; max-width: none; }
                        .report-card { page-break-inside: avoid; }
                        canvas { max-height: 300px !important; }
                    }
                </style>
            `;
            
            // スタイルを追加
            document.head.insertAdjacentHTML('beforeend', printStyles);
            
            // タイトルを追加
            const campaignName = document.getElementById('campaignFilter').selectedOptions[0].text;
            const period = document.getElementById('periodFilter').selectedOptions[0].text;
            const title = document.createElement('h1');
            title.id = 'pdf-title';
            title.style.textAlign = 'center';
            title.innerHTML = `Meta広告 詳細レポート<br>${campaignName} - ${period}<br>${new Date().toLocaleDateString('ja-JP')}`;
            document.querySelector('.main-content').insertBefore(title, document.querySelector('.content-header'));
            
            // 印刷ダイアログを開く
            window.print();
            
            // クリーンアップ
            setTimeout(() => {
                document.getElementById('print-styles')?.remove();
                document.getElementById('pdf-title')?.remove();
            }, 1000);
        }
    </script>
</body>
</html>