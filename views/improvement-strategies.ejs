<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>改善施策 - Meta広告ダッシュボード</title>
    <link rel="stylesheet" href="/style.css">
    <style>
        /* 改善施策ページ専用スタイル */
        .app-container {
            display: flex;
            min-height: 100vh;
            background: #f5f6fa;
        }

        .main-content {
            flex: 1;
            padding: 20px;
            background-color: #f9fafb;
        }

        .strategies-page {
            max-width: 1000px;
            margin: 0 auto;
        }

        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding: 16px 20px;
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .page-header h2 {
            margin: 0;
            color: #374151;
            font-size: 24px;
            font-weight: 600;
        }

        .header-info {
            color: #6b7280;
            font-size: 14px;
        }

        .no-content {
            text-align: center;
            padding: 60px 20px;
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .no-content-icon {
            font-size: 48px;
            margin-bottom: 16px;
            display: block;
        }

        .no-content h3 {
            color: #059669;
            margin: 0;
            font-size: 18px;
        }

        .content-container {
            display: flex;
            flex-direction: column;
            gap: 16px;
        }

        /* アラート内容風のスタイル */
        .alert-card {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .alert-header {
            background-color: #dbeafe;
            padding: 14px 16px;
            border-bottom: 1px solid #3b82f6;
        }

        .alert-title-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
        }

        .alert-icon {
            font-size: 18px;
            margin-right: 8px;
        }

        .alert-metric {
            font-weight: 600;
            color: #1e40af;
            font-size: 16px;
        }

        .alert-timestamp {
            color: #1d4ed8;
            font-size: 12px;
        }

        .alert-message-row {
            color: #1e40af;
            font-size: 14px;
            line-height: 1.4;
        }

        .alert-content {
            padding: 0;
        }

        .strategy-item {
            padding: 14px 16px;
            border-bottom: 1px solid #f3f4f6;
            background-color: #f0f9ff;
        }

        .strategy-item:last-child {
            border-bottom: none;
        }

        .item-priority {
            display: flex;
            align-items: center;
            margin-bottom: 8px;
        }

        .priority-indicator {
            margin-right: 8px;
            font-size: 16px;
        }

        .priority-text {
            font-weight: 500;
            color: #374151;
            flex: 1;
        }

        .item-timestamp {
            color: #6b7280;
            font-size: 12px;
            margin-bottom: 8px;
        }

        .strategy-actions {
            color: #374151;
            font-size: 14px;
        }

        .action-item {
            margin-bottom: 8px;
            line-height: 1.5;
        }

        .action-item:last-child {
            margin-bottom: 0;
        }

        /* レスポンシブ対応 */
        @media (max-width: 768px) {
            .main-content {
                margin-left: 0;
                padding: 10px;
            }
            
            .page-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 8px;
            }
            
            .alert-title-row {
                flex-direction: column;
                align-items: flex-start;
                gap: 8px;
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- サイドバー -->
        <div class="sidebar">
            <div class="sidebar-header">
                <h3>Meta広告レポート</h3>
            </div>
            <nav class="sidebar-nav">
                <a href="/dashboard" class="nav-item">ダッシュボード</a>
                <a href="/alerts" class="nav-item">アラート内容</a>
                <a href="/alert-history" class="nav-item">アラート履歴</a>
                <a href="/improvement-tasks" class="nav-item">確認事項</a>
                <a href="/improvement-strategies" class="nav-item active">改善施策</a>
                <a href="/chatwork-test" class="nav-item">チャットワークテスト</a>
            </nav>
        </div>

        <!-- メインコンテンツ -->
        <div class="main-content">
            <div class="strategies-page">
                <div class="page-header">
                    <h2>🔧 改善施策</h2>
                    <div class="header-info">
                        改善項目: <span id="strategyCount">8</span>件 
                        最終更新: <span id="lastUpdateTime"></span>
                    </div>
                </div>

                <div id="content">
                    <!-- コンテンツはJavaScriptで生成 -->
                </div>
            </div>
        </div>
    </div>

    <script>
        // 改善施策の定義
        const improvementRules = {
            '予算消化率': {
                '配信されているか確認': [
                    '管理画面の上の運用しているキャンペーンが緑でアクティブになっているか、キャンペーンを確認する',
                    '決済ができておらず配信エラーになっていないか、請求と支払いを確認する',
                    'クリエイティブが審査落ちしていて配信エラーになっていないか、広告を確認する'
                ],
                '配信するクリエイティブが枯れている': [
                    '過去7日間ベースでCV数が0もしくは目標CPAに達していないクリエイティブを差し替える'
                ],
                '配信するユーザー層が悪いのか': [
                    '広告セット内の年齢・性別・エリア・興味関心・カスタムオーディエンス・配信媒体を広げて配信する（獲得できないユーザー層には配信しない）',
                    'キャンペーンを複製して配信するユーザー層を変える（設定は変えずに）'
                ]
            },
            'CTR': {
                '配信しているクリエイティブが刺さっていないor枯れている': [
                    '過去7日間ベースで予算が寄っておらずCVも取れていないクリエイティブを差し替える',
                    '過去7日間ベースで予算は寄っているけど目標CPAに達しておらずクリック率も目標以下のクリエイティブは差し替える'
                ],
                'フリークエンシーが2.5%以上ある': [
                    '広告セット内の年齢・性別・エリア・興味関心・カスタムオーディエンス・配信媒体を広げて配信する（獲得できないユーザー層には配信しない）',
                    'キャンペーンを複製して配信するユーザー層を変える（設定は変えずに）'
                ],
                '配信するユーザー層が見込み顧客ではない': [
                    '広告セット内の年齢・性別・エリア・興味関心・カスタムオーディエンス・配信媒体を狭めて配信する（獲得できないユーザー層には配信しない）',
                    '類似オーディエンスを活用して、見込み層の高いユーザーに配信する'
                ]
            },
            'CPM': {
                '最適なCPM値で配信できていない': [
                    '過去7日間ベースでCV数が獲得できていない、CPAが高騰しているクリエイティブを差し替える',
                    '広告セット内の年齢・性別・エリア・興味関心・カスタムオーディエンス・配信媒体を狭めて配信する（獲得できないユーザー層には配信しない）',
                    'キャンペーンを複製する'
                ]
            },
            'CV': {
                'クリエイティブが刺さっていないorクリエイティブが枯れている': [
                    '過去7日間ベースでCV数が獲得できていない、CPAが高騰しているクリエイティブを差し替える',
                    '過去7日間ベースでCVがついておらず配信が寄っていない（予算消化ができていない）クリエイティブを差し替える',
                    '訴求軸が違うクリエイティブを配信する',
                    '動画広告を配信する'
                ],
                '配信するユーザー層がズレている': [
                    '広告セット内の年齢・性別・エリア・興味関心・カスタムオーディエンス・配信媒体を狭めて配信する（獲得できないユーザー層には配信しない）',
                    '類似オーディエンスを活用して、見込み層の高いユーザーに配信する',
                    'キャンペーンを複製して配信するユーザー層を変える',
                    '広告セット内の年齢・性別・エリア・興味関心・カスタムオーディエンス・配信媒体を広げて配信する（獲得できないユーザー層には配信しない）'
                ],
                'LPで離脱されている': [
                    'ヒートマップを導入して離脱箇所が多いところを改善する（clarityがおすすめ）',
                    'CTAの文言・デザイン・アクションを変更する',
                    'FVを改善する'
                ]
            },
            'CPA': {
                'クリエイティブが刺さっていないorクリエイティブが枯れている': [
                    '過去7日間ベースでCV数が獲得できていない、CPAが高騰しているクリエイティブを差し替える',
                    '過去7日間ベースでCVがついておらず配信が寄っていない（予算消化ができていない）クリエイティブを差し替える',
                    '訴求軸が違うクリエイティブを配信する',
                    '動画広告を配信する'
                ],
                '配信するユーザー層がズレている': [
                    '広告セット内の年齢・性別・エリア・興味関心・カスタムオーディエンス・配信媒体を狭めて配信する（獲得できないユーザー層には配信しない）',
                    '類似オーディエンスを活用して、見込み層の高いユーザーに配信する',
                    'キャンペーンを複製して配信するユーザー層を変える',
                    '広告セット内の年齢・性別・エリア・興味関心・カスタムオーディエンス・配信媒体を広げて配信する（獲得できないユーザー層には配信しない）'
                ],
                '学習データが適切ではない': [
                    'ピクセルを作成し直してデータを再度学習し直す'
                ],
                'LPで離脱されている': [
                    'ヒートマップを導入して離脱箇所が多いところを改善する（clarityがおすすめ）',
                    'CTAの文言・デザイン・アクションを変更する',
                    'FVを改善する'
                ]
            }
        };

        // 確認事項リスト（checklistRules.jsと同期）
        const checklistItems = {
            '予算消化率': [
                { priority: 1, title: '配信されているか確認', description: '広告がアクティブになっているか' },
                { priority: 2, title: '配信するクリエイティブが枯れている', description: 'CV数が0もしくは目標CPAの到達しておらず予算も消化されていない' },
                { priority: 3, title: '配信するユーザー層が悪いのか', description: '配信するユーザー層が悪いと表示されないケースがある' }
            ],
            'CTR': [
                { priority: 1, title: '配信しているクリエイティブが刺さっていないor枯れている', description: 'ありきたりのクリエイティブでユーザーに見られていない\n7日間ベースでずっと配信していて、飽きられている' },
                { priority: 2, title: 'フリークエンシーが2.5%以上ある', description: '同じユーザーばかりに配信されていて、見飽きられている' },
                { priority: 3, title: '配信するユーザー層が見込み顧客ではない', description: 'サービスに合ったユーザー層に配信されていないので、スルーされている' }
            ],
            'CPM': [
                { priority: 1, title: '最適なCPM値で配信できていない', description: 'クリエイティブが刺さっていないため入力したCPMから乖離している\n配信するユーザー層が悪いため入力したCPMから乖離している' }
            ],
            'CV': [
                { priority: 1, title: 'クリエイティブが刺さっていないorクリエイティブが枯れている', description: '入口のクリエイティブで魅力的に魅せれていないor飽きられてしまっている' },
                { priority: 2, title: '配信するユーザー層がズレている', description: '購入見込みの低いユーザーに配信されている' },
                { priority: 3, title: 'LPで離脱されている', description: 'LPの内容がユーザーに刺さっていない' }
            ],
            'CPA': [
                { priority: 1, title: 'クリエイティブが刺さっていないorクリエイティブが枯れている', description: '' },
                { priority: 2, title: '配信するユーザー層がズレている', description: '購入見込みの低いユーザーに配信されている' },
                { priority: 3, title: '学習データが適切ではない', description: 'ピクセルで学習しているデータが誤った方向に進んでいる' },
                { priority: 4, title: 'LPで離脱されている', description: 'LPの内容がユーザーに刺さっていない' }
            ]
        };

        // ページ読み込み時の初期化
        document.addEventListener('DOMContentLoaded', async function() {
            console.log('=== 改善施策ページ: 初期化開始 ===');
            await generateStrategies();
            updateLastUpdateTime();
        });

        // CPAアラートメッセージを生成
        async function generateCPAAlertMessage(targetCPA) {
            try {
                const dashboardResponse = await fetch('/api/dashboard-data');
                const dashboardData = await dashboardResponse.json();
                
                let currentCPA = targetCPA + 2000; // デフォルト値
                if (dashboardData.success && dashboardData.data && dashboardData.data.cpa) {
                    currentCPA = dashboardData.data.cpa;
                }
                
                return `CPAが${targetCPA.toLocaleString()}円以上の${Math.round(currentCPA).toLocaleString()}円が続いています`;
            } catch (error) {
                console.error('CPA alert message generation error:', error);
                return `CPAが${targetCPA.toLocaleString()}円以上が続いています`;
            }
        }

        // 改善施策を生成（実際のゴール設定に基づく）
        async function generateStrategies() {
            console.log('改善施策を生成開始');
            
            let testAlerts = [];
            
            try {
                // 実際のアラート履歴から現在のアラートを取得
                const alertResponse = await fetch('/api/alert-history');
                const alertData = await alertResponse.json();
                
                if (alertData.success && alertData.history && alertData.history.length > 0) {
                    // APIから取得した実際のアラートを使用
                    testAlerts = alertData.history.slice(0, 10); // 最新10件
                    console.log('実際のAPIアラートを使用:', testAlerts.length + '件');
                    console.log('アラートデータ詳細:', testAlerts.map(a => ({ 
                        metric: a.metric, 
                        checkItems: a.checkItems ? a.checkItems.length : 0,
                        improvements: a.improvements ? Object.keys(a.improvements).length : 0,
                        status: a.status
                    })));
                    console.log('取得したアラート履歴の生データ:', alertData.history);
                } else {
                    console.log('アクティブアラートなし、APIデータを基にデモアラートを生成');
                    
                    // setup.json から設定を読み込む
                    const response = await fetch('/api/check-saved-meta-data');
                    const setupData = await response.json();
                    
                    // 実際のダッシュボードデータを取得
                    const dashboardResponse = await fetch('/api/dashboard-data');
                    const dashboardData = await dashboardResponse.json();
                    
                    let goalType = '';
                    let goals = {};
                    let currentMetrics = {
                        budgetRate: 65,
                        ctr: 1.5,
                        conversions: 0,
                        cpa: 12000,
                        cpm: 1500
                    };
                    
                    if (setupData.success && setupData.hasConfig) {
                        goalType = setupData.data.goal?.type || '';
                        
                        // セットアップページと同じ goalTargets を使用
                        const goalTargets = {
                            toC_newsletter: { '予算消化率': 80, 'CTR': 2.5, 'CV': 1, 'CPA': 2000, '日予算': 1000, 'CPM': 1000 },
                            toC_line: { '予算消化率': 80, 'CTR': 2.5, 'CV': 1, 'CPA': 1000, '日予算': 1000, 'CPM': 800 },
                            toC_phone: { '予算消化率': 80, 'CTR': 2.0, 'CV': 1, 'CPA': 3000, '日予算': 1500, 'CPM': 1200 },
                            toC_purchase: { '予算消化率': 80, 'CTR': 1.8, 'CV': 1, 'CPA': 5000, '日予算': 2000, 'CPM': 1500 },
                            toB_newsletter: { '予算消化率': 80, 'CTR': 1.5, 'CV': 1, 'CPA': 15000, '日予算': 3000, 'CPM': 2000 },
                            toB_line: { '予算消化率': 80, 'CTR': 1.5, 'CV': 1, 'CPA': 12000, '日予算': 2500, 'CPM': 1800 },
                            toB_phone: { '予算消化率': 80, 'CTR': 1.2, 'CV': 1, 'CPA': 20000, '日予算': 4000, 'CPM': 2500 },
                            toB_purchase: { '予算消化率': 80, 'CTR': 1.0, 'CV': 1, 'CPA': 30000, '日予算': 5000, 'CPM': 3000 }
                        };
                        
                        goals = goalTargets[goalType] || {};
                    }
                    
                    // 実際のAPIデータを取得
                    if (dashboardData.success && dashboardData.data) {
                        currentMetrics = {
                            budgetRate: dashboardData.data.budgetRate || currentMetrics.budgetRate,
                            ctr: dashboardData.data.ctr || currentMetrics.ctr,
                            conversions: dashboardData.data.conversions || currentMetrics.conversions,
                            cpa: dashboardData.data.cpa || currentMetrics.cpa,
                            cpm: dashboardData.data.cpm || currentMetrics.cpm
                        };
                    }
                    
                    // 実際のデータに基づいてアラートを生成
                    testAlerts = [
                        {
                            id: 1,
                            metric: '予算消化率',
                            message: `予算消化率が${goals['予算消化率'] || 80}%以下の${Math.round(currentMetrics.budgetRate)}%が3日間続いています`,
                            severity: 'medium',
                            timestamp: new Date().toISOString()
                        },
                        {
                            id: 2,
                            metric: 'CTR',
                            message: `CTRが${goals['CTR'] || 2.0}%以下の${currentMetrics.ctr.toFixed(1)}%が3日間続いています`,
                            severity: 'medium',
                            timestamp: new Date().toISOString()
                        },
                        {
                            id: 3,
                            metric: 'CV',
                            message: `CV数が${goals['CV'] || 1}件以下の${currentMetrics.conversions}件が続いています`,
                            severity: 'high',
                            timestamp: new Date().toISOString()
                        },
                        {
                            id: 4,
                            metric: 'CPA',
                            message: `CPAが目標の120%（${Math.round((goals['CPA'] || 10000) * 1.2).toLocaleString()}円）以上の${Math.round(currentMetrics.cpa).toLocaleString()}円が2日間続いています`,
                            severity: 'high',
                            timestamp: new Date().toISOString()
                        }
                    ];
                }
                
            } catch (error) {
                console.error('設定読み込みエラー:', error);
                // エラー時も実際のAPIデータを取得を試行
                let fallbackMetrics = { budgetRate: 65, ctr: 1.5, conversions: 0, cpa: 12000 };
                try {
                    const dashboardResponse = await fetch('/api/dashboard-data');
                    const dashboardData = await dashboardResponse.json();
                    if (dashboardData.success && dashboardData.data) {
                        fallbackMetrics = {
                            budgetRate: dashboardData.data.budgetRate || fallbackMetrics.budgetRate,
                            ctr: dashboardData.data.ctr || fallbackMetrics.ctr,
                            conversions: dashboardData.data.conversions || fallbackMetrics.conversions,
                            cpa: dashboardData.data.cpa || fallbackMetrics.cpa
                        };
                    }
                } catch (fetchError) {
                    console.error('Dashboard data fetch error in fallback:', fetchError);
                }
                
                testAlerts = [
                    { id: 1, metric: '予算消化率', message: `予算消化率が80%以下の${Math.round(fallbackMetrics.budgetRate)}%が3日間続いています`, level: 'medium', timestamp: new Date().toISOString() },
                    { id: 2, metric: 'CTR', message: `CTRが2%以下の${fallbackMetrics.ctr.toFixed(1)}%が3日間続いています`, level: 'medium', timestamp: new Date().toISOString() },
                    { id: 3, metric: 'CV', message: `CV数が1件以下の${fallbackMetrics.conversions}件が続いています`, level: 'high', timestamp: new Date().toISOString() },
                    { id: 4, metric: 'CPA', message: `CPAが目標の120%（12,000円）以上の${Math.round(fallbackMetrics.cpa).toLocaleString()}円が2日間続いています`, level: 'high', timestamp: new Date().toISOString() }
                ];
            }

            const generatedStrategies = [];
            
            // 重複を防ぐためのメトリック別処理
            const processedMetrics = new Set();
            
            testAlerts.forEach(alert => {
                const metric = alert.metric;
                
                // 既に処理済みのメトリックはスキップ
                if (processedMetrics.has(metric)) {
                    return;
                }
                processedMetrics.add(metric);
                
                // APIから取得した確認事項と改善施策を優先使用
                const items = (alert.checkItems && alert.checkItems.length > 0) 
                    ? alert.checkItems 
                    : (checklistItems[metric] || []);
                const improvements = (alert.improvements && Object.keys(alert.improvements).length > 0)
                    ? alert.improvements
                    : (improvementRules[metric] || {});
                
                console.log(`${metric} - 確認事項:`, items);
                console.log(`${metric} - 改善施策:`, improvements);
                
                items.forEach(item => {
                    const actions = improvements[item.title] || [];
                    console.log(`"${item.title}" に対するアクション:`, actions);
                    
                    if (actions.length > 0) {
                        generatedStrategies.push({
                            metric: metric,
                            alertMessage: alert.message,
                            alertLevel: alert.severity || alert.level,
                            timestamp: alert.timestamp,
                            checklistTitle: item.title,
                            priority: item.priority,
                            actions: actions
                        });
                    }
                });
            });

            // 改善施策数を更新
            document.getElementById('strategyCount').textContent = generatedStrategies.length;
            
            console.log('生成された改善施策:', generatedStrategies);
            renderStrategies(generatedStrategies);
        }

        // 改善施策を表示
        function renderStrategies(strategies) {
            const contentDiv = document.getElementById('content');
            
            if (strategies.length === 0) {
                contentDiv.innerHTML = `
                    <div class="no-content">
                        <div class="no-content-icon">✅</div>
                        <h3>改善が必要な項目はありません。</h3>
                    </div>
                `;
            } else {
                const strategiesHTML = strategies.map((strategy, index) => `
                    <div class="alert-card">
                        <!-- アラート内容と同じスタイルのヘッダー -->
                        <div class="alert-header">
                            <div class="alert-title-row">
                                <span class="alert-icon">🔧</span>
                                <span class="alert-metric">${strategy.metric}</span>
                                <span class="alert-timestamp">
                                    ${new Date(strategy.timestamp).toLocaleString('ja-JP')}
                                </span>
                            </div>
                            <div class="alert-message-row">
                                ${strategy.alertMessage}
                            </div>
                        </div>

                        <!-- 改善施策内容 -->
                        <div class="alert-content">
                            <div class="strategy-item">
                                <div class="item-priority">
                                    <span class="priority-indicator">🔧</span>
                                    <span class="priority-text">${strategy.checklistTitle}</span>
                                </div>
                                <div class="item-timestamp">
                                    ${new Date(strategy.timestamp).toLocaleString('ja-JP')}
                                </div>
                                <div class="strategy-actions">
                                    ${strategy.actions.map((action, actionIndex) => `
                                        <div class="action-item">
                                            ${actionIndex + 1}. ${action}
                                        </div>
                                    `).join('')}
                                </div>
                            </div>
                        </div>
                    </div>
                `).join('');
                
                contentDiv.innerHTML = strategiesHTML;
            }
        }

        // 最終更新時間を更新
        function updateLastUpdateTime() {
            document.getElementById('lastUpdateTime').textContent = new Date().toLocaleString('ja-JP');
        }

        // 10秒ごとに更新
        setInterval(() => {
            updateLastUpdateTime();
        }, 10 * 1000);
    </script>
</body>
</html> 