<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>マルチアカウント管理 - Meta広告ダッシュボード</title>
    <link rel="stylesheet" href="/style.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f5f6fa;
        }
        
        .app-container {
            display: flex;
            height: 100vh;
        }
        
        .sidebar {
            width: 250px;
            background: #2c3e50;
            color: white;
            height: 100vh;
            overflow-y: auto;
        }
        
        .sidebar-header {
            padding: 20px;
            background: rgba(0,0,0,0.1);
            border-bottom: 1px solid rgba(255,255,255,0.1);
        }
        
        .sidebar-header h3 {
            margin: 0;
            font-size: 18px;
            font-weight: 500;
        }
        
        .sidebar-nav {
            padding: 10px 0;
        }
        
        .nav-item {
            display: block;
            padding: 12px 20px;
            color: rgba(255,255,255,0.8);
            text-decoration: none;
            transition: all 0.3s;
            position: relative;
        }
        
        .nav-item:hover {
            background: rgba(255,255,255,0.1);
            color: white;
        }
        
        .nav-item.active {
            background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        
        .nav-item.active::before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            width: 3px;
            background: #fff;
        }
        
        .main-content {
            flex: 1;
            padding: 30px;
            overflow-y: auto;
        }
        
        .content-header {
            margin-bottom: 30px;
        }
        
        .content-title {
            font-size: 28px;
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 10px;
        }
        
        .content-subtitle {
            color: #666;
            font-size: 14px;
        }
        
        .account-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            border-radius: 12px;
            margin-bottom: 30px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        }
        
        .current-account {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .account-info h2 {
            margin: 0 0 10px 0;
            font-size: 24px;
        }
        
        .account-details {
            display: flex;
            gap: 30px;
            margin-top: 15px;
        }
        
        .detail-item {
            display: flex;
            flex-direction: column;
        }
        
        .detail-label {
            font-size: 12px;
            opacity: 0.8;
            margin-bottom: 4px;
        }
        
        .detail-value {
            font-size: 18px;
            font-weight: 600;
        }
        
        .btn-switch {
            padding: 10px 24px;
            background: white;
            color: #667eea;
            border: none;
            border-radius: 6px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .btn-switch:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }
        
        .accounts-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .account-card {
            background: white;
            padding: 25px;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            transition: all 0.3s;
            cursor: pointer;
            position: relative;
        }
        
        .account-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 20px rgba(0,0,0,0.1);
        }
        
        .account-card.active {
            border: 2px solid #667eea;
        }
        
        .active-badge {
            position: absolute;
            top: 15px;
            right: 15px;
            background: #10b981;
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 11px;
            font-weight: 600;
        }
        
        .account-name {
            font-size: 18px;
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 10px;
        }
        
        .account-id {
            font-size: 13px;
            color: #999;
            margin-bottom: 20px;
            font-family: monospace;
        }
        
        .account-stats {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
            margin-bottom: 20px;
        }
        
        .stat-item {
            padding: 10px;
            background: #f8f9fa;
            border-radius: 6px;
        }
        
        .stat-label {
            font-size: 11px;
            color: #999;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 4px;
        }
        
        .stat-value {
            font-size: 20px;
            font-weight: 600;
            color: #2c3e50;
        }
        
        .account-actions {
            display: flex;
            gap: 10px;
        }
        
        .btn {
            padding: 8px 16px;
            border: none;
            border-radius: 6px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
            flex: 1;
            text-align: center;
        }
        
        .btn-primary {
            background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        
        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
        }
        
        .btn-secondary {
            background: #e5e7eb;
            color: #4a5568;
        }
        
        .btn-secondary:hover {
            background: #d1d5db;
        }
        
        .btn-danger {
            background: #fee2e2;
            color: #991b1b;
        }
        
        .btn-danger:hover {
            background: #fecaca;
        }
        
        .add-account-card {
            background: white;
            border: 2px dashed #cbd5e0;
            padding: 25px;
            border-radius: 12px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s;
            min-height: 250px;
        }
        
        .add-account-card:hover {
            border-color: #667eea;
            transform: translateY(-5px);
            box-shadow: 0 5px 20px rgba(0,0,0,0.1);
        }
        
        .add-icon {
            font-size: 48px;
            color: #cbd5e0;
            margin-bottom: 15px;
        }
        
        .add-text {
            color: #4a5568;
            font-weight: 500;
        }
        
        .performance-summary {
            background: white;
            padding: 25px;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            margin-bottom: 30px;
        }
        
        .section-title {
            font-size: 20px;
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 20px;
        }
        
        .summary-grid {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 20px;
        }
        
        .summary-item {
            text-align: center;
        }
        
        .summary-label {
            font-size: 12px;
            color: #999;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 8px;
        }
        
        .summary-value {
            font-size: 28px;
            font-weight: 600;
            color: #2c3e50;
        }
        
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.5);
            z-index: 1000;
            align-items: center;
            justify-content: center;
        }
        
        .modal.active {
            display: flex;
        }
        
        .modal-content {
            background: white;
            padding: 30px;
            border-radius: 12px;
            max-width: 500px;
            width: 90%;
            max-height: 80vh;
            overflow-y: auto;
        }
        
        .modal-header {
            margin-bottom: 20px;
        }
        
        .modal-title {
            font-size: 24px;
            font-weight: 600;
            color: #2c3e50;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-label {
            display: block;
            font-size: 14px;
            color: #4a5568;
            margin-bottom: 8px;
            font-weight: 500;
        }
        
        .form-input {
            width: 100%;
            padding: 10px 12px;
            border: 1px solid #cbd5e0;
            border-radius: 6px;
            font-size: 14px;
        }
        
        .form-input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }
        
        .modal-footer {
            display: flex;
            gap: 10px;
            justify-content: flex-end;
            margin-top: 30px;
        }
        
        .sidebar-footer {
            position: absolute;
            bottom: 20px;
            left: 0;
            right: 0;
            padding: 0 20px;
        }
        
        .loading {
            text-align: center;
            padding: 40px;
            color: #999;
        }
        
        .alert {
            padding: 15px 20px;
            border-radius: 8px;
            margin-bottom: 20px;
        }
        
        .alert-success {
            background: #d1fae5;
            color: #065f46;
        }
        
        .alert-error {
            background: #fee2e2;
            color: #991b1b;
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- サイドバー -->
        <div class="sidebar">
            <div class="sidebar-header">
                <h3>Meta広告レポート</h3>
            </div>
            <nav class="sidebar-nav">
                <a href="/dashboard" class="nav-item">ダッシュボード</a>
                <a href="/campaigns" class="nav-item">📊 キャンペーン管理</a>
                <a href="/ad-performance" class="nav-item">🎯 広告パフォーマンス</a>
                <a href="/audience-analysis" class="nav-item">👥 オーディエンス分析</a>
                <a href="/multi-account" class="nav-item active">🔄 マルチアカウント</a>
                <a href="/budget-scheduling" class="nav-item">⏰ 予算スケジューリング</a>
                <a href="/alerts" class="nav-item" id="alerts-link">アラート内容</a>
                <a href="/alert-history" class="nav-item">アラート履歴</a>
                <a href="/improvement-tasks" class="nav-item">確認事項</a>
                <a href="/improvement-strategies" class="nav-item">改善施策</a>
            </nav>
            <div class="sidebar-footer">
                <form action="/logout" method="POST" style="margin: 0;">
                    <button type="submit" class="nav-item" style="
                        display: block;
                        width: 100%;
                        padding: 12px 20px;
                        background: rgba(231, 76, 60, 0.1);
                        color: #e74c3c;
                        border: 1px solid rgba(231, 76, 60, 0.2);
                        border-radius: 5px;
                        text-align: left;
                        cursor: pointer;
                        transition: all 0.3s;
                        font-size: 14px;
                        font-weight: 500;
                    " onmouseover="this.style.background='rgba(231, 76, 60, 0.2)'" onmouseout="this.style.background='rgba(231, 76, 60, 0.1)'">
                        🚪 ログアウト
                    </button>
                </form>
            </div>
        </div>
        
        <div class="main-content">
            <div class="content-header">
                <h1 class="content-title">マルチアカウント管理</h1>
                <p class="content-subtitle">複数のMeta広告アカウントを一元管理し、簡単に切り替えできます</p>
            </div>
            
            <!-- 現在のアカウント情報 -->
            <div class="account-header">
                <div class="current-account">
                    <div class="account-info">
                        <h2 id="currentAccountName">読み込み中...</h2>
                        <div class="account-details">
                            <div class="detail-item">
                                <span class="detail-label">アカウントID</span>
                                <span class="detail-value" id="currentAccountId">-</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">今月の消化額</span>
                                <span class="detail-value" id="currentSpend">¥0</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">アクティブキャンペーン</span>
                                <span class="detail-value" id="currentCampaigns">0</span>
                            </div>
                        </div>
                    </div>
                    <button class="btn-switch" onclick="showSwitchModal()">
                        アカウント切り替え
                    </button>
                </div>
            </div>
            
            <!-- アラート表示エリア -->
            <div id="alertContainer"></div>
            
            <!-- 全アカウントサマリー -->
            <div class="performance-summary">
                <h2 class="section-title">全アカウントサマリー</h2>
                <div class="summary-grid">
                    <div class="summary-item">
                        <div class="summary-label">アカウント数</div>
                        <div class="summary-value" id="totalAccounts">0</div>
                    </div>
                    <div class="summary-item">
                        <div class="summary-label">総消化額</div>
                        <div class="summary-value" id="totalSpend">¥0</div>
                    </div>
                    <div class="summary-item">
                        <div class="summary-label">総コンバージョン</div>
                        <div class="summary-value" id="totalConversions">0</div>
                    </div>
                    <div class="summary-item">
                        <div class="summary-label">平均CPA</div>
                        <div class="summary-value" id="avgCPA">¥0</div>
                    </div>
                </div>
            </div>
            
            <!-- アカウント一覧 -->
            <div>
                <h2 class="section-title">アカウント一覧</h2>
                <div class="accounts-grid" id="accountsGrid">
                    <div class="loading">アカウントデータを読み込み中...</div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- アカウント追加モーダル -->
    <div class="modal" id="addAccountModal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">新規アカウントを追加</h2>
            </div>
            <form id="addAccountForm">
                <div class="form-group">
                    <label class="form-label">アカウント名</label>
                    <input type="text" class="form-input" id="newAccountName" required>
                </div>
                <div class="form-group">
                    <label class="form-label">アカウントID</label>
                    <input type="text" class="form-input" id="newAccountId" placeholder="act_xxxxx" required>
                </div>
                <div class="form-group">
                    <label class="form-label">アクセストークン</label>
                    <input type="text" class="form-input" id="newAccessToken" required>
                </div>
                <div class="form-group">
                    <label class="form-label">ChatworkルームID</label>
                    <input type="text" class="form-input" id="newChatworkRoomId" placeholder="例: 123456789">
                    <small style="color: #999; display: block; margin-top: 5px;">このアカウントの通知を送信するChatworkルームのIDを入力してください</small>
                </div>
                
                <!-- ゴール設定セクション -->
                <div style="border-top: 1px solid #e5e7eb; margin: 20px 0; padding-top: 20px;">
                    <h3 style="margin: 0 0 15px 0; font-size: 16px; color: #374151;">ゴール設定・目標数値</h3>
                    
                    <div class="form-group">
                        <label class="form-label">サービスゴール</label>
                        <select class="form-input" id="newServiceGoal">
                            <option value="">選択してください</option>
                            <option value="toc_mail">toC（メルマガ登録）</option>
                            <option value="toc_line">toC（LINE登録）</option>
                            <option value="toc_tel">toC（電話ボタン）</option>
                            <option value="toc_buy">toC（購入）</option>
                            <option value="tob_mail">toB（メルマガ登録）</option>
                            <option value="tob_line">toB（LINE登録）</option>
                            <option value="tob_tel">toB（電話ボタン）</option>
                            <option value="tob_buy">toB（購入）</option>
                        </select>
                    </div>
                    
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
                        <div class="form-group">
                            <label class="form-label">目標CPA (円)</label>
                            <input type="number" class="form-input" id="newTargetCPA" placeholder="2000">
                        </div>
                        <div class="form-group">
                            <label class="form-label">目標CPM (円)</label>
                            <input type="number" class="form-input" id="newTargetCPM" placeholder="1000">
                        </div>
                    </div>
                    
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
                        <div class="form-group">
                            <label class="form-label">目標CTR (%)</label>
                            <input type="number" step="0.1" class="form-input" id="newTargetCTR" placeholder="2.5">
                        </div>
                        <div class="form-group">
                            <label class="form-label">目標CV数</label>
                            <input type="number" class="form-input" id="newTargetCV" placeholder="10">
                        </div>
                    </div>
                    
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
                        <div class="form-group">
                            <label class="form-label">日予算 (円)</label>
                            <input type="number" class="form-input" id="newDailyBudget" placeholder="5000">
                        </div>
                        <div class="form-group">
                            <label class="form-label">予算消化率目標 (%)</label>
                            <input type="number" class="form-input" id="newBudgetRate" placeholder="80">
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" onclick="closeModal('addAccountModal')">
                        キャンセル
                    </button>
                    <button type="submit" class="btn btn-primary">
                        追加
                    </button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- アカウント編集モーダル -->
    <div class="modal" id="editAccountModal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">アカウント設定を編集</h2>
            </div>
            <form id="editAccountForm">
                <input type="hidden" id="editAccountId">
                <div class="form-group">
                    <label class="form-label">アカウント名</label>
                    <input type="text" class="form-input" id="editAccountName" required>
                </div>
                <div class="form-group">
                    <label class="form-label">ChatworkルームID</label>
                    <input type="text" class="form-input" id="editChatworkRoomId" placeholder="例: 123456789">
                    <small style="color: #999; display: block; margin-top: 5px;">このアカウントの通知を送信するChatworkルームのIDを入力してください</small>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" onclick="closeModal('editAccountModal')">
                        キャンセル
                    </button>
                    <button type="submit" class="btn btn-primary">
                        更新
                    </button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- アカウント切り替えモーダル -->
    <div class="modal" id="switchAccountModal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">アカウントを選択</h2>
            </div>
            <div id="accountSelectList">
                <!-- 動的に生成 -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="closeModal('switchAccountModal')">
                    キャンセル
                </button>
            </div>
        </div>
    </div>
    
    <script>
        let accounts = [];
        let currentAccount = null;
        
        // 初期化
        document.addEventListener('DOMContentLoaded', function() {
            loadAccounts();
            setupEventListeners();
        });
        
        // イベントリスナー設定
        function setupEventListeners() {
            document.getElementById('addAccountForm').addEventListener('submit', async function(e) {
                e.preventDefault();
                await addAccount();
            });
            
            document.getElementById('editAccountForm').addEventListener('submit', async function(e) {
                e.preventDefault();
                await updateAccount();
            });
        }
        
        // アカウントデータ読み込み
        async function loadAccounts() {
            try {
                const response = await fetch('/api/multi-accounts');
                const data = await response.json();
                
                if (data.success) {
                    accounts = data.accounts || [];
                    currentAccount = data.currentAccount;
                    displayAccounts();
                    updateSummary();
                    updateCurrentAccount();
                }
            } catch (error) {
                console.error('アカウント読み込みエラー:', error);
                showAlert('アカウントデータの読み込みに失敗しました', 'error');
            }
        }
        
        // アカウント表示
        function displayAccounts() {
            const grid = document.getElementById('accountsGrid');
            
            if (accounts.length === 0) {
                grid.innerHTML = `
                    <div class="add-account-card" onclick="showAddModal()">
                        <div class="add-icon">+</div>
                        <div class="add-text">アカウントを追加</div>
                    </div>
                `;
                return;
            }
            
            let html = '';
            accounts.forEach(account => {
                const isActive = currentAccount && currentAccount.id === account.id;
                html += `
                    <div class="account-card ${isActive ? 'active' : ''}" onclick="selectAccount('${account.id}')">
                        ${isActive ? '<div class="active-badge">使用中</div>' : ''}
                        <div class="account-name">${account.name}</div>
                        <div class="account-id">${account.id}</div>
                        <div class="account-stats" data-account-id="${account.id}">
                            <div class="stat-item">
                                <div class="stat-label">消化額</div>
                                <div class="stat-value">¥${(account.spend || 0).toLocaleString()}</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-label">CV</div>
                                <div class="stat-value">${account.conversions || 0}<span class="breakdown-text" style="font-size: 10px; opacity: 0.7; margin-left: 4px;"></span></div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-label">CPA</div>
                                <div class="stat-value">¥${account.cpa ? account.cpa.toLocaleString() : '-'}<span class="breakdown-text" style="font-size: 10px; opacity: 0.7; margin-left: 4px;"></span></div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-label">CTR</div>
                                <div class="stat-value">${(account.ctr ? Math.round(account.ctr * 10) / 10 : 0)}%</div>
                            </div>
                            <div class="stat-item" style="grid-column: span 2;">
                                <div class="stat-label">Chatwork</div>
                                <div class="stat-value" style="font-size: 14px;">${account.chatworkRoomId ? account.chatworkRoomId : '未設定'}</div>
                            </div>
                        </div>
                        <div class="account-actions">
                            ${isActive ? 
                                '<button class="btn btn-primary">使用中</button>' :
                                `<button class="btn btn-secondary" onclick="switchToAccount('${account.id}'); event.stopPropagation();">切り替え</button>`
                            }
                            <button class="btn btn-secondary" onclick="editAccount('${account.id}'); event.stopPropagation();">編集</button>
                            <button class="btn btn-danger" onclick="removeAccount('${account.id}'); event.stopPropagation();">削除</button>
                        </div>
                    </div>
                `;
            });
            
            // 追加カードを最後に追加
            html += `
                <div class="add-account-card" onclick="showAddModal()">
                    <div class="add-icon">+</div>
                    <div class="add-text">アカウントを追加</div>
                </div>
            `;
            
            grid.innerHTML = html;
        }
        
        // 現在のアカウント情報更新
        function updateCurrentAccount() {
            if (!currentAccount) {
                document.getElementById('currentAccountName').textContent = 'アカウント未選択';
                document.getElementById('currentAccountId').textContent = '-';
                document.getElementById('currentSpend').textContent = '¥0';
                document.getElementById('currentCampaigns').textContent = '0';
                return;
            }
            
            document.getElementById('currentAccountName').textContent = currentAccount.name;
            document.getElementById('currentAccountId').textContent = currentAccount.id;
            document.getElementById('currentSpend').textContent = `¥${(currentAccount.spend || 0).toLocaleString()}`;
            document.getElementById('currentCampaigns').textContent = currentAccount.campaigns || 0;
        }
        
        // サマリー更新
        function updateSummary() {
            const totalAccounts = accounts.length;
            const totalSpend = accounts.reduce((sum, acc) => sum + (acc.spend || 0), 0);
            const totalConversions = accounts.reduce((sum, acc) => sum + (acc.conversions || 0), 0);
            const avgCPA = totalConversions > 0 ? Math.round(totalSpend / totalConversions) : 0;
            
            document.getElementById('totalAccounts').textContent = totalAccounts;
            document.getElementById('totalSpend').textContent = `¥${totalSpend.toLocaleString()}`;
            document.getElementById('totalConversions').textContent = totalConversions;
            document.getElementById('avgCPA').textContent = `¥${avgCPA.toLocaleString()}`;
        }
        
        // アカウント切り替え
        async function switchToAccount(accountId) {
            try {
                const response = await fetch('/api/multi-accounts/switch', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ accountId })
                });
                
                const result = await response.json();
                if (result.success) {
                    showAlert('アカウントを切り替えました', 'success');
                    loadAccounts();
                } else {
                    showAlert('切り替えに失敗しました: ' + result.error, 'error');
                }
            } catch (error) {
                console.error('アカウント切り替えエラー:', error);
                showAlert('アカウント切り替え中にエラーが発生しました', 'error');
            }
        }
        
        // アカウント追加
        async function addAccount() {
            const name = document.getElementById('newAccountName').value;
            const id = document.getElementById('newAccountId').value;
            const token = document.getElementById('newAccessToken').value;
            const chatworkRoomId = document.getElementById('newChatworkRoomId').value;
            const serviceGoal = document.getElementById('newServiceGoal').value;
            const targetCPA = document.getElementById('newTargetCPA').value;
            const targetCPM = document.getElementById('newTargetCPM').value;
            const targetCTR = document.getElementById('newTargetCTR').value;
            const targetCV = document.getElementById('newTargetCV').value;
            const dailyBudget = document.getElementById('newDailyBudget').value;
            const budgetRate = document.getElementById('newBudgetRate').value;
            
            try {
                const response = await fetch('/api/multi-accounts/add', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                        name, 
                        id, 
                        token, 
                        chatworkRoomId,
                        serviceGoal,
                        targetCPA,
                        targetCPM,
                        targetCTR,
                        targetCV,
                        dailyBudget,
                        budgetRate
                    })
                });
                
                const result = await response.json();
                if (result.success) {
                    showAlert('アカウントを追加しました', 'success');
                    closeModal('addAccountModal');
                    loadAccounts();
                    document.getElementById('addAccountForm').reset();
                } else {
                    showAlert('追加に失敗しました: ' + result.error, 'error');
                }
            } catch (error) {
                console.error('アカウント追加エラー:', error);
                showAlert('アカウント追加中にエラーが発生しました', 'error');
            }
        }
        
        // アカウント削除
        async function removeAccount(accountId) {
            if (!confirm('このアカウントを削除しますか？')) return;
            
            try {
                const response = await fetch('/api/multi-accounts/remove', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ accountId })
                });
                
                const result = await response.json();
                if (result.success) {
                    showAlert('アカウントを削除しました', 'success');
                    loadAccounts();
                } else {
                    showAlert('削除に失敗しました: ' + result.error, 'error');
                }
            } catch (error) {
                console.error('アカウント削除エラー:', error);
                showAlert('アカウント削除中にエラーが発生しました', 'error');
            }
        }
        
        // モーダル表示
        function showAddModal() {
            document.getElementById('addAccountModal').classList.add('active');
        }
        
        function showSwitchModal() {
            const modal = document.getElementById('switchAccountModal');
            const list = document.getElementById('accountSelectList');
            
            if (accounts.length === 0) {
                list.innerHTML = '<p style="text-align: center; color: #999;">アカウントがありません</p>';
            } else {
                list.innerHTML = accounts.map(account => `
                    <div class="account-card" style="margin-bottom: 10px; cursor: pointer;" onclick="switchToAccount('${account.id}'); closeModal('switchAccountModal');">
                        <div class="account-name">${account.name}</div>
                        <div class="account-id">${account.id}</div>
                    </div>
                `).join('');
            }
            
            modal.classList.add('active');
        }
        
        function closeModal(modalId) {
            document.getElementById(modalId).classList.remove('active');
        }
        
        // アラート表示
        function showAlert(message, type) {
            const container = document.getElementById('alertContainer');
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type}`;
            alertDiv.textContent = message;
            
            container.innerHTML = '';
            container.appendChild(alertDiv);
            
            setTimeout(() => {
                alertDiv.remove();
            }, 5000);
        }
        
        // アカウント選択
        function selectAccount(accountId) {
            const account = accounts.find(acc => acc.id === accountId);
            if (account) {
                console.log('選択されたアカウント:', account);
            }
        }
        
        // アカウント編集
        function editAccount(accountId) {
            const account = accounts.find(acc => acc.id === accountId);
            if (!account) return;
            
            document.getElementById('editAccountId').value = account.id;
            document.getElementById('editAccountName').value = account.name;
            document.getElementById('editChatworkRoomId').value = account.chatworkRoomId || '';
            
            document.getElementById('editAccountModal').classList.add('active');
        }
        
        // アカウント更新
        async function updateAccount() {
            const accountId = document.getElementById('editAccountId').value;
            const name = document.getElementById('editAccountName').value;
            const chatworkRoomId = document.getElementById('editChatworkRoomId').value;
            
            try {
                const response = await fetch('/api/multi-accounts/update', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ accountId, name, chatworkRoomId })
                });
                
                const result = await response.json();
                if (result.success) {
                    showAlert('アカウント設定を更新しました', 'success');
                    closeModal('editAccountModal');
                    loadAccounts();
                } else {
                    showAlert('更新に失敗しました: ' + result.error, 'error');
                }
            } catch (error) {
                console.error('アカウント更新エラー:', error);
                showAlert('アカウント更新中にエラーが発生しました', 'error');
            }
        }
        
        // CV/CPA内訳表示の関数
        function updateBreakdowns(accounts) {
            accounts.forEach(account => {
                if (account.conversions && account.conversions.breakdown && account.conversions.breakdown.length > 1) {
                    // CV内訳
                    const cvBreakdownElements = document.querySelectorAll(`[data-account-id="${account.id}"] .stat-value .breakdown-text`);
                    if (cvBreakdownElements.length > 0) {
                        const cvItems = account.conversions.breakdown.map(item => `${item.type}: ${item.count}件`).join('、');
                        cvBreakdownElements[0].textContent = `(${cvItems})`;
                    }
                    
                    // CPA内訳（総消化金額÷CV数方式）
                    if (cvBreakdownElements.length > 1) {
                        const totalCV = account.conversions.total || 0;
                        if (totalCV > 0) {
                            const cpaItems = account.conversions.breakdown.map(item => {
                                // 総消化金額をCV数で按分する方式
                                const cpa = item.count > 0 ? Math.round((account.spend || 0) / item.count) : 0;
                                return `${item.type}: ${cpa.toLocaleString()}円`;
                            }).join('、');
                            cvBreakdownElements[1].textContent = `(${cpaItems})`;
                        }
                    }
                }
            });
        }
    </script>
</body>
</html>