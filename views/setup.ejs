<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>初期設定 - Meta広告ダッシュボード</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        .setup-container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 25px;
            box-shadow: 0 20px 50px rgba(0,0,0,0.15);
            overflow: hidden;
        }
        .setup-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            text-align: center;
            padding: 40px 20px;
        }
        .setup-header h1 {
            font-size: 32px;
            margin-bottom: 10px;
            font-weight: 700;
        }
        .setup-header p {
            font-size: 18px;
            opacity: 0.9;
        }
        .progress-section {
            padding: 20px 40px;
            background: #f8fafc;
            border-bottom: 1px solid #e2e8f0;
        }
        .progress-bar {
            width: 100%;
            height: 8px;
            background: #e2e8f0;
            border-radius: 4px;
            overflow: hidden;
            margin-bottom: 10px;
        }
        .progress-fill {
            height: 100%;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            width: 0%;
            transition: width 0.3s ease;
        }
        .progress-text {
            text-align: center;
            color: #64748b;
            font-size: 14px;
            font-weight: 500;
        }
        .setup-content {
            padding: 40px;
        }
        .api-section {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 40px;
            margin-bottom: 40px;
        }
        .api-card {
            background: #f8fafc;
            border: 2px solid #e2e8f0;
            border-radius: 16px;
            padding: 30px;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        .api-card:hover {
            border-color: #667eea;
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(102, 126, 234, 0.1);
        }
        .api-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
        .api-card h3 {
            display: flex;
            align-items: center;
            gap: 12px;
            font-size: 24px;
            margin-bottom: 20px;
            color: #1e293b;
            font-weight: 700;
        }
        .api-icon {
            width: 32px;
            height: 32px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 18px;
            color: white;
        }
        .meta-icon { background: #1877f2; }
        .chatwork-icon { background: #f39c12; }
        .form-group {
            margin-bottom: 20px;
        }
        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #374151;
            font-size: 14px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        .form-group input {
            width: 100%;
            padding: 14px 16px;
            border: 2px solid #e5e7eb;
            border-radius: 10px;
            font-size: 16px;
            transition: all 0.3s ease;
            background: white;
        }
        .form-group input:focus {
            border-color: #667eea;
            outline: none;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            transform: translateY(-1px);
        }
        .form-group small {
            display: block;
            margin-top: 6px;
            color: #6b7280;
            font-size: 13px;
            line-height: 1.4;
        }
        .test-btn {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            margin-top: 15px;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        .test-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(16, 185, 129, 0.3);
        }
        .test-btn:disabled {
            background: #9ca3af;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }
        .status {
            margin-top: 15px;
            padding: 12px 16px;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 500;
            display: none;
        }
        .status.success {
            background: #d1fae5;
            color: #065f46;
            border: 1px solid #a7f3d0;
            display: block;
            white-space: pre-line; /* 改行を有効にする */
            line-height: 1.5;
        }
        .status.error {
            background: #fee2e2;
            color: #991b1b;
            border: 1px solid #fecaca;
            display: block;
        }
        .status.loading {
            background: #dbeafe;
            color: #1e40af;
            border: 1px solid #93c5fd;
            display: block;
        }
        .goal-section {
            background: #f8fafc;
            border: 2px solid #e2e8f0;
            border-radius: 16px;
            padding: 30px;
            margin-bottom: 40px;
        }
        .goal-section h3 {
            display: flex;
            align-items: center;
            gap: 12px;
            font-size: 24px;
            margin-bottom: 25px;
            color: #1e293b;
            font-weight: 700;
        }
        .goal-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 25px;
        }
        .goal-select {
            grid-column: 1 / -1;
            margin-bottom: 20px;
        }
        .goal-select select {
            width: 100%;
            padding: 14px 16px;
            border: 2px solid #e5e7eb;
            border-radius: 10px;
            font-size: 16px;
            background: white;
            cursor: pointer;
        }
        .target-values {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        .target-card {
            background: white;
            border: 2px solid #e5e7eb;
            border-radius: 12px;
            padding: 20px;
            text-align: center;
            transition: all 0.3s ease;
        }
        .target-card:hover {
            border-color: #667eea;
            transform: translateY(-2px);
        }
        .target-card h4 {
            color: #1e293b;
            margin-bottom: 10px;
            font-size: 16px;
            font-weight: 600;
        }
        .target-card input {
            width: 100%;
            padding: 10px;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            text-align: center;
            font-size: 16px;
            font-weight: 600;
        }
        .target-card small {
            display: block;
            margin-top: 5px;
            color: #6b7280;
            font-size: 12px;
        }
        .notification-section {
            background: #f8fafc;
            border: 2px solid #e2e8f0;
            border-radius: 16px;
            padding: 30px;
            margin-bottom: 40px;
        }
        .notification-section h3 {
            display: flex;
            align-items: center;
            gap: 12px;
            font-size: 24px;
            margin-bottom: 25px;
            color: #1e293b;
            font-weight: 700;
        }
        .notification-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
        }
        .notification-item {
            background: white;
            border: 2px solid #e5e7eb;
            border-radius: 12px;
            padding: 20px;
        }
        .notification-item h4 {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 15px;
            color: #1e293b;
            font-weight: 600;
        }
        .toggle-switch {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 15px;
        }
        .switch {
            position: relative;
            width: 50px;
            height: 24px;
            background: #e5e7eb;
            border-radius: 12px;
            cursor: pointer;
            transition: background 0.3s ease;
        }
        .switch.active {
            background: #667eea;
        }
        .switch::before {
            content: '';
            position: absolute;
            top: 2px;
            left: 2px;
            width: 20px;
            height: 20px;
            background: white;
            border-radius: 50%;
            transition: transform 0.3s ease;
        }
        .switch.active::before {
            transform: translateX(26px);
        }
        .time-input {
            width: 100%;
            padding: 8px 12px;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            font-size: 14px;
        }
        .submit-section {
            text-align: center;
            padding: 40px 0;
            border-top: 1px solid #e2e8f0;
        }
        .submit-btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 18px 40px;
            border-radius: 12px;
            cursor: pointer;
            font-size: 18px;
            font-weight: 700;
            transition: all 0.3s ease;
            min-width: 280px;
        }
        .submit-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
        }
        .submit-btn:disabled {
            background: #9ca3af;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }
        @media (max-width: 768px) {
            .setup-content { padding: 20px; }
            .api-section { grid-template-columns: 1fr; gap: 20px; }
            .goal-grid { grid-template-columns: 1fr; }
            .target-values { grid-template-columns: 1fr; }
            .notification-grid { grid-template-columns: 1fr; }
        }
    </style>
</head>
<body>
    <div class="setup-container">
        <!-- ヘッダー -->
        <div class="setup-header">
            <h1>🚀 初期設定</h1>
            <p>Meta広告の自動分析・チャットワーク通知を開始しましょう</p>
        </div>
        <!-- プログレスバー -->
        <div class="progress-section">
            <div class="progress-bar">
                <div class="progress-fill" id="progressFill"></div>
            </div>
            <div class="progress-text" id="progressText">設定を完了してダッシュボードを開始しましょう</div>
            <div class="progress-steps" id="progressSteps" style="display: none; margin-top: 15px; font-size: 12px; color: #64748b;">
                <div>📊 Meta広告API: <span id="step-meta">未設定</span></div>
                <div>💬 チャットワーク: <span id="step-chatwork">未設定</span></div>
                <div>🔔 通知設定: <span id="step-schedule">未設定</span></div>
                <div>🎯 目標設定: <span id="step-goals">未設定</span></div>
            </div>
        </div>
        <form method="POST" action="/setup" id="setupForm" class="setup-content">
            <!-- API連携セクション -->
            <div class="api-section">
                <!-- Meta広告API -->
                <div class="api-card">
                    <h3>
                        <div class="api-icon meta-icon">📊</div>
                        Meta広告API
                    </h3>
                    <div class="form-group">
                        <label>アクセストークン</label>
                        <input type="password" name="meta_access_token" id="metaToken" required>
                        <small>Meta for Developers で取得した長期アクセストークンを入力してください</small>
                    </div>
                    <div class="form-group">
                        <label>広告アカウントID</label>
                        <input type="text" name="meta_account_id" id="metaAccountId" placeholder="act_1234567890" required>
                        <small>広告マネージャで確認できるアカウントID（act_を含む形式）</small>
                    </div>
                    <div class="form-group">
                        <label>アプリID（任意）</label>
                        <input type="text" name="meta_app_id" id="metaAppId">
                        <small>Meta for Developers で作成したアプリのID</small>
                    </div>
                    <button type="button" class="test-btn" onclick="testMetaAPI()">
                        <span>🔗</span> 接続テスト
                    </button>
                    <div id="meta-status" class="status"></div>
                </div>
                <!-- チャットワークAPI -->
                <div class="api-card">
                    <h3>
                        <div class="api-icon chatwork-icon">💬</div>
                        チャットワーク連携
                    </h3>
                    <div class="form-group">
                        <label>APIトークン</label>
                        <input type="password" name="chatwork_api_token" id="chatworkToken" required>
                        <small>チャットワークの「サービス連携」で取得したAPIトークン</small>
                    </div>
                    <div class="form-group">
                        <label>ルームID</label>
                        <input type="text" name="chatwork_room_id" id="chatworkRoomId" required>
                        <small>通知を送信するチャットルームのID（数字のみ）</small>
                    </div>
                    <div class="form-group">
                        <label>ルーム名（確認用）</label>
                        <input type="text" readonly placeholder="接続テスト後に表示されます" id="roomName">
                        <small>接続テストが成功すると、ルーム名が表示されます</small>
                    </div>
                    <button type="button" class="test-btn" onclick="testChatwork()">
                        <span>🔗</span> 接続テスト
                    </button>
                    <div id="chatwork-status" class="status"></div>
                </div>
            </div>
            <!-- ゴール設定セクション -->
            <div class="goal-section">
                <h3>
                    <span>🎯</span>
                    ゴール設定・目標数値
                </h3>
                <div class="goal-select">
                    <label>広告の目的・ゴール</label>
                    <select name="goal_type" id="goalType" onchange="updateTargetValues()" required>
                        <option value="">ゴールを選択してください</option>
                        <optgroup label="👥 toC（個人向け）">
                            <option value="toC_newsletter">📧 メルマガ登録</option>
                            <option value="toC_line">📱 LINE登録</option>
                            <option value="toC_phone">📞 電話ボタン</option>
                            <option value="toC_purchase">🛒 購入</option>
                        </optgroup>
                        <optgroup label="🏢 toB（法人向け）">
                            <option value="toB_newsletter">📧 メルマガ登録</option>
                            <option value="toB_line">📱 LINE登録</option>
                            <option value="toB_phone">📞 電話ボタン</option>
                            <option value="toB_purchase">💼 購入</option>
                        </optgroup>
                    </select>
                </div>
                <div class="target-values" id="targetValues">
                    <!-- JavaScriptで動的生成 -->
                </div>
            </div>
            <!-- 通知設定セクション -->
            <div class="notification-section">
                <h3>
                    <span>🔔</span>
                    通知設定
                </h3>
                <div class="notification-grid">
                    <div class="notification-item">
                        <h4>📈 日次レポート</h4>
                        <div class="toggle-switch">
                            <div class="switch active" onclick="toggleSwitch(this)"></div>
                            <span>毎日の詳細レポート</span>
                            <input type="hidden" name="daily_report_enabled" value="true">
                        </div>
                        <input type="time" name="daily_report_time" value="09:00" class="time-input">
                        <small>前日の広告結果を詳細にお知らせします</small>
                    </div>
                    <div class="notification-item">
                        <h4>🔄 更新通知</h4>
                        <div class="toggle-switch">
                            <div class="switch active" onclick="toggleSwitch(this)"></div>
                            <span>定期更新通知</span>
                            <input type="hidden" name="update_notifications_enabled" value="true">
                        </div>
                        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; margin-top: 10px;">
                            <input type="time" name="update_times" value="12:00" class="time-input">
                            <input type="time" name="update_times" value="15:00" class="time-input">
                            <input type="time" name="update_times" value="17:00" class="time-input">
                            <input type="time" name="update_times" value="19:00" class="time-input">
                        </div>
                        <small>指定時間にデータ更新をお知らせします</small>
                    </div>
                    <div class="notification-item">
                        <h4>🚨 アラート通知</h4>
                        <div class="toggle-switch">
                            <div class="switch active" onclick="toggleSwitch(this)"></div>
                            <span>即時アラート通知</span>
                            <input type="hidden" name="alert_notifications_enabled" value="true">
                        </div>
                        <small>設定した基準を下回った際に即座に通知します</small>
                    </div>
                </div>
            </div>
            <!-- 送信ボタン -->
            <div class="submit-section">
                <button type="submit" class="submit-btn" id="submitBtn" disabled>
                    🚀 設定完了してダッシュボードを開始
                </button>
            </div>
        </form>
    </div>
    <script>
        // ゴール別目標数値設定（拡張版）
        const goalTargets = {
            toC_newsletter: {
                budgetRate: { min: 80, unit: '%', label: '予算消化率' },
                dailyBudget: { min: 1000, unit: '円', label: '日予算' },
                ctr: { min: 2.5, unit: '%', label: 'CTR' },
                cpm: { max: 1000, unit: '円', label: 'CPM' },
                cpa: { max: 2000, unit: '円', label: 'CPA' },
                cv: { min: 1, unit: '件/日', label: 'CV' }
            },
            toC_line: {
                budgetRate: { min: 80, unit: '%', label: '予算消化率' },
                dailyBudget: { min: 1000, unit: '円', label: '日予算' },
                ctr: { min: 2.5, unit: '%', label: 'CTR' },
                cpm: { max: 800, unit: '円', label: 'CPM' },
                cpa: { max: 1000, unit: '円', label: 'CPA' },
                cv: { min: 1, unit: '件/日', label: 'CV' }
            },
            toC_phone: {
                budgetRate: { min: 80, unit: '%', label: '予算消化率' },
                dailyBudget: { min: 1500, unit: '円', label: '日予算' },
                ctr: { min: 2.0, unit: '%', label: 'CTR' },
                cpm: { max: 1200, unit: '円', label: 'CPM' },
                cpa: { max: 3000, unit: '円', label: 'CPA' },
                cv: { min: 1, unit: '件/日', label: 'CV' }
            },
            toC_purchase: {
                budgetRate: { min: 80, unit: '%', label: '予算消化率' },
                dailyBudget: { min: 2000, unit: '円', label: '日予算' },
                ctr: { min: 1.8, unit: '%', label: 'CTR' },
                cpm: { max: 1500, unit: '円', label: 'CPM' },
                cpa: { max: 5000, unit: '円', label: 'CPA' },
                cv: { min: 1, unit: '件/日', label: 'CV' }
            },
            toB_newsletter: {
                budgetRate: { min: 80, unit: '%', label: '予算消化率' },
                dailyBudget: { min: 3000, unit: '円', label: '日予算' },
                ctr: { min: 1.5, unit: '%', label: 'CTR' },
                cpm: { max: 2000, unit: '円', label: 'CPM' },
                cpa: { max: 15000, unit: '円', label: 'CPA' },
                cv: { min: 1, unit: '件/日', label: 'CV' }
            },
            toB_line: {
                budgetRate: { min: 80, unit: '%', label: '予算消化率' },
                dailyBudget: { min: 2500, unit: '円', label: '日予算' },
                ctr: { min: 1.5, unit: '%', label: 'CTR' },
                cpm: { max: 1800, unit: '円', label: 'CPM' },
                cpa: { max: 12000, unit: '円', label: 'CPA' },
                cv: { min: 1, unit: '件/日', label: 'CV' }
            },
            toB_phone: {
                budgetRate: { min: 80, unit: '%', label: '予算消化率' },
                dailyBudget: { min: 4000, unit: '円', label: '日予算' },
                ctr: { min: 1.2, unit: '%', label: 'CTR' },
                cpm: { max: 2500, unit: '円', label: 'CPM' },
                cpa: { max: 20000, unit: '円', label: 'CPA' },
                cv: { min: 1, unit: '件/日', label: 'CV' }
            },
            toB_purchase: {
                budgetRate: { min: 80, unit: '%', label: '予算消化率' },
                dailyBudget: { min: 5000, unit: '円', label: '日予算' },
                ctr: { min: 1.0, unit: '%', label: 'CTR' },
                cpm: { max: 3000, unit: '円', label: 'CPM' },
                cpa: { max: 30000, unit: '円', label: 'CPA' },
                cv: { min: 1, unit: '件/日', label: 'CV' }
            }
        };
        function updateTargetValues() {
            const goalType = document.getElementById('goalType').value;
            const container = document.getElementById('targetValues');
            if (!goalType || !goalTargets[goalType]) {
                container.innerHTML = '<p style="text-align: center; color: #6b7280; font-style: italic;">ゴールを選択すると目標数値が表示されます</p>';
                return;
            }
            const targets = goalTargets[goalType];
            container.innerHTML = '';
            Object.keys(targets).forEach(key => {
                const target = targets[key];
                const card = document.createElement('div');
                card.className = 'target-card';
                const minMax = target.min ? `最小: ${target.min}${target.unit}` : `最大: ${target.max}${target.unit}`;
                const defaultValue = target.min || target.max;
                card.innerHTML = `
                    <h4>${target.label}</h4>
                    <input type="number" name="target_${key}" value="${defaultValue}" step="0.1">
                    <small>${minMax}</small>
                `;
                container.appendChild(card);
            });
            updateProgress();
        }
        function toggleSwitch(element) {
            element.classList.toggle('active');
            const input = element.parentNode.querySelector('input[type="hidden"]');
            input.value = element.classList.contains('active') ? 'true' : 'false';
        }
        // 設定完了状況の計算
        function calculateSetupProgress() {
            const steps = {
                metaApi: false,      // Meta広告API設定
                chatwork: false,     // チャットワークAPI設定
                schedule: false,     // 通知スケジュール設定
                goals: false         // 目標設定
            };
            
            // Meta API設定確認
            if (document.getElementById('metaToken').value && 
                document.getElementById('metaAccountId').value) {
                steps.metaApi = true;
            }
            
            // チャットワークAPI設定確認
            if (document.getElementById('chatworkToken').value && 
                document.getElementById('chatworkRoomId').value) {
                steps.chatwork = true;
            }
            
            // 通知スケジュール設定確認
            if (document.querySelector('input[name="daily_report_enabled"]:checked') ||
                document.querySelector('input[name="update_notifications_enabled"]:checked') ||
                document.querySelector('input[name="alert_notifications_enabled"]:checked')) {
                steps.schedule = true;
            }
            
            // 目標設定確認
            if (document.getElementById('goalType').value) {
                steps.goals = true;
            }
            
            // 完了済みステップ数
            const completedSteps = Object.values(steps).filter(Boolean).length;
            const totalSteps = Object.keys(steps).length;
            const progressPercentage = Math.round((completedSteps / totalSteps) * 100);
            
            return {
                percentage: progressPercentage,
                completed: completedSteps,
                total: totalSteps,
                steps: steps
            };
        }

        // プログレスバー更新
        function updateProgressBar() {
            const progress = calculateSetupProgress();
            
            // プログレスバーのDOM要素を更新
            const progressBar = document.getElementById('progressFill');
            const progressText = document.getElementById('progressText');
            const progressSteps = document.getElementById('progressSteps');
            
            if (progressBar) {
                progressBar.style.width = `${progress.percentage}%`;
            }
            
            if (progressText) {
                progressText.textContent = `設定完了: ${progress.percentage}% (${progress.completed}/${progress.total})`;
            }
            
            // ステップ詳細表示の更新
            if (progressSteps) {
                progressSteps.style.display = 'block';
                
                // 各ステップの状態を更新
                document.getElementById('step-meta').textContent = progress.steps.metaApi ? '✅ 完了' : '⏳ 未完了';
                document.getElementById('step-chatwork').textContent = progress.steps.chatwork ? '✅ 完了' : '⏳ 未完了';
                document.getElementById('step-schedule').textContent = progress.steps.schedule ? '✅ 完了' : '⏳ 未完了';
                document.getElementById('step-goals').textContent = progress.steps.goals ? '✅ 完了' : '⏳ 未完了';
            }
            
            // 送信ボタンの有効化/無効化
            const submitBtn = document.getElementById('submitBtn');
            if (progress.percentage >= 100) {
                submitBtn.disabled = false;
                submitBtn.textContent = '🚀 設定完了！ダッシュボードを開始';
                progressText.textContent = `✅ 全設定完了！送信ボタンを押してダッシュボードを開始してください (${progress.percentage}%)`;
            } else if (progress.percentage >= 75) {
                submitBtn.disabled = false;
                submitBtn.textContent = '🚀 設定完了してダッシュボードを開始';
                progressText.textContent = `✅ 設定準備完了！送信ボタンを押してください (${progress.percentage}%)`;
            } else {
                submitBtn.disabled = true;
                submitBtn.textContent = '🚀 設定完了してダッシュボードを開始';
                progressText.textContent = `設定完了まで ${Math.round(100 - progress.percentage)}% です (${progress.completed}/${progress.total})`;
            }
            
            console.log('設定進捗更新:', progress);
            
            return progress;
        }

        // 入力フィールドの変更監視
        function setupProgressTracking() {
            const inputFields = [
                'metaToken',
                'metaAccountId', 
                'chatworkToken',
                'chatworkRoomId',
                'goalType'
            ];
            
            inputFields.forEach(fieldId => {
                const field = document.getElementById(fieldId);
                if (field) {
                    field.addEventListener('input', updateProgressBar);
                    field.addEventListener('change', updateProgressBar);
                }
            });
            
            // ラジオボタンとチェックボックスの監視
            const radioCheckboxes = document.querySelectorAll('input[type="radio"], input[type="checkbox"]');
            radioCheckboxes.forEach(input => {
                input.addEventListener('change', updateProgressBar);
            });
            
            // 初期プログレス計算
            updateProgressBar();
        }

        function updateProgress() {
            updateProgressBar();
        }
        async function testMetaAPI() {
            const token = document.getElementById('metaToken').value;
            const accountId = document.getElementById('metaAccountId').value;
            const status = document.getElementById('meta-status');
            const btn = event.target;
            
            if (!token || !accountId) {
                showStatus(status, 'error', '❌ アクセストークンとアカウントIDを入力してください');
                return;
            }
            
            btn.disabled = true;
            showStatus(status, 'loading', '🔄 Meta API接続テスト中...');
            
            try {
                const response = await fetch('/api/test-meta', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ token, accountId })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showStatus(status, 'success', `✅ Meta API接続完了！\nアカウント: ${result.data.name}\n通貨: ${result.data.currency}\nタイムゾーン: ${result.data.timezone}`);
                    // 接続成功時のマーク追加
                    btn.innerHTML = '<span>✅</span> 接続完了';
                    btn.style.background = 'linear-gradient(135deg, #10b981 0%, #059669 100%)';
                } else {
                    showStatus(status, 'error', `❌ 接続失敗: ${result.error}`);
                }
            } catch (error) {
                showStatus(status, 'error', '❌ 接続テストでエラーが発生しました');
            } finally {
                btn.disabled = false;
            }
        }
        async function testChatwork() {
            const token = document.getElementById('chatworkToken').value;
            const roomId = document.getElementById('chatworkRoomId').value;
            const status = document.getElementById('chatwork-status');
            const btn = event.target;
            
            if (!token || !roomId) {
                showStatus(status, 'error', '❌ APIトークンとルームIDを入力してください');
                return;
            }
            
            btn.disabled = true;
            showStatus(status, 'loading', '🔄 チャットワーク接続テスト中...');
            
            try {
                const response = await fetch('/api/test-chatwork', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ token, roomId })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    document.getElementById('roomName').value = result.data.name || 'チャットルーム';
                    showStatus(status, 'success', `✅ チャットワーク接続完了！\nルーム: ${result.data.name}\nタイプ: ${result.data.type}\n権限: ${result.data.role}`);
                    // 接続成功時のマーク追加
                    btn.innerHTML = '<span>✅</span> 接続完了';
                    btn.style.background = 'linear-gradient(135deg, #10b981 0%, #059669 100%)';
                } else {
                    showStatus(status, 'error', `❌ 接続失敗: ${result.error}`);
                }
            } catch (error) {
                showStatus(status, 'error', '❌ 接続テストでエラーが発生しました');
            } finally {
                btn.disabled = false;
            }
        }
        function showStatus(element, type, message) {
            element.className = `status ${type}`;
            element.textContent = message;
        }

        // チャットワーク通知送信機能
        async function sendChatworkNotification(messageType, data = {}) {
            try {
                const chatworkConfig = {
                    apiToken: document.getElementById('chatworkToken').value,
                    roomId: document.getElementById('chatworkRoomId').value
                };
                
                if (!chatworkConfig.apiToken || !chatworkConfig.roomId) {
                    throw new Error('チャットワーク設定が不完全です');
                }
                
                let message = '';
                
                switch (messageType) {
                    case 'daily_report':
                        message = generateDailyReportMessage(data);
                        break;
                    case 'update_notification':
                        message = generateUpdateNotificationMessage(data);
                        break;
                    case 'alert_notification':
                        message = generateAlertNotificationMessage(data);
                        break;
                    case 'token_expiry_warning':
                        message = generateTokenExpiryWarning();
                        break;
                    case 'setup_completion':
                        message = generateSetupCompletionMessage();
                        break;
                }
                
                const response = await fetch('/api/send-chatwork-notification', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        apiToken: chatworkConfig.apiToken,
                        roomId: chatworkConfig.roomId,
                        message: message,
                        messageType: messageType
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    console.log('✅ チャットワーク通知送信成功');
                    return true;
                } else {
                    throw new Error(result.error);
                }
                
            } catch (error) {
                console.error('❌ チャットワーク通知送信失敗:', error);
                return false;
            }
        }

        // 日次レポートメッセージ生成
        function generateDailyReportMessage(data) {
            const today = new Date().toLocaleDateString('ja-JP');
            
            return `[info][title]📊 Meta広告 日次レポート - ${today}[/title]
💰 消化金額: ${data.spend?.toLocaleString() || 0}円
📈 予算消化率: ${data.budgetRate || 0}%
👆 CTR: ${data.ctr || 0}%
💵 CPM: ${data.cpm?.toLocaleString() || 0}円
🎯 CV数: ${data.conversions || 0}件
💰 CPA: ${data.cpa?.toLocaleString() || 0}円
🔄 フリークエンシー: ${data.frequency || 0}

${data.budgetRate > 100 ? '⚠️ 予算オーバーしています' : '✅ 予算内で運用中'}
[/info]`;
        }

        // 更新通知メッセージ生成
        function generateUpdateNotificationMessage(data) {
            return `[info][title]🔄 Meta広告データ更新通知[/title]
データが更新されました。

前回との比較:
- 消化金額: ${data.previousSpend || 0}円 → ${data.currentSpend || 0}円
- CTR: ${data.previousCtr || 0}% → ${data.currentCtr || 0}%
- CV数: ${data.previousConversions || 0}件 → ${data.currentConversions || 0}件

${data.improvements ? '📈 改善点があります' : '📊 継続して監視中'}
[/info]`;
        }

        // 技術用語を日本語に変換する関数
        function translateAlertTerms(alertText) {
            return alertText
                .replace(/budget_rate/g, '予算消化率')
                .replace(/ctr/g, 'CTR')
                .replace(/conversions/g, 'CV')
                .replace(/cpa_rate/g, 'CPA')
                .replace(/cpm_increase/g, 'CPM上昇')
                .replace(/日予算/g, '日予算')
                .replace(/CPM/g, 'CPM');
        }

        // アラート通知メッセージ生成
        function generateAlertNotificationMessage(data) {
            const today = new Date().toLocaleDateString('ja-JP');
            
            let message = `Meta広告 アラート通知 (${today})
以下のアラートが発生しています：

`;

            if (data.alerts && data.alerts.length > 0) {
                data.alerts.forEach((alert, index) => {
                    const translatedMessage = translateAlertTerms(alert.message || alert);
                    const category = alert.metric || alert;
                    message += `${index + 1}. **${category}**：${translatedMessage}\n`;
                });
            }

            message += `
確認事項：http://localhost:3000/improvement-tasks
改善施策：http://localhost:3000/improvement-strategies

📊 ダッシュボードで詳細を確認してください。
http://localhost:3000/dashboard`;

            return message;
        }

        // トークン期限警告メッセージ生成
        function generateTokenExpiryWarning() {
            return `[info][title]⚠️ アクセストークン有効期限警告[/title]
アクセストークンの有効期限1週間前です。
アクセストークンを発行して、有効期限を2ヶ月間に更新してください。

▼アクセストークン発行
https://developers.facebook.com/tools/explorer/

▼長期アクセストークンの発行
https://developers.facebook.com/tools/debug/accesstoken/

対応をお願いします。
[/info]`;
        }

        // 設定完了メッセージ生成
        function generateSetupCompletionMessage() {
            return `[info][title]✅ Meta広告レポートツール設定完了[/title]
Meta広告レポートツールの設定が完了しました。

設定内容:
- Meta広告API: 連携済み
- チャットワーク通知: 有効
- 自動レポート: 設定済み

今後、定期レポートとアラート通知を自動送信いたします。
[/info]`;
        }

        // 設定完了時の処理
        async function handleSetupCompletion() {
            console.log('=== 設定完了処理 ===');
            
            try {
                const progress = calculateSetupProgress();
                
                if (progress.percentage === 100) {
                    console.log('✅ 全設定完了 - 初回通知送信');
                    
                    // 設定完了通知送信
                    await sendChatworkNotification('setup_completion');
                    
                    console.log('✅ 初期設定通知完了');
                }
                
            } catch (error) {
                console.error('❌ 設定完了処理エラー:', error);
            }
        }

        // 設定完了時の自動遷移処理
        async function showSetupCompleteMessage() {
            const progressText = document.getElementById('progressText');
            const submitBtn = document.getElementById('submitBtn');
            
            if (progressText) {
                progressText.textContent = '✅ 設定完了！ダッシュボードに移動しています...';
                progressText.style.color = '#10b981';
            }
            
            if (submitBtn) {
                submitBtn.disabled = true;
                submitBtn.textContent = '🚀 設定完了 - 自動遷移中...';
            }
            
            // 1.5秒後にダッシュボードに遷移
            setTimeout(() => {
                window.location.href = '/dashboard?setup_completed=true';
            }, 1500);
        }

        // フォーム送信時の処理
        document.getElementById('setupForm').addEventListener('submit', async function(e) {
            const progress = calculateSetupProgress();
            
            if (progress.percentage >= 75) {
                // 設定完了通知を送信
                await handleSetupCompletion();
                
                // 設定完了メッセージ表示と自動遷移
                showSetupCompleteMessage();
            } else {
                // 設定が不完全な場合は送信をキャンセル
                e.preventDefault();
                alert('設定が不完全です。必須項目を入力してください。');
            }
        });

        // ページロード時にプログレストラッキング開始
        document.addEventListener('DOMContentLoaded', function() {
            setupProgressTracking();
            
            // 既存の設定があれば読み込み
            loadExistingSettings();
        });

        // 既存設定の読み込み
        function loadExistingSettings() {
            try {
                // 設定ファイルから既存の値を読み込む
                fetch('/api/check-saved-meta-data')
                    .then(response => response.json())
                    .then(data => {
                        if (data.success && data.hasConfig) {
                            console.log('既存設定を読み込みました');
                            updateProgressBar();
                        }
                    })
                    .catch(error => {
                        console.log('既存設定の読み込みに失敗:', error);
                    });
            } catch (error) {
                console.log('設定読み込みエラー:', error);
            }
        }
    </script>
</body>
</html> 